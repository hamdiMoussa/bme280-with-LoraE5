
bme688V2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a24c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  0800a390  0800a390  0001a390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a91c  0800a91c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a91c  0800a91c  0001a91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a924  0800a924  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a924  0800a924  0001a924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a928  0800a928  0001a928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a92c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  200001e0  0800ab0c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  0800ab0c  00020458  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014584  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002afb  00000000  00000000  0003478e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  00037290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a0  00000000  00000000  00038738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b380  00000000  00000000  00039ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015713  00000000  00000000  00054e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4ca7  00000000  00000000  0006a56b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f212  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c60  00000000  00000000  0010f264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a374 	.word	0x0800a374

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800a374 	.word	0x0800a374

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_ldivmod>:
 8000c38:	b97b      	cbnz	r3, 8000c5a <__aeabi_ldivmod+0x22>
 8000c3a:	b972      	cbnz	r2, 8000c5a <__aeabi_ldivmod+0x22>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bfbe      	ittt	lt
 8000c40:	2000      	movlt	r0, #0
 8000c42:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c46:	e006      	blt.n	8000c56 <__aeabi_ldivmod+0x1e>
 8000c48:	bf08      	it	eq
 8000c4a:	2800      	cmpeq	r0, #0
 8000c4c:	bf1c      	itt	ne
 8000c4e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c52:	f04f 30ff 	movne.w	r0, #4294967295
 8000c56:	f000 b9f7 	b.w	8001048 <__aeabi_idiv0>
 8000c5a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c62:	2900      	cmp	r1, #0
 8000c64:	db09      	blt.n	8000c7a <__aeabi_ldivmod+0x42>
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db1a      	blt.n	8000ca0 <__aeabi_ldivmod+0x68>
 8000c6a:	f000 f885 	bl	8000d78 <__udivmoddi4>
 8000c6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c76:	b004      	add	sp, #16
 8000c78:	4770      	bx	lr
 8000c7a:	4240      	negs	r0, r0
 8000c7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db1b      	blt.n	8000cbc <__aeabi_ldivmod+0x84>
 8000c84:	f000 f878 	bl	8000d78 <__udivmoddi4>
 8000c88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c90:	b004      	add	sp, #16
 8000c92:	4240      	negs	r0, r0
 8000c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c98:	4252      	negs	r2, r2
 8000c9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c9e:	4770      	bx	lr
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	f000 f867 	bl	8000d78 <__udivmoddi4>
 8000caa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb2:	b004      	add	sp, #16
 8000cb4:	4240      	negs	r0, r0
 8000cb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cba:	4770      	bx	lr
 8000cbc:	4252      	negs	r2, r2
 8000cbe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc2:	f000 f859 	bl	8000d78 <__udivmoddi4>
 8000cc6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cce:	b004      	add	sp, #16
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9ac 	b.w	8001048 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83e 	bl	8000d78 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	4605      	mov	r5, r0
 8000d0c:	460c      	mov	r4, r1
 8000d0e:	4628      	mov	r0, r5
 8000d10:	4621      	mov	r1, r4
 8000d12:	2200      	movs	r2, #0
 8000d14:	2300      	movs	r3, #0
 8000d16:	f7ff feb9 	bl	8000a8c <__aeabi_dcmplt>
 8000d1a:	b928      	cbnz	r0, 8000d28 <__aeabi_d2lz+0x20>
 8000d1c:	4628      	mov	r0, r5
 8000d1e:	4621      	mov	r1, r4
 8000d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d24:	f000 b80a 	b.w	8000d3c <__aeabi_d2ulz>
 8000d28:	4628      	mov	r0, r5
 8000d2a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000d2e:	f000 f805 	bl	8000d3c <__aeabi_d2ulz>
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	bd38      	pop	{r3, r4, r5, pc}
 8000d3a:	bf00      	nop

08000d3c <__aeabi_d2ulz>:
 8000d3c:	b5d0      	push	{r4, r6, r7, lr}
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <__aeabi_d2ulz+0x34>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	4606      	mov	r6, r0
 8000d44:	460f      	mov	r7, r1
 8000d46:	f7ff fc2f 	bl	80005a8 <__aeabi_dmul>
 8000d4a:	f7ff ff05 	bl	8000b58 <__aeabi_d2uiz>
 8000d4e:	4604      	mov	r4, r0
 8000d50:	f7ff fbb0 	bl	80004b4 <__aeabi_ui2d>
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <__aeabi_d2ulz+0x38>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	f7ff fc26 	bl	80005a8 <__aeabi_dmul>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	460b      	mov	r3, r1
 8000d60:	4630      	mov	r0, r6
 8000d62:	4639      	mov	r1, r7
 8000d64:	f7ff fa68 	bl	8000238 <__aeabi_dsub>
 8000d68:	f7ff fef6 	bl	8000b58 <__aeabi_d2uiz>
 8000d6c:	4621      	mov	r1, r4
 8000d6e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d70:	3df00000 	.word	0x3df00000
 8000d74:	41f00000 	.word	0x41f00000

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9e08      	ldr	r6, [sp, #32]
 8000d7e:	460d      	mov	r5, r1
 8000d80:	4604      	mov	r4, r0
 8000d82:	4688      	mov	r8, r1
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d14d      	bne.n	8000e24 <__udivmoddi4+0xac>
 8000d88:	428a      	cmp	r2, r1
 8000d8a:	4694      	mov	ip, r2
 8000d8c:	d968      	bls.n	8000e60 <__udivmoddi4+0xe8>
 8000d8e:	fab2 f282 	clz	r2, r2
 8000d92:	b152      	cbz	r2, 8000daa <__udivmoddi4+0x32>
 8000d94:	fa01 f302 	lsl.w	r3, r1, r2
 8000d98:	f1c2 0120 	rsb	r1, r2, #32
 8000d9c:	fa20 f101 	lsr.w	r1, r0, r1
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	ea41 0803 	orr.w	r8, r1, r3
 8000da8:	4094      	lsls	r4, r2
 8000daa:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000dae:	0c21      	lsrs	r1, r4, #16
 8000db0:	fbb8 fef5 	udiv	lr, r8, r5
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	fb05 831e 	mls	r3, r5, lr, r8
 8000dbc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dc0:	fb0e f107 	mul.w	r1, lr, r7
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x68>
 8000dc8:	eb1c 0303 	adds.w	r3, ip, r3
 8000dcc:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000dd0:	f080 811e 	bcs.w	8001010 <__udivmoddi4+0x298>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f240 811b 	bls.w	8001010 <__udivmoddi4+0x298>
 8000dda:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1a5b      	subs	r3, r3, r1
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb3 f0f5 	udiv	r0, r3, r5
 8000de8:	fb05 3310 	mls	r3, r5, r0, r3
 8000dec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df0:	fb00 f707 	mul.w	r7, r0, r7
 8000df4:	42a7      	cmp	r7, r4
 8000df6:	d90a      	bls.n	8000e0e <__udivmoddi4+0x96>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e00:	f080 8108 	bcs.w	8001014 <__udivmoddi4+0x29c>
 8000e04:	42a7      	cmp	r7, r4
 8000e06:	f240 8105 	bls.w	8001014 <__udivmoddi4+0x29c>
 8000e0a:	4464      	add	r4, ip
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	1be4      	subs	r4, r4, r7
 8000e10:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000e14:	2100      	movs	r1, #0
 8000e16:	b11e      	cbz	r6, 8000e20 <__udivmoddi4+0xa8>
 8000e18:	40d4      	lsrs	r4, r2
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e9c6 4300 	strd	r4, r3, [r6]
 8000e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0xc2>
 8000e28:	2e00      	cmp	r6, #0
 8000e2a:	f000 80ee 	beq.w	800100a <__udivmoddi4+0x292>
 8000e2e:	2100      	movs	r1, #0
 8000e30:	e9c6 0500 	strd	r0, r5, [r6]
 8000e34:	4608      	mov	r0, r1
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	fab3 f183 	clz	r1, r3
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d14a      	bne.n	8000ed8 <__udivmoddi4+0x160>
 8000e42:	42ab      	cmp	r3, r5
 8000e44:	d302      	bcc.n	8000e4c <__udivmoddi4+0xd4>
 8000e46:	4282      	cmp	r2, r0
 8000e48:	f200 80f9 	bhi.w	800103e <__udivmoddi4+0x2c6>
 8000e4c:	1a84      	subs	r4, r0, r2
 8000e4e:	eb65 0303 	sbc.w	r3, r5, r3
 8000e52:	2001      	movs	r0, #1
 8000e54:	4698      	mov	r8, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d0e2      	beq.n	8000e20 <__udivmoddi4+0xa8>
 8000e5a:	e9c6 4800 	strd	r4, r8, [r6]
 8000e5e:	e7df      	b.n	8000e20 <__udivmoddi4+0xa8>
 8000e60:	b902      	cbnz	r2, 8000e64 <__udivmoddi4+0xec>
 8000e62:	deff      	udf	#255	; 0xff
 8000e64:	fab2 f282 	clz	r2, r2
 8000e68:	2a00      	cmp	r2, #0
 8000e6a:	f040 8091 	bne.w	8000f90 <__udivmoddi4+0x218>
 8000e6e:	eba1 050c 	sub.w	r5, r1, ip
 8000e72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e76:	fa1f fe8c 	uxth.w	lr, ip
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	fbb5 f3f7 	udiv	r3, r5, r7
 8000e80:	fb07 5013 	mls	r0, r7, r3, r5
 8000e84:	0c25      	lsrs	r5, r4, #16
 8000e86:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000e8a:	fb0e f003 	mul.w	r0, lr, r3
 8000e8e:	42a8      	cmp	r0, r5
 8000e90:	d908      	bls.n	8000ea4 <__udivmoddi4+0x12c>
 8000e92:	eb1c 0505 	adds.w	r5, ip, r5
 8000e96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e9a:	d202      	bcs.n	8000ea2 <__udivmoddi4+0x12a>
 8000e9c:	42a8      	cmp	r0, r5
 8000e9e:	f200 80cb 	bhi.w	8001038 <__udivmoddi4+0x2c0>
 8000ea2:	4643      	mov	r3, r8
 8000ea4:	1a2d      	subs	r5, r5, r0
 8000ea6:	b2a4      	uxth	r4, r4
 8000ea8:	fbb5 f0f7 	udiv	r0, r5, r7
 8000eac:	fb07 5510 	mls	r5, r7, r0, r5
 8000eb0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eb4:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x156>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ec4:	d202      	bcs.n	8000ecc <__udivmoddi4+0x154>
 8000ec6:	45a6      	cmp	lr, r4
 8000ec8:	f200 80bb 	bhi.w	8001042 <__udivmoddi4+0x2ca>
 8000ecc:	4628      	mov	r0, r5
 8000ece:	eba4 040e 	sub.w	r4, r4, lr
 8000ed2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed6:	e79e      	b.n	8000e16 <__udivmoddi4+0x9e>
 8000ed8:	f1c1 0720 	rsb	r7, r1, #32
 8000edc:	408b      	lsls	r3, r1
 8000ede:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ee2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee6:	fa20 f407 	lsr.w	r4, r0, r7
 8000eea:	fa05 f301 	lsl.w	r3, r5, r1
 8000eee:	431c      	orrs	r4, r3
 8000ef0:	40fd      	lsrs	r5, r7
 8000ef2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef6:	fa00 f301 	lsl.w	r3, r0, r1
 8000efa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000efe:	0c20      	lsrs	r0, r4, #16
 8000f00:	fa1f fe8c 	uxth.w	lr, ip
 8000f04:	fb09 5518 	mls	r5, r9, r8, r5
 8000f08:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000f0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f10:	42a8      	cmp	r0, r5
 8000f12:	fa02 f201 	lsl.w	r2, r2, r1
 8000f16:	d90b      	bls.n	8000f30 <__udivmoddi4+0x1b8>
 8000f18:	eb1c 0505 	adds.w	r5, ip, r5
 8000f1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f20:	f080 8088 	bcs.w	8001034 <__udivmoddi4+0x2bc>
 8000f24:	42a8      	cmp	r0, r5
 8000f26:	f240 8085 	bls.w	8001034 <__udivmoddi4+0x2bc>
 8000f2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2e:	4465      	add	r5, ip
 8000f30:	1a2d      	subs	r5, r5, r0
 8000f32:	b2a4      	uxth	r4, r4
 8000f34:	fbb5 f0f9 	udiv	r0, r5, r9
 8000f38:	fb09 5510 	mls	r5, r9, r0, r5
 8000f3c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f44:	45ae      	cmp	lr, r5
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x1e2>
 8000f48:	eb1c 0505 	adds.w	r5, ip, r5
 8000f4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f50:	d26c      	bcs.n	800102c <__udivmoddi4+0x2b4>
 8000f52:	45ae      	cmp	lr, r5
 8000f54:	d96a      	bls.n	800102c <__udivmoddi4+0x2b4>
 8000f56:	3802      	subs	r0, #2
 8000f58:	4465      	add	r5, ip
 8000f5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f62:	eba5 050e 	sub.w	r5, r5, lr
 8000f66:	42a5      	cmp	r5, r4
 8000f68:	46c8      	mov	r8, r9
 8000f6a:	46a6      	mov	lr, r4
 8000f6c:	d356      	bcc.n	800101c <__udivmoddi4+0x2a4>
 8000f6e:	d053      	beq.n	8001018 <__udivmoddi4+0x2a0>
 8000f70:	b15e      	cbz	r6, 8000f8a <__udivmoddi4+0x212>
 8000f72:	ebb3 0208 	subs.w	r2, r3, r8
 8000f76:	eb65 050e 	sbc.w	r5, r5, lr
 8000f7a:	fa05 f707 	lsl.w	r7, r5, r7
 8000f7e:	fa22 f301 	lsr.w	r3, r2, r1
 8000f82:	40cd      	lsrs	r5, r1
 8000f84:	431f      	orrs	r7, r3
 8000f86:	e9c6 7500 	strd	r7, r5, [r6]
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f90:	f1c2 0320 	rsb	r3, r2, #32
 8000f94:	fa20 f103 	lsr.w	r1, r0, r3
 8000f98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f9c:	fa25 f303 	lsr.w	r3, r5, r3
 8000fa0:	4095      	lsls	r5, r2
 8000fa2:	430d      	orrs	r5, r1
 8000fa4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa8:	fa1f fe8c 	uxth.w	lr, ip
 8000fac:	fbb3 f1f7 	udiv	r1, r3, r7
 8000fb0:	fb07 3011 	mls	r0, r7, r1, r3
 8000fb4:	0c2b      	lsrs	r3, r5, #16
 8000fb6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000fba:	fb01 f00e 	mul.w	r0, r1, lr
 8000fbe:	4298      	cmp	r0, r3
 8000fc0:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc4:	d908      	bls.n	8000fd8 <__udivmoddi4+0x260>
 8000fc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000fca:	f101 38ff 	add.w	r8, r1, #4294967295
 8000fce:	d22f      	bcs.n	8001030 <__udivmoddi4+0x2b8>
 8000fd0:	4298      	cmp	r0, r3
 8000fd2:	d92d      	bls.n	8001030 <__udivmoddi4+0x2b8>
 8000fd4:	3902      	subs	r1, #2
 8000fd6:	4463      	add	r3, ip
 8000fd8:	1a1b      	subs	r3, r3, r0
 8000fda:	b2ad      	uxth	r5, r5
 8000fdc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fe0:	fb07 3310 	mls	r3, r7, r0, r3
 8000fe4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000fe8:	fb00 f30e 	mul.w	r3, r0, lr
 8000fec:	42ab      	cmp	r3, r5
 8000fee:	d908      	bls.n	8001002 <__udivmoddi4+0x28a>
 8000ff0:	eb1c 0505 	adds.w	r5, ip, r5
 8000ff4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ff8:	d216      	bcs.n	8001028 <__udivmoddi4+0x2b0>
 8000ffa:	42ab      	cmp	r3, r5
 8000ffc:	d914      	bls.n	8001028 <__udivmoddi4+0x2b0>
 8000ffe:	3802      	subs	r0, #2
 8001000:	4465      	add	r5, ip
 8001002:	1aed      	subs	r5, r5, r3
 8001004:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001008:	e738      	b.n	8000e7c <__udivmoddi4+0x104>
 800100a:	4631      	mov	r1, r6
 800100c:	4630      	mov	r0, r6
 800100e:	e707      	b.n	8000e20 <__udivmoddi4+0xa8>
 8001010:	4686      	mov	lr, r0
 8001012:	e6e5      	b.n	8000de0 <__udivmoddi4+0x68>
 8001014:	4618      	mov	r0, r3
 8001016:	e6fa      	b.n	8000e0e <__udivmoddi4+0x96>
 8001018:	454b      	cmp	r3, r9
 800101a:	d2a9      	bcs.n	8000f70 <__udivmoddi4+0x1f8>
 800101c:	ebb9 0802 	subs.w	r8, r9, r2
 8001020:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001024:	3801      	subs	r0, #1
 8001026:	e7a3      	b.n	8000f70 <__udivmoddi4+0x1f8>
 8001028:	4640      	mov	r0, r8
 800102a:	e7ea      	b.n	8001002 <__udivmoddi4+0x28a>
 800102c:	4620      	mov	r0, r4
 800102e:	e794      	b.n	8000f5a <__udivmoddi4+0x1e2>
 8001030:	4641      	mov	r1, r8
 8001032:	e7d1      	b.n	8000fd8 <__udivmoddi4+0x260>
 8001034:	46d0      	mov	r8, sl
 8001036:	e77b      	b.n	8000f30 <__udivmoddi4+0x1b8>
 8001038:	3b02      	subs	r3, #2
 800103a:	4465      	add	r5, ip
 800103c:	e732      	b.n	8000ea4 <__udivmoddi4+0x12c>
 800103e:	4608      	mov	r0, r1
 8001040:	e709      	b.n	8000e56 <__udivmoddi4+0xde>
 8001042:	4464      	add	r4, ip
 8001044:	3802      	subs	r0, #2
 8001046:	e742      	b.n	8000ece <__udivmoddi4+0x156>

08001048 <__aeabi_idiv0>:
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08c      	sub	sp, #48	; 0x30
 8001050:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	9302      	str	r3, [sp, #8]
 8001058:	2319      	movs	r3, #25
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	463b      	mov	r3, r7
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	2288      	movs	r2, #136	; 0x88
 8001064:	21ec      	movs	r1, #236	; 0xec
 8001066:	4857      	ldr	r0, [pc, #348]	; (80011c4 <TrimRead+0x178>)
 8001068:	f001 ff9c 	bl	8002fa4 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 800106c:	463b      	mov	r3, r7
 800106e:	3319      	adds	r3, #25
 8001070:	f04f 32ff 	mov.w	r2, #4294967295
 8001074:	9202      	str	r2, [sp, #8]
 8001076:	2207      	movs	r2, #7
 8001078:	9201      	str	r2, [sp, #4]
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2301      	movs	r3, #1
 800107e:	22e1      	movs	r2, #225	; 0xe1
 8001080:	21ec      	movs	r1, #236	; 0xec
 8001082:	4850      	ldr	r0, [pc, #320]	; (80011c4 <TrimRead+0x178>)
 8001084:	f001 ff8e 	bl	8002fa4 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8001088:	787b      	ldrb	r3, [r7, #1]
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	b21a      	sxth	r2, r3
 800108e:	783b      	ldrb	r3, [r7, #0]
 8001090:	b21b      	sxth	r3, r3
 8001092:	4313      	orrs	r3, r2
 8001094:	b21b      	sxth	r3, r3
 8001096:	b29a      	uxth	r2, r3
 8001098:	4b4b      	ldr	r3, [pc, #300]	; (80011c8 <TrimRead+0x17c>)
 800109a:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 800109c:	78fb      	ldrb	r3, [r7, #3]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	78bb      	ldrb	r3, [r7, #2]
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b21a      	sxth	r2, r3
 80010aa:	4b48      	ldr	r3, [pc, #288]	; (80011cc <TrimRead+0x180>)
 80010ac:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 80010ae:	797b      	ldrb	r3, [r7, #5]
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	b21a      	sxth	r2, r3
 80010b4:	793b      	ldrb	r3, [r7, #4]
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	4b44      	ldr	r3, [pc, #272]	; (80011d0 <TrimRead+0x184>)
 80010be:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	797b      	ldrb	r3, [r7, #5]
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	4b40      	ldr	r3, [pc, #256]	; (80011d4 <TrimRead+0x188>)
 80010d2:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 80010d4:	7a7b      	ldrb	r3, [r7, #9]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	79bb      	ldrb	r3, [r7, #6]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	4b3d      	ldr	r3, [pc, #244]	; (80011d8 <TrimRead+0x18c>)
 80010e4:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 80010e6:	7afb      	ldrb	r3, [r7, #11]
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	7abb      	ldrb	r3, [r7, #10]
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	4b39      	ldr	r3, [pc, #228]	; (80011dc <TrimRead+0x190>)
 80010f6:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 80010f8:	7b7b      	ldrb	r3, [r7, #13]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	7b3b      	ldrb	r3, [r7, #12]
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21a      	sxth	r2, r3
 8001106:	4b36      	ldr	r3, [pc, #216]	; (80011e0 <TrimRead+0x194>)
 8001108:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b21a      	sxth	r2, r3
 8001110:	7bbb      	ldrb	r3, [r7, #14]
 8001112:	b21b      	sxth	r3, r3
 8001114:	4313      	orrs	r3, r2
 8001116:	b21a      	sxth	r2, r3
 8001118:	4b32      	ldr	r3, [pc, #200]	; (80011e4 <TrimRead+0x198>)
 800111a:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 800111c:	7c7b      	ldrb	r3, [r7, #17]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	7c3b      	ldrb	r3, [r7, #16]
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b21a      	sxth	r2, r3
 800112a:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <TrimRead+0x19c>)
 800112c:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 800112e:	7cfb      	ldrb	r3, [r7, #19]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	7cbb      	ldrb	r3, [r7, #18]
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b21a      	sxth	r2, r3
 800113c:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <TrimRead+0x1a0>)
 800113e:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8001140:	7d7b      	ldrb	r3, [r7, #21]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21a      	sxth	r2, r3
 8001146:	7d3b      	ldrb	r3, [r7, #20]
 8001148:	b21b      	sxth	r3, r3
 800114a:	4313      	orrs	r3, r2
 800114c:	b21a      	sxth	r2, r3
 800114e:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <TrimRead+0x1a4>)
 8001150:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8001152:	7dfb      	ldrb	r3, [r7, #23]
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	b21a      	sxth	r2, r3
 8001158:	7dbb      	ldrb	r3, [r7, #22]
 800115a:	b21b      	sxth	r3, r3
 800115c:	4313      	orrs	r3, r2
 800115e:	b21a      	sxth	r2, r3
 8001160:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <TrimRead+0x1a8>)
 8001162:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8001164:	7e3b      	ldrb	r3, [r7, #24]
 8001166:	b29a      	uxth	r2, r3
 8001168:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <TrimRead+0x1ac>)
 800116a:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 800116c:	7ebb      	ldrb	r3, [r7, #26]
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b21a      	sxth	r2, r3
 8001172:	7e7b      	ldrb	r3, [r7, #25]
 8001174:	b21b      	sxth	r3, r3
 8001176:	4313      	orrs	r3, r2
 8001178:	b21a      	sxth	r2, r3
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <TrimRead+0x1b0>)
 800117c:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 800117e:	7efb      	ldrb	r3, [r7, #27]
 8001180:	b29a      	uxth	r2, r3
 8001182:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <TrimRead+0x1b4>)
 8001184:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8001186:	7f3b      	ldrb	r3, [r7, #28]
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	b21a      	sxth	r2, r3
 800118c:	7f7b      	ldrb	r3, [r7, #29]
 800118e:	b21b      	sxth	r3, r3
 8001190:	f003 030f 	and.w	r3, r3, #15
 8001194:	b21b      	sxth	r3, r3
 8001196:	4313      	orrs	r3, r2
 8001198:	b21a      	sxth	r2, r3
 800119a:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <TrimRead+0x1b8>)
 800119c:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800119e:	7fbb      	ldrb	r3, [r7, #30]
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	7f7b      	ldrb	r3, [r7, #29]
 80011a6:	091b      	lsrs	r3, r3, #4
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <TrimRead+0x1bc>)
 80011b2:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 80011b4:	7ffb      	ldrb	r3, [r7, #31]
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <TrimRead+0x1c0>)
 80011ba:	801a      	strh	r2, [r3, #0]
}
 80011bc:	bf00      	nop
 80011be:	3720      	adds	r7, #32
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000288 	.word	0x20000288
 80011c8:	2000020c 	.word	0x2000020c
 80011cc:	20000214 	.word	0x20000214
 80011d0:	20000216 	.word	0x20000216
 80011d4:	2000020e 	.word	0x2000020e
 80011d8:	20000218 	.word	0x20000218
 80011dc:	2000021a 	.word	0x2000021a
 80011e0:	2000021c 	.word	0x2000021c
 80011e4:	2000021e 	.word	0x2000021e
 80011e8:	20000220 	.word	0x20000220
 80011ec:	20000222 	.word	0x20000222
 80011f0:	20000224 	.word	0x20000224
 80011f4:	20000226 	.word	0x20000226
 80011f8:	20000210 	.word	0x20000210
 80011fc:	20000228 	.word	0x20000228
 8001200:	20000212 	.word	0x20000212
 8001204:	2000022a 	.word	0x2000022a
 8001208:	2000022c 	.word	0x2000022c
 800120c:	2000022e 	.word	0x2000022e

08001210 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af04      	add	r7, sp, #16
 8001216:	4604      	mov	r4, r0
 8001218:	4608      	mov	r0, r1
 800121a:	4611      	mov	r1, r2
 800121c:	461a      	mov	r2, r3
 800121e:	4623      	mov	r3, r4
 8001220:	71fb      	strb	r3, [r7, #7]
 8001222:	4603      	mov	r3, r0
 8001224:	71bb      	strb	r3, [r7, #6]
 8001226:	460b      	mov	r3, r1
 8001228:	717b      	strb	r3, [r7, #5]
 800122a:	4613      	mov	r3, r2
 800122c:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 800122e:	f7ff ff0d 	bl	800104c <TrimRead>


	uint8_t datatowrite = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB7;  // reset sequence
 800123a:	23b7      	movs	r3, #183	; 0xb7
 800123c:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800123e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001242:	9302      	str	r3, [sp, #8]
 8001244:	2301      	movs	r3, #1
 8001246:	9301      	str	r3, [sp, #4]
 8001248:	f107 030f 	add.w	r3, r7, #15
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	2301      	movs	r3, #1
 8001250:	22e0      	movs	r2, #224	; 0xe0
 8001252:	21ec      	movs	r1, #236	; 0xec
 8001254:	4858      	ldr	r0, [pc, #352]	; (80013b8 <BME280_Config+0x1a8>)
 8001256:	f001 fd91 	bl	8002d7c <HAL_I2C_Mem_Write>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d002      	beq.n	8001266 <BME280_Config+0x56>
	{
		return -1;
 8001260:	f04f 33ff 	mov.w	r3, #4294967295
 8001264:	e0a3      	b.n	80013ae <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 8001266:	2064      	movs	r0, #100	; 0x64
 8001268:	f001 fa7c 	bl	8002764 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 800126c:	797b      	ldrb	r3, [r7, #5]
 800126e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	2301      	movs	r3, #1
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	f107 030f 	add.w	r3, r7, #15
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2301      	movs	r3, #1
 8001282:	22f2      	movs	r2, #242	; 0xf2
 8001284:	21ec      	movs	r1, #236	; 0xec
 8001286:	484c      	ldr	r0, [pc, #304]	; (80013b8 <BME280_Config+0x1a8>)
 8001288:	f001 fd78 	bl	8002d7c <HAL_I2C_Mem_Write>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d002      	beq.n	8001298 <BME280_Config+0x88>
	{
		return -1;
 8001292:	f04f 33ff 	mov.w	r3, #4294967295
 8001296:	e08a      	b.n	80013ae <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001298:	2064      	movs	r0, #100	; 0x64
 800129a:	f001 fa63 	bl	8002764 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 800129e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a2:	9302      	str	r3, [sp, #8]
 80012a4:	2301      	movs	r3, #1
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	f107 030e 	add.w	r3, r7, #14
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	22f2      	movs	r2, #242	; 0xf2
 80012b2:	21ec      	movs	r1, #236	; 0xec
 80012b4:	4840      	ldr	r0, [pc, #256]	; (80013b8 <BME280_Config+0x1a8>)
 80012b6:	f001 fe75 	bl	8002fa4 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80012ba:	7bba      	ldrb	r2, [r7, #14]
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d002      	beq.n	80012c8 <BME280_Config+0xb8>
	{
		return -1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
 80012c6:	e072      	b.n	80013ae <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 80012c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012cc:	015b      	lsls	r3, r3, #5
 80012ce:	b25a      	sxtb	r2, r3
 80012d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	b25b      	sxtb	r3, r3
 80012d8:	4313      	orrs	r3, r2
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	f107 030f 	add.w	r3, r7, #15
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2301      	movs	r3, #1
 80012f2:	22f5      	movs	r2, #245	; 0xf5
 80012f4:	21ec      	movs	r1, #236	; 0xec
 80012f6:	4830      	ldr	r0, [pc, #192]	; (80013b8 <BME280_Config+0x1a8>)
 80012f8:	f001 fd40 	bl	8002d7c <HAL_I2C_Mem_Write>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <BME280_Config+0xf8>
	{
		return -1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	e052      	b.n	80013ae <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001308:	2064      	movs	r0, #100	; 0x64
 800130a:	f001 fa2b 	bl	8002764 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 800130e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001312:	9302      	str	r3, [sp, #8]
 8001314:	2301      	movs	r3, #1
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	f107 030e 	add.w	r3, r7, #14
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2301      	movs	r3, #1
 8001320:	22f5      	movs	r2, #245	; 0xf5
 8001322:	21ec      	movs	r1, #236	; 0xec
 8001324:	4824      	ldr	r0, [pc, #144]	; (80013b8 <BME280_Config+0x1a8>)
 8001326:	f001 fe3d 	bl	8002fa4 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800132a:	7bba      	ldrb	r2, [r7, #14]
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	429a      	cmp	r2, r3
 8001330:	d002      	beq.n	8001338 <BME280_Config+0x128>
	{
		return -1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	e03a      	b.n	80013ae <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	015b      	lsls	r3, r3, #5
 800133c:	b25a      	sxtb	r2, r3
 800133e:	79bb      	ldrb	r3, [r7, #6]
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	b25b      	sxtb	r3, r3
 8001344:	4313      	orrs	r3, r2
 8001346:	b25a      	sxtb	r2, r3
 8001348:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800134c:	4313      	orrs	r3, r2
 800134e:	b25b      	sxtb	r3, r3
 8001350:	b2db      	uxtb	r3, r3
 8001352:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001358:	9302      	str	r3, [sp, #8]
 800135a:	2301      	movs	r3, #1
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	f107 030f 	add.w	r3, r7, #15
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2301      	movs	r3, #1
 8001366:	22f4      	movs	r2, #244	; 0xf4
 8001368:	21ec      	movs	r1, #236	; 0xec
 800136a:	4813      	ldr	r0, [pc, #76]	; (80013b8 <BME280_Config+0x1a8>)
 800136c:	f001 fd06 	bl	8002d7c <HAL_I2C_Mem_Write>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d002      	beq.n	800137c <BME280_Config+0x16c>
	{
		return -1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	e018      	b.n	80013ae <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 800137c:	2064      	movs	r0, #100	; 0x64
 800137e:	f001 f9f1 	bl	8002764 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8001382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001386:	9302      	str	r3, [sp, #8]
 8001388:	2301      	movs	r3, #1
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	f107 030e 	add.w	r3, r7, #14
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2301      	movs	r3, #1
 8001394:	22f4      	movs	r2, #244	; 0xf4
 8001396:	21ec      	movs	r1, #236	; 0xec
 8001398:	4807      	ldr	r0, [pc, #28]	; (80013b8 <BME280_Config+0x1a8>)
 800139a:	f001 fe03 	bl	8002fa4 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800139e:	7bba      	ldrb	r2, [r7, #14]
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d002      	beq.n	80013ac <BME280_Config+0x19c>
	{
		return -1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
 80013aa:	e000      	b.n	80013ae <BME280_Config+0x19e>
	}

	return 0;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd90      	pop	{r4, r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000288 	.word	0x20000288

080013bc <BMEReadRaw>:


int BMEReadRaw(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c2, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 80013c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	2301      	movs	r3, #1
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <BMEReadRaw+0x8c>)
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2301      	movs	r3, #1
 80013d2:	22d0      	movs	r2, #208	; 0xd0
 80013d4:	21ec      	movs	r1, #236	; 0xec
 80013d6:	481d      	ldr	r0, [pc, #116]	; (800144c <BMEReadRaw+0x90>)
 80013d8:	f001 fde4 	bl	8002fa4 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 80013dc:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <BMEReadRaw+0x8c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b60      	cmp	r3, #96	; 0x60
 80013e2:	d12a      	bne.n	800143a <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295
 80013e8:	9302      	str	r3, [sp, #8]
 80013ea:	2308      	movs	r3, #8
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	463b      	mov	r3, r7
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2301      	movs	r3, #1
 80013f4:	22f7      	movs	r2, #247	; 0xf7
 80013f6:	21ec      	movs	r1, #236	; 0xec
 80013f8:	4814      	ldr	r0, [pc, #80]	; (800144c <BMEReadRaw+0x90>)
 80013fa:	f001 fdd3 	bl	8002fa4 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80013fe:	783b      	ldrb	r3, [r7, #0]
 8001400:	031a      	lsls	r2, r3, #12
 8001402:	787b      	ldrb	r3, [r7, #1]
 8001404:	011b      	lsls	r3, r3, #4
 8001406:	4313      	orrs	r3, r2
 8001408:	78ba      	ldrb	r2, [r7, #2]
 800140a:	0912      	lsrs	r2, r2, #4
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	4313      	orrs	r3, r2
 8001410:	4a0f      	ldr	r2, [pc, #60]	; (8001450 <BMEReadRaw+0x94>)
 8001412:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001414:	78fb      	ldrb	r3, [r7, #3]
 8001416:	031a      	lsls	r2, r3, #12
 8001418:	793b      	ldrb	r3, [r7, #4]
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	4313      	orrs	r3, r2
 800141e:	797a      	ldrb	r2, [r7, #5]
 8001420:	0912      	lsrs	r2, r2, #4
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	4313      	orrs	r3, r2
 8001426:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <BMEReadRaw+0x98>)
 8001428:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 800142a:	79bb      	ldrb	r3, [r7, #6]
 800142c:	021b      	lsls	r3, r3, #8
 800142e:	79fa      	ldrb	r2, [r7, #7]
 8001430:	4313      	orrs	r3, r2
 8001432:	4a09      	ldr	r2, [pc, #36]	; (8001458 <BMEReadRaw+0x9c>)
 8001434:	6013      	str	r3, [r2, #0]

		return 0;
 8001436:	2300      	movs	r3, #0
 8001438:	e001      	b.n	800143e <BMEReadRaw+0x82>
	}

	else return -1;
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200001fc 	.word	0x200001fc
 800144c:	20000288 	.word	0x20000288
 8001450:	20000204 	.word	0x20000204
 8001454:	20000200 	.word	0x20000200
 8001458:	20000208 	.word	0x20000208

0800145c <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 800145c:	b480      	push	{r7}
 800145e:	b087      	sub	sp, #28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	10da      	asrs	r2, r3, #3
 8001468:	4b18      	ldr	r3, [pc, #96]	; (80014cc <BME280_compensate_T_int32+0x70>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	4a17      	ldr	r2, [pc, #92]	; (80014d0 <BME280_compensate_T_int32+0x74>)
 8001472:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	12db      	asrs	r3, r3, #11
 800147c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	111b      	asrs	r3, r3, #4
 8001482:	4a12      	ldr	r2, [pc, #72]	; (80014cc <BME280_compensate_T_int32+0x70>)
 8001484:	8812      	ldrh	r2, [r2, #0]
 8001486:	1a9b      	subs	r3, r3, r2
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	1112      	asrs	r2, r2, #4
 800148c:	490f      	ldr	r1, [pc, #60]	; (80014cc <BME280_compensate_T_int32+0x70>)
 800148e:	8809      	ldrh	r1, [r1, #0]
 8001490:	1a52      	subs	r2, r2, r1
 8001492:	fb02 f303 	mul.w	r3, r2, r3
 8001496:	131b      	asrs	r3, r3, #12
 8001498:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <BME280_compensate_T_int32+0x78>)
 800149a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800149e:	fb02 f303 	mul.w	r3, r2, r3
 80014a2:	139b      	asrs	r3, r3, #14
 80014a4:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <BME280_compensate_T_int32+0x7c>)
 80014ae:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <BME280_compensate_T_int32+0x7c>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	3380      	adds	r3, #128	; 0x80
 80014bc:	121b      	asrs	r3, r3, #8
 80014be:	60fb      	str	r3, [r7, #12]
	return T;
 80014c0:	68fb      	ldr	r3, [r7, #12]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	371c      	adds	r7, #28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	2000020c 	.word	0x2000020c
 80014d0:	20000214 	.word	0x20000214
 80014d4:	20000216 	.word	0x20000216
 80014d8:	20000230 	.word	0x20000230

080014dc <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 80014dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014e0:	b0ca      	sub	sp, #296	; 0x128
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80014e8:	4bae      	ldr	r3, [pc, #696]	; (80017a4 <BME280_compensate_P_int64+0x2c8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	17da      	asrs	r2, r3, #31
 80014ee:	461c      	mov	r4, r3
 80014f0:	4615      	mov	r5, r2
 80014f2:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80014f6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80014fa:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80014fe:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001502:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001506:	fb03 f102 	mul.w	r1, r3, r2
 800150a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800150e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	18ca      	adds	r2, r1, r3
 8001518:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800151c:	fba3 8903 	umull	r8, r9, r3, r3
 8001520:	eb02 0309 	add.w	r3, r2, r9
 8001524:	4699      	mov	r9, r3
 8001526:	4ba0      	ldr	r3, [pc, #640]	; (80017a8 <BME280_compensate_P_int64+0x2cc>)
 8001528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152c:	b21b      	sxth	r3, r3
 800152e:	17da      	asrs	r2, r3, #31
 8001530:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001534:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001538:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800153c:	4603      	mov	r3, r0
 800153e:	fb03 f209 	mul.w	r2, r3, r9
 8001542:	460b      	mov	r3, r1
 8001544:	fb08 f303 	mul.w	r3, r8, r3
 8001548:	4413      	add	r3, r2
 800154a:	4602      	mov	r2, r0
 800154c:	fba8 2102 	umull	r2, r1, r8, r2
 8001550:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8001554:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001558:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800155c:	4413      	add	r3, r2
 800155e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001562:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001566:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800156a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 800156e:	4b8f      	ldr	r3, [pc, #572]	; (80017ac <BME280_compensate_P_int64+0x2d0>)
 8001570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001574:	b21b      	sxth	r3, r3
 8001576:	17da      	asrs	r2, r3, #31
 8001578:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800157c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001580:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001584:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001588:	462a      	mov	r2, r5
 800158a:	fb02 f203 	mul.w	r2, r2, r3
 800158e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001592:	4621      	mov	r1, r4
 8001594:	fb01 f303 	mul.w	r3, r1, r3
 8001598:	441a      	add	r2, r3
 800159a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800159e:	4621      	mov	r1, r4
 80015a0:	fba3 3101 	umull	r3, r1, r3, r1
 80015a4:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 80015a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80015ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80015b0:	18d3      	adds	r3, r2, r3
 80015b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015b6:	f04f 0000 	mov.w	r0, #0
 80015ba:	f04f 0100 	mov.w	r1, #0
 80015be:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80015c2:	462b      	mov	r3, r5
 80015c4:	0459      	lsls	r1, r3, #17
 80015c6:	4622      	mov	r2, r4
 80015c8:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80015cc:	4623      	mov	r3, r4
 80015ce:	0458      	lsls	r0, r3, #17
 80015d0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80015d4:	1814      	adds	r4, r2, r0
 80015d6:	643c      	str	r4, [r7, #64]	; 0x40
 80015d8:	414b      	adcs	r3, r1
 80015da:	647b      	str	r3, [r7, #68]	; 0x44
 80015dc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80015e0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 80015e4:	4b72      	ldr	r3, [pc, #456]	; (80017b0 <BME280_compensate_P_int64+0x2d4>)
 80015e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	17da      	asrs	r2, r3, #31
 80015ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80015f2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80015f6:	f04f 0000 	mov.w	r0, #0
 80015fa:	f04f 0100 	mov.w	r1, #0
 80015fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001602:	00d9      	lsls	r1, r3, #3
 8001604:	2000      	movs	r0, #0
 8001606:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800160a:	1814      	adds	r4, r2, r0
 800160c:	63bc      	str	r4, [r7, #56]	; 0x38
 800160e:	414b      	adcs	r3, r1
 8001610:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001612:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001616:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800161a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800161e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001622:	fb03 f102 	mul.w	r1, r3, r2
 8001626:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800162a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800162e:	fb02 f303 	mul.w	r3, r2, r3
 8001632:	18ca      	adds	r2, r1, r3
 8001634:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001638:	fba3 3103 	umull	r3, r1, r3, r3
 800163c:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8001640:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001648:	18d3      	adds	r3, r2, r3
 800164a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800164e:	4b59      	ldr	r3, [pc, #356]	; (80017b4 <BME280_compensate_P_int64+0x2d8>)
 8001650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001654:	b21b      	sxth	r3, r3
 8001656:	17da      	asrs	r2, r3, #31
 8001658:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800165c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001660:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8001664:	4622      	mov	r2, r4
 8001666:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800166a:	4641      	mov	r1, r8
 800166c:	fb01 f202 	mul.w	r2, r1, r2
 8001670:	464d      	mov	r5, r9
 8001672:	4618      	mov	r0, r3
 8001674:	4621      	mov	r1, r4
 8001676:	4603      	mov	r3, r0
 8001678:	fb03 f305 	mul.w	r3, r3, r5
 800167c:	4413      	add	r3, r2
 800167e:	4602      	mov	r2, r0
 8001680:	4641      	mov	r1, r8
 8001682:	fba2 2101 	umull	r2, r1, r2, r1
 8001686:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 800168a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800168e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001692:	4413      	add	r3, r2
 8001694:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001698:	f04f 0000 	mov.w	r0, #0
 800169c:	f04f 0100 	mov.w	r1, #0
 80016a0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80016a4:	4623      	mov	r3, r4
 80016a6:	0a18      	lsrs	r0, r3, #8
 80016a8:	462a      	mov	r2, r5
 80016aa:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80016ae:	462b      	mov	r3, r5
 80016b0:	1219      	asrs	r1, r3, #8
 80016b2:	4b41      	ldr	r3, [pc, #260]	; (80017b8 <BME280_compensate_P_int64+0x2dc>)
 80016b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	17da      	asrs	r2, r3, #31
 80016bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80016c0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80016c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016c8:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80016cc:	464a      	mov	r2, r9
 80016ce:	fb02 f203 	mul.w	r2, r2, r3
 80016d2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016d6:	4644      	mov	r4, r8
 80016d8:	fb04 f303 	mul.w	r3, r4, r3
 80016dc:	441a      	add	r2, r3
 80016de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016e2:	4644      	mov	r4, r8
 80016e4:	fba3 3404 	umull	r3, r4, r3, r4
 80016e8:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 80016ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80016f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80016f4:	18d3      	adds	r3, r2, r3
 80016f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001706:	464c      	mov	r4, r9
 8001708:	0323      	lsls	r3, r4, #12
 800170a:	46c4      	mov	ip, r8
 800170c:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001710:	4644      	mov	r4, r8
 8001712:	0322      	lsls	r2, r4, #12
 8001714:	1884      	adds	r4, r0, r2
 8001716:	633c      	str	r4, [r7, #48]	; 0x30
 8001718:	eb41 0303 	adc.w	r3, r1, r3
 800171c:	637b      	str	r3, [r7, #52]	; 0x34
 800171e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001722:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8001726:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800172a:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800172e:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001732:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001736:	4b21      	ldr	r3, [pc, #132]	; (80017bc <BME280_compensate_P_int64+0x2e0>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	b29b      	uxth	r3, r3
 800173c:	2200      	movs	r2, #0
 800173e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001742:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001746:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800174a:	4622      	mov	r2, r4
 800174c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001750:	4641      	mov	r1, r8
 8001752:	fb01 f202 	mul.w	r2, r1, r2
 8001756:	464d      	mov	r5, r9
 8001758:	4618      	mov	r0, r3
 800175a:	4621      	mov	r1, r4
 800175c:	4603      	mov	r3, r0
 800175e:	fb03 f305 	mul.w	r3, r3, r5
 8001762:	4413      	add	r3, r2
 8001764:	4602      	mov	r2, r0
 8001766:	4641      	mov	r1, r8
 8001768:	fba2 2101 	umull	r2, r1, r2, r1
 800176c:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8001770:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001774:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001778:	4413      	add	r3, r2
 800177a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800178a:	4629      	mov	r1, r5
 800178c:	104a      	asrs	r2, r1, #1
 800178e:	4629      	mov	r1, r5
 8001790:	17cb      	asrs	r3, r1, #31
 8001792:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 8001796:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800179a:	4313      	orrs	r3, r2
 800179c:	d110      	bne.n	80017c0 <BME280_compensate_P_int64+0x2e4>
	{
		return 0; // avoid exception caused by division by zero
 800179e:	2300      	movs	r3, #0
 80017a0:	e152      	b.n	8001a48 <BME280_compensate_P_int64+0x56c>
 80017a2:	bf00      	nop
 80017a4:	20000230 	.word	0x20000230
 80017a8:	20000220 	.word	0x20000220
 80017ac:	2000021e 	.word	0x2000021e
 80017b0:	2000021c 	.word	0x2000021c
 80017b4:	2000021a 	.word	0x2000021a
 80017b8:	20000218 	.word	0x20000218
 80017bc:	2000020e 	.word	0x2000020e
	}
	p = 1048576-adc_P;
 80017c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017c4:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80017c8:	17da      	asrs	r2, r3, #31
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80017cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017ce:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80017d2:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 80017d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017da:	105b      	asrs	r3, r3, #1
 80017dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80017e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017e4:	07db      	lsls	r3, r3, #31
 80017e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80017ea:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80017ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80017f2:	4604      	mov	r4, r0
 80017f4:	1aa4      	subs	r4, r4, r2
 80017f6:	67bc      	str	r4, [r7, #120]	; 0x78
 80017f8:	eb61 0303 	sbc.w	r3, r1, r3
 80017fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017fe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001802:	4622      	mov	r2, r4
 8001804:	462b      	mov	r3, r5
 8001806:	1891      	adds	r1, r2, r2
 8001808:	6239      	str	r1, [r7, #32]
 800180a:	415b      	adcs	r3, r3
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
 800180e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001812:	4621      	mov	r1, r4
 8001814:	1851      	adds	r1, r2, r1
 8001816:	61b9      	str	r1, [r7, #24]
 8001818:	4629      	mov	r1, r5
 800181a:	414b      	adcs	r3, r1
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800182a:	4649      	mov	r1, r9
 800182c:	018b      	lsls	r3, r1, #6
 800182e:	4641      	mov	r1, r8
 8001830:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001834:	4641      	mov	r1, r8
 8001836:	018a      	lsls	r2, r1, #6
 8001838:	4641      	mov	r1, r8
 800183a:	1889      	adds	r1, r1, r2
 800183c:	6139      	str	r1, [r7, #16]
 800183e:	4649      	mov	r1, r9
 8001840:	eb43 0101 	adc.w	r1, r3, r1
 8001844:	6179      	str	r1, [r7, #20]
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001852:	4649      	mov	r1, r9
 8001854:	008b      	lsls	r3, r1, #2
 8001856:	46c4      	mov	ip, r8
 8001858:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 800185c:	4641      	mov	r1, r8
 800185e:	008a      	lsls	r2, r1, #2
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	4603      	mov	r3, r0
 8001866:	4622      	mov	r2, r4
 8001868:	189b      	adds	r3, r3, r2
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	460b      	mov	r3, r1
 800186e:	462a      	mov	r2, r5
 8001870:	eb42 0303 	adc.w	r3, r2, r3
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001882:	4649      	mov	r1, r9
 8001884:	008b      	lsls	r3, r1, #2
 8001886:	46c4      	mov	ip, r8
 8001888:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 800188c:	4641      	mov	r1, r8
 800188e:	008a      	lsls	r2, r1, #2
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	4603      	mov	r3, r0
 8001896:	4622      	mov	r2, r4
 8001898:	189b      	adds	r3, r3, r2
 800189a:	673b      	str	r3, [r7, #112]	; 0x70
 800189c:	462b      	mov	r3, r5
 800189e:	460a      	mov	r2, r1
 80018a0:	eb42 0303 	adc.w	r3, r2, r3
 80018a4:	677b      	str	r3, [r7, #116]	; 0x74
 80018a6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80018aa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80018ae:	f7ff f9c3 	bl	8000c38 <__aeabi_ldivmod>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80018ba:	4b66      	ldr	r3, [pc, #408]	; (8001a54 <BME280_compensate_P_int64+0x578>)
 80018bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c0:	b21b      	sxth	r3, r3
 80018c2:	17da      	asrs	r2, r3, #31
 80018c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80018c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80018c8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80018cc:	f04f 0000 	mov.w	r0, #0
 80018d0:	f04f 0100 	mov.w	r1, #0
 80018d4:	0b50      	lsrs	r0, r2, #13
 80018d6:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018da:	1359      	asrs	r1, r3, #13
 80018dc:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80018e0:	462b      	mov	r3, r5
 80018e2:	fb00 f203 	mul.w	r2, r0, r3
 80018e6:	4623      	mov	r3, r4
 80018e8:	fb03 f301 	mul.w	r3, r3, r1
 80018ec:	4413      	add	r3, r2
 80018ee:	4622      	mov	r2, r4
 80018f0:	fba2 2100 	umull	r2, r1, r2, r0
 80018f4:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80018f8:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80018fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001900:	4413      	add	r3, r2
 8001902:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001906:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800190a:	f04f 0000 	mov.w	r0, #0
 800190e:	f04f 0100 	mov.w	r1, #0
 8001912:	0b50      	lsrs	r0, r2, #13
 8001914:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001918:	1359      	asrs	r1, r3, #13
 800191a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800191e:	462b      	mov	r3, r5
 8001920:	fb00 f203 	mul.w	r2, r0, r3
 8001924:	4623      	mov	r3, r4
 8001926:	fb03 f301 	mul.w	r3, r3, r1
 800192a:	4413      	add	r3, r2
 800192c:	4622      	mov	r2, r4
 800192e:	fba2 2100 	umull	r2, r1, r2, r0
 8001932:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8001936:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800193a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800193e:	4413      	add	r3, r2
 8001940:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001950:	4621      	mov	r1, r4
 8001952:	0e4a      	lsrs	r2, r1, #25
 8001954:	4620      	mov	r0, r4
 8001956:	4629      	mov	r1, r5
 8001958:	460c      	mov	r4, r1
 800195a:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 800195e:	164b      	asrs	r3, r1, #25
 8001960:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001964:	4b3c      	ldr	r3, [pc, #240]	; (8001a58 <BME280_compensate_P_int64+0x57c>)
 8001966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196a:	b21b      	sxth	r3, r3
 800196c:	17da      	asrs	r2, r3, #31
 800196e:	663b      	str	r3, [r7, #96]	; 0x60
 8001970:	667a      	str	r2, [r7, #100]	; 0x64
 8001972:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001976:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800197a:	462a      	mov	r2, r5
 800197c:	fb02 f203 	mul.w	r2, r2, r3
 8001980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001984:	4621      	mov	r1, r4
 8001986:	fb01 f303 	mul.w	r3, r1, r3
 800198a:	4413      	add	r3, r2
 800198c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001990:	4621      	mov	r1, r4
 8001992:	fba2 2101 	umull	r2, r1, r2, r1
 8001996:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 800199a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800199e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80019a2:	4413      	add	r3, r2
 80019a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80019b4:	4621      	mov	r1, r4
 80019b6:	0cca      	lsrs	r2, r1, #19
 80019b8:	4620      	mov	r0, r4
 80019ba:	4629      	mov	r1, r5
 80019bc:	460c      	mov	r4, r1
 80019be:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 80019c2:	14cb      	asrs	r3, r1, #19
 80019c4:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 80019c8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80019cc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80019d0:	1884      	adds	r4, r0, r2
 80019d2:	65bc      	str	r4, [r7, #88]	; 0x58
 80019d4:	eb41 0303 	adc.w	r3, r1, r3
 80019d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019da:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80019de:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80019e2:	4621      	mov	r1, r4
 80019e4:	1889      	adds	r1, r1, r2
 80019e6:	6539      	str	r1, [r7, #80]	; 0x50
 80019e8:	4629      	mov	r1, r5
 80019ea:	eb43 0101 	adc.w	r1, r3, r1
 80019ee:	6579      	str	r1, [r7, #84]	; 0x54
 80019f0:	f04f 0000 	mov.w	r0, #0
 80019f4:	f04f 0100 	mov.w	r1, #0
 80019f8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80019fc:	4623      	mov	r3, r4
 80019fe:	0a18      	lsrs	r0, r3, #8
 8001a00:	462a      	mov	r2, r5
 8001a02:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001a06:	462b      	mov	r3, r5
 8001a08:	1219      	asrs	r1, r3, #8
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <BME280_compensate_P_int64+0x580>)
 8001a0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a10:	b21b      	sxth	r3, r3
 8001a12:	17da      	asrs	r2, r3, #31
 8001a14:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a16:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001a24:	464c      	mov	r4, r9
 8001a26:	0123      	lsls	r3, r4, #4
 8001a28:	46c4      	mov	ip, r8
 8001a2a:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001a2e:	4644      	mov	r4, r8
 8001a30:	0122      	lsls	r2, r4, #4
 8001a32:	1884      	adds	r4, r0, r2
 8001a34:	603c      	str	r4, [r7, #0]
 8001a36:	eb41 0303 	adc.w	r3, r1, r3
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a40:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001a44:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a54:	20000226 	.word	0x20000226
 8001a58:	20000224 	.word	0x20000224
 8001a5c:	20000222 	.word	0x20000222

08001a60 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001a68:	4b2c      	ldr	r3, [pc, #176]	; (8001b1c <bme280_compensate_H_int32+0xbc>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001a70:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	039a      	lsls	r2, r3, #14
 8001a76:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <bme280_compensate_H_int32+0xc0>)
 8001a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7c:	051b      	lsls	r3, r3, #20
 8001a7e:	1ad2      	subs	r2, r2, r3
 8001a80:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <bme280_compensate_H_int32+0xc4>)
 8001a82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a86:	4619      	mov	r1, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	fb01 f303 	mul.w	r3, r1, r3
 8001a8e:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a90:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001a94:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a96:	4a24      	ldr	r2, [pc, #144]	; (8001b28 <bme280_compensate_H_int32+0xc8>)
 8001a98:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a9c:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001aa4:	1292      	asrs	r2, r2, #10
 8001aa6:	4921      	ldr	r1, [pc, #132]	; (8001b2c <bme280_compensate_H_int32+0xcc>)
 8001aa8:	8809      	ldrh	r1, [r1, #0]
 8001aaa:	4608      	mov	r0, r1
 8001aac:	68f9      	ldr	r1, [r7, #12]
 8001aae:	fb00 f101 	mul.w	r1, r0, r1
 8001ab2:	12c9      	asrs	r1, r1, #11
 8001ab4:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001ab8:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001abc:	1292      	asrs	r2, r2, #10
 8001abe:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001ac2:	491b      	ldr	r1, [pc, #108]	; (8001b30 <bme280_compensate_H_int32+0xd0>)
 8001ac4:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001ac8:	fb01 f202 	mul.w	r2, r1, r2
 8001acc:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001ad0:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001ad2:	fb02 f303 	mul.w	r3, r2, r3
 8001ad6:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	13db      	asrs	r3, r3, #15
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	13d2      	asrs	r2, r2, #15
 8001ae0:	fb02 f303 	mul.w	r3, r2, r3
 8001ae4:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001ae6:	4a13      	ldr	r2, [pc, #76]	; (8001b34 <bme280_compensate_H_int32+0xd4>)
 8001ae8:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001aea:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001aee:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001afc:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001b04:	bfa8      	it	ge
 8001b06:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001b0a:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	131b      	asrs	r3, r3, #12
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000230 	.word	0x20000230
 8001b20:	2000022a 	.word	0x2000022a
 8001b24:	2000022c 	.word	0x2000022c
 8001b28:	2000022e 	.word	0x2000022e
 8001b2c:	20000212 	.word	0x20000212
 8001b30:	20000228 	.word	0x20000228
 8001b34:	20000210 	.word	0x20000210

08001b38 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001b3c:	f7ff fc3e 	bl	80013bc <BMEReadRaw>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d163      	bne.n	8001c0e <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001b46:	4b39      	ldr	r3, [pc, #228]	; (8001c2c <BME280_Measure+0xf4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b4e:	d104      	bne.n	8001b5a <BME280_Measure+0x22>
 8001b50:	4b37      	ldr	r3, [pc, #220]	; (8001c30 <BME280_Measure+0xf8>)
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	e016      	b.n	8001b88 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001b5a:	4b34      	ldr	r3, [pc, #208]	; (8001c2c <BME280_Measure+0xf4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fc7c 	bl	800145c <BME280_compensate_T_int32>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fcb4 	bl	80004d4 <__aeabi_i2d>
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <BME280_Measure+0xfc>)
 8001b72:	f7fe fe43 	bl	80007fc <__aeabi_ddiv>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7ff f80b 	bl	8000b98 <__aeabi_d2f>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4a2a      	ldr	r2, [pc, #168]	; (8001c30 <BME280_Measure+0xf8>)
 8001b86:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001b88:	4b2b      	ldr	r3, [pc, #172]	; (8001c38 <BME280_Measure+0x100>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b90:	d104      	bne.n	8001b9c <BME280_Measure+0x64>
 8001b92:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <BME280_Measure+0x104>)
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	e016      	b.n	8001bca <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001b9c:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <BME280_Measure+0x100>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fc9b 	bl	80014dc <BME280_compensate_P_int64>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fc83 	bl	80004b4 <__aeabi_ui2d>
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <BME280_Measure+0x108>)
 8001bb4:	f7fe fe22 	bl	80007fc <__aeabi_ddiv>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f7fe ffea 	bl	8000b98 <__aeabi_d2f>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4a1d      	ldr	r2, [pc, #116]	; (8001c3c <BME280_Measure+0x104>)
 8001bc8:	6013      	str	r3, [r2, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001bca:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <BME280_Measure+0x10c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bd2:	d104      	bne.n	8001bde <BME280_Measure+0xa6>
 8001bd4:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <BME280_Measure+0x110>)
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 1;
	}
}
 8001bdc:	e023      	b.n	8001c26 <BME280_Measure+0xee>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <BME280_Measure+0x10c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff ff3c 	bl	8001a60 <bme280_compensate_H_int32>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fc62 	bl	80004b4 <__aeabi_ui2d>
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <BME280_Measure+0x114>)
 8001bf6:	f7fe fe01 	bl	80007fc <__aeabi_ddiv>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4619      	mov	r1, r3
 8001c02:	f7fe ffc9 	bl	8000b98 <__aeabi_d2f>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4a0f      	ldr	r2, [pc, #60]	; (8001c48 <BME280_Measure+0x110>)
 8001c0a:	6013      	str	r3, [r2, #0]
}
 8001c0c:	e00b      	b.n	8001c26 <BME280_Measure+0xee>
		Temperature = Pressure = Humidity = 1;
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <BME280_Measure+0x110>)
 8001c10:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <BME280_Measure+0x110>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a08      	ldr	r2, [pc, #32]	; (8001c3c <BME280_Measure+0x104>)
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <BME280_Measure+0x104>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a03      	ldr	r2, [pc, #12]	; (8001c30 <BME280_Measure+0xf8>)
 8001c24:	6013      	str	r3, [r2, #0]
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000200 	.word	0x20000200
 8001c30:	20000428 	.word	0x20000428
 8001c34:	40590000 	.word	0x40590000
 8001c38:	20000204 	.word	0x20000204
 8001c3c:	2000042c 	.word	0x2000042c
 8001c40:	40700000 	.word	0x40700000
 8001c44:	20000208 	.word	0x20000208
 8001c48:	20000430 	.word	0x20000430
 8001c4c:	40900000 	.word	0x40900000

08001c50 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4013      	ands	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c74:	68fb      	ldr	r3, [r7, #12]
}
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c86:	f000 fcf7 	bl	8002678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c8a:	f000 f835 	bl	8001cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c8e:	f000 f9c9 	bl	8002024 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c92:	f000 f883 	bl	8001d9c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001c96:	f000 f93b 	bl	8001f10 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001c9a:	f000 f977 	bl	8001f8c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001c9e:	f000 f8bb 	bl	8001e18 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001ca2:	f000 f8f7 	bl	8001e94 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	9301      	str	r3, [sp, #4]
 8001caa:	2300      	movs	r3, #0
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	2303      	movs	r3, #3
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	2105      	movs	r1, #5
 8001cb4:	2002      	movs	r0, #2
 8001cb6:	f7ff faab 	bl	8001210 <BME280_Config>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BME280_Measure();
 8001cba:	f7ff ff3d 	bl	8001b38 <BME280_Measure>
	  temp=Temperature;
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <main+0x60>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a08      	ldr	r2, [pc, #32]	; (8001ce4 <main+0x64>)
 8001cc4:	6013      	str	r3, [r2, #0]
	  hum=Pressure;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <main+0x68>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a08      	ldr	r2, [pc, #32]	; (8001cec <main+0x6c>)
 8001ccc:	6013      	str	r3, [r2, #0]
	  press=Humidity;
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <main+0x70>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <main+0x74>)
 8001cd4:	6013      	str	r3, [r2, #0]
	  HAL_Delay (500);
 8001cd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cda:	f000 fd43 	bl	8002764 <HAL_Delay>
	  BME280_Measure();
 8001cde:	e7ec      	b.n	8001cba <main+0x3a>
 8001ce0:	20000428 	.word	0x20000428
 8001ce4:	20000434 	.word	0x20000434
 8001ce8:	2000042c 	.word	0x2000042c
 8001cec:	20000438 	.word	0x20000438
 8001cf0:	20000430 	.word	0x20000430
 8001cf4:	2000043c 	.word	0x2000043c

08001cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b09a      	sub	sp, #104	; 0x68
 8001cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cfe:	f107 0320 	add.w	r3, r7, #32
 8001d02:	2248      	movs	r2, #72	; 0x48
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f003 ff18 	bl	8005b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d0c:	f107 0308 	add.w	r3, r7, #8
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
 8001d1c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d1e:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <SystemClock_Config+0xa0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d26:	4a1c      	ldr	r2, [pc, #112]	; (8001d98 <SystemClock_Config+0xa0>)
 8001d28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <SystemClock_Config+0xa0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001d3a:	2320      	movs	r3, #32
 8001d3c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001d42:	2300      	movs	r3, #0
 8001d44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001d46:	2360      	movs	r3, #96	; 0x60
 8001d48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d4e:	f107 0320 	add.w	r3, r7, #32
 8001d52:	4618      	mov	r0, r3
 8001d54:	f002 f818 	bl	8003d88 <HAL_RCC_OscConfig>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001d5e:	f000 f9c1 	bl	80020e4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001d62:	234f      	movs	r3, #79	; 0x4f
 8001d64:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d7a:	f107 0308 	add.w	r3, r7, #8
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f002 fb83 	bl	800448c <HAL_RCC_ClockConfig>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d8c:	f000 f9aa 	bl	80020e4 <Error_Handler>
  }
}
 8001d90:	bf00      	nop
 8001d92:	3768      	adds	r7, #104	; 0x68
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	58000400 	.word	0x58000400

08001d9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001da0:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <MX_I2C1_Init+0x74>)
 8001da2:	4a1c      	ldr	r2, [pc, #112]	; (8001e14 <MX_I2C1_Init+0x78>)
 8001da4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8001da6:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <MX_I2C1_Init+0x74>)
 8001da8:	f640 6214 	movw	r2, #3604	; 0xe14
 8001dac:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001dae:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <MX_I2C1_Init+0x74>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001db4:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <MX_I2C1_Init+0x74>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dba:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <MX_I2C1_Init+0x74>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <MX_I2C1_Init+0x74>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001dc6:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <MX_I2C1_Init+0x74>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dcc:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <MX_I2C1_Init+0x74>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <MX_I2C1_Init+0x74>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dd8:	480d      	ldr	r0, [pc, #52]	; (8001e10 <MX_I2C1_Init+0x74>)
 8001dda:	f000 ff40 	bl	8002c5e <HAL_I2C_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001de4:	f000 f97e 	bl	80020e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001de8:	2100      	movs	r1, #0
 8001dea:	4809      	ldr	r0, [pc, #36]	; (8001e10 <MX_I2C1_Init+0x74>)
 8001dec:	f001 fc8c 	bl	8003708 <HAL_I2CEx_ConfigAnalogFilter>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001df6:	f000 f975 	bl	80020e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4804      	ldr	r0, [pc, #16]	; (8001e10 <MX_I2C1_Init+0x74>)
 8001dfe:	f001 fccd 	bl	800379c <HAL_I2CEx_ConfigDigitalFilter>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001e08:	f000 f96c 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000234 	.word	0x20000234
 8001e14:	40005400 	.word	0x40005400

08001e18 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e1c:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <MX_I2C2_Init+0x74>)
 8001e1e:	4a1c      	ldr	r2, [pc, #112]	; (8001e90 <MX_I2C2_Init+0x78>)
 8001e20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8001e22:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <MX_I2C2_Init+0x74>)
 8001e24:	f640 6214 	movw	r2, #3604	; 0xe14
 8001e28:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001e2a:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <MX_I2C2_Init+0x74>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e30:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <MX_I2C2_Init+0x74>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e36:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <MX_I2C2_Init+0x74>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001e3c:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <MX_I2C2_Init+0x74>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <MX_I2C2_Init+0x74>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e48:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <MX_I2C2_Init+0x74>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <MX_I2C2_Init+0x74>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e54:	480d      	ldr	r0, [pc, #52]	; (8001e8c <MX_I2C2_Init+0x74>)
 8001e56:	f000 ff02 	bl	8002c5e <HAL_I2C_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e60:	f000 f940 	bl	80020e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e64:	2100      	movs	r1, #0
 8001e66:	4809      	ldr	r0, [pc, #36]	; (8001e8c <MX_I2C2_Init+0x74>)
 8001e68:	f001 fc4e 	bl	8003708 <HAL_I2CEx_ConfigAnalogFilter>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001e72:	f000 f937 	bl	80020e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001e76:	2100      	movs	r1, #0
 8001e78:	4804      	ldr	r0, [pc, #16]	; (8001e8c <MX_I2C2_Init+0x74>)
 8001e7a:	f001 fc8f 	bl	800379c <HAL_I2CEx_ConfigDigitalFilter>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001e84:	f000 f92e 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000288 	.word	0x20000288
 8001e90:	40005800 	.word	0x40005800

08001e94 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001e98:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <MX_I2C3_Init+0x74>)
 8001e9a:	4a1c      	ldr	r2, [pc, #112]	; (8001f0c <MX_I2C3_Init+0x78>)
 8001e9c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <MX_I2C3_Init+0x74>)
 8001ea0:	f640 6214 	movw	r2, #3604	; 0xe14
 8001ea4:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <MX_I2C3_Init+0x74>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001eac:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <MX_I2C3_Init+0x74>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001eb2:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <MX_I2C3_Init+0x74>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001eb8:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <MX_I2C3_Init+0x74>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ebe:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <MX_I2C3_Init+0x74>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ec4:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <MX_I2C3_Init+0x74>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <MX_I2C3_Init+0x74>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001ed0:	480d      	ldr	r0, [pc, #52]	; (8001f08 <MX_I2C3_Init+0x74>)
 8001ed2:	f000 fec4 	bl	8002c5e <HAL_I2C_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001edc:	f000 f902 	bl	80020e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4809      	ldr	r0, [pc, #36]	; (8001f08 <MX_I2C3_Init+0x74>)
 8001ee4:	f001 fc10 	bl	8003708 <HAL_I2CEx_ConfigAnalogFilter>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001eee:	f000 f8f9 	bl	80020e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4804      	ldr	r0, [pc, #16]	; (8001f08 <MX_I2C3_Init+0x74>)
 8001ef6:	f001 fc51 	bl	800379c <HAL_I2CEx_ConfigDigitalFilter>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001f00:	f000 f8f0 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	200002dc 	.word	0x200002dc
 8001f0c:	40005c00 	.word	0x40005c00

08001f10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f14:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f16:	4a1c      	ldr	r2, [pc, #112]	; (8001f88 <MX_SPI1_Init+0x78>)
 8001f18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f22:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001f28:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f2a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001f2e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f42:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f56:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f5e:	2207      	movs	r2, #7
 8001f60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f62:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f6a:	2208      	movs	r2, #8
 8001f6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f6e:	4805      	ldr	r0, [pc, #20]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f70:	f002 ff48 	bl	8004e04 <HAL_SPI_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001f7a:	f000 f8b3 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000330 	.word	0x20000330
 8001f88:	40013000 	.word	0x40013000

08001f8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f90:	4b22      	ldr	r3, [pc, #136]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001f92:	4a23      	ldr	r2, [pc, #140]	; (8002020 <MX_USART1_UART_Init+0x94>)
 8001f94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f96:	4b21      	ldr	r3, [pc, #132]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001f98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9e:	4b1f      	ldr	r3, [pc, #124]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001faa:	4b1c      	ldr	r3, [pc, #112]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fb0:	4b1a      	ldr	r3, [pc, #104]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb6:	4b19      	ldr	r3, [pc, #100]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fbc:	4b17      	ldr	r3, [pc, #92]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fc2:	4b16      	ldr	r3, [pc, #88]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fce:	4b13      	ldr	r3, [pc, #76]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fd4:	4811      	ldr	r0, [pc, #68]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001fd6:	f003 f80a 	bl	8004fee <HAL_UART_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001fe0:	f000 f880 	bl	80020e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	480d      	ldr	r0, [pc, #52]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001fe8:	f003 fcb5 	bl	8005956 <HAL_UARTEx_SetTxFifoThreshold>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001ff2:	f000 f877 	bl	80020e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4808      	ldr	r0, [pc, #32]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001ffa:	f003 fcea 	bl	80059d2 <HAL_UARTEx_SetRxFifoThreshold>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002004:	f000 f86e 	bl	80020e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002008:	4804      	ldr	r0, [pc, #16]	; (800201c <MX_USART1_UART_Init+0x90>)
 800200a:	f003 fc6c 	bl	80058e6 <HAL_UARTEx_DisableFifoMode>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002014:	f000 f866 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000394 	.word	0x20000394
 8002020:	40013800 	.word	0x40013800

08002024 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202a:	1d3b      	adds	r3, r7, #4
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002038:	2002      	movs	r0, #2
 800203a:	f7ff fe09 	bl	8001c50 <LL_AHB2_GRP1_EnableClock>
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	2001      	movs	r0, #1
 8002040:	f7ff fe06 	bl	8001c50 <LL_AHB2_GRP1_EnableClock>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002044:	2200      	movs	r2, #0
 8002046:	2120      	movs	r1, #32
 8002048:	4825      	ldr	r0, [pc, #148]	; (80020e0 <MX_GPIO_Init+0xbc>)
 800204a:	f000 fdf1 	bl	8002c30 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800204e:	2200      	movs	r2, #0
 8002050:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002054:	4822      	ldr	r0, [pc, #136]	; (80020e0 <MX_GPIO_Init+0xbc>)
 8002056:	f000 fdeb 	bl	8002c30 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800205a:	2200      	movs	r2, #0
 800205c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002064:	f000 fde4 	bl	8002c30 <HAL_GPIO_WritePin>


	  /*Configure GPIO pin : PB5 */
	  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002068:	2320      	movs	r3, #32
 800206a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206c:	2301      	movs	r3, #1
 800206e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	4619      	mov	r1, r3
 800207c:	4818      	ldr	r0, [pc, #96]	; (80020e0 <MX_GPIO_Init+0xbc>)
 800207e:	f000 fc77 	bl	8002970 <HAL_GPIO_Init>



	  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002082:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002086:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002088:	2301      	movs	r3, #1
 800208a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	4619      	mov	r1, r3
 8002098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800209c:	f000 fc68 	bl	8002970 <HAL_GPIO_Init>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80020a0:	2201      	movs	r2, #1
 80020a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020aa:	f000 fdc1 	bl	8002c30 <HAL_GPIO_WritePin>
	 // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
	  /* Initialize GPIOB Pin 10 */

	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020b2:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b4:	2301      	movs	r3, #1
 80020b6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	4619      	mov	r1, r3
 80020c4:	4806      	ldr	r0, [pc, #24]	; (80020e0 <MX_GPIO_Init+0xbc>)
 80020c6:	f000 fc53 	bl	8002970 <HAL_GPIO_Init>

	 	  	 	 /* Set PB10 to high */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80020ca:	2201      	movs	r2, #1
 80020cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020d0:	4803      	ldr	r0, [pc, #12]	; (80020e0 <MX_GPIO_Init+0xbc>)
 80020d2:	f000 fdad 	bl	8002c30 <HAL_GPIO_WritePin>

}
 80020d6:	bf00      	nop
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	48000400 	.word	0x48000400

080020e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020e8:	b672      	cpsid	i
}
 80020ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020ec:	e7fe      	b.n	80020ec <Error_Handler+0x8>

080020ee <LL_AHB2_GRP1_EnableClock>:
{
 80020ee:	b480      	push	{r7}
 80020f0:	b085      	sub	sp, #20
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4313      	orrs	r3, r2
 8002104:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4013      	ands	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002112:	68fb      	ldr	r3, [r7, #12]
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr

0800211e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800211e:	b480      	push	{r7}
 8002120:	b085      	sub	sp, #20
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800212c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4313      	orrs	r3, r2
 8002134:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4013      	ands	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002142:	68fb      	ldr	r3, [r7, #12]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr

0800214e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800214e:	b480      	push	{r7}
 8002150:	b085      	sub	sp, #20
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800215c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4313      	orrs	r3, r2
 8002164:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4013      	ands	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002172:	68fb      	ldr	r3, [r7, #12]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr

0800217e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002182:	bf00      	nop
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
	...

0800218c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b096      	sub	sp, #88	; 0x58
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021a4:	f107 030c 	add.w	r3, r7, #12
 80021a8:	2238      	movs	r2, #56	; 0x38
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f003 fcc5 	bl	8005b3c <memset>
  if(hi2c->Instance==I2C1)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a4f      	ldr	r2, [pc, #316]	; (80022f4 <HAL_I2C_MspInit+0x168>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d127      	bne.n	800220c <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80021bc:	2340      	movs	r3, #64	; 0x40
 80021be:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80021c0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80021c4:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021c6:	f107 030c 	add.w	r3, r7, #12
 80021ca:	4618      	mov	r0, r3
 80021cc:	f002 fd00 	bl	8004bd0 <HAL_RCCEx_PeriphCLKConfig>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80021d6:	f7ff ff85 	bl	80020e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021da:	2002      	movs	r0, #2
 80021dc:	f7ff ff87 	bl	80020ee <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80021e0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80021e4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021e6:	2312      	movs	r3, #18
 80021e8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021f2:	2304      	movs	r3, #4
 80021f4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021fa:	4619      	mov	r1, r3
 80021fc:	483e      	ldr	r0, [pc, #248]	; (80022f8 <HAL_I2C_MspInit+0x16c>)
 80021fe:	f000 fbb7 	bl	8002970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002202:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002206:	f7ff ff8a 	bl	800211e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800220a:	e06e      	b.n	80022ea <HAL_I2C_MspInit+0x15e>
  else if(hi2c->Instance==I2C2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a3a      	ldr	r2, [pc, #232]	; (80022fc <HAL_I2C_MspInit+0x170>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d13c      	bne.n	8002290 <HAL_I2C_MspInit+0x104>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800221a:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002220:	f107 030c 	add.w	r3, r7, #12
 8002224:	4618      	mov	r0, r3
 8002226:	f002 fcd3 	bl	8004bd0 <HAL_RCCEx_PeriphCLKConfig>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 8002230:	f7ff ff58 	bl	80020e4 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002234:	2001      	movs	r0, #1
 8002236:	f7ff ff5a 	bl	80020ee <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800223a:	2002      	movs	r0, #2
 800223c:	f7ff ff57 	bl	80020ee <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002240:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002244:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002246:	2312      	movs	r3, #18
 8002248:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224e:	2300      	movs	r3, #0
 8002250:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002252:	2304      	movs	r3, #4
 8002254:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002256:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800225a:	4619      	mov	r1, r3
 800225c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002260:	f000 fb86 	bl	8002970 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002264:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002268:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800226a:	2312      	movs	r3, #18
 800226c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002276:	2304      	movs	r3, #4
 8002278:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800227e:	4619      	mov	r1, r3
 8002280:	481d      	ldr	r0, [pc, #116]	; (80022f8 <HAL_I2C_MspInit+0x16c>)
 8002282:	f000 fb75 	bl	8002970 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002286:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800228a:	f7ff ff48 	bl	800211e <LL_APB1_GRP1_EnableClock>
}
 800228e:	e02c      	b.n	80022ea <HAL_I2C_MspInit+0x15e>
  else if(hi2c->Instance==I2C3)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a1a      	ldr	r2, [pc, #104]	; (8002300 <HAL_I2C_MspInit+0x174>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d127      	bne.n	80022ea <HAL_I2C_MspInit+0x15e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800229a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800229e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80022a0:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022a6:	f107 030c 	add.w	r3, r7, #12
 80022aa:	4618      	mov	r0, r3
 80022ac:	f002 fc90 	bl	8004bd0 <HAL_RCCEx_PeriphCLKConfig>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_I2C_MspInit+0x12e>
      Error_Handler();
 80022b6:	f7ff ff15 	bl	80020e4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ba:	2002      	movs	r0, #2
 80022bc:	f7ff ff17 	bl	80020ee <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_13;
 80022c0:	f242 0310 	movw	r3, #8208	; 0x2010
 80022c4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022c6:	2312      	movs	r3, #18
 80022c8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80022d2:	2304      	movs	r3, #4
 80022d4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022da:	4619      	mov	r1, r3
 80022dc:	4806      	ldr	r0, [pc, #24]	; (80022f8 <HAL_I2C_MspInit+0x16c>)
 80022de:	f000 fb47 	bl	8002970 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80022e2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80022e6:	f7ff ff1a 	bl	800211e <LL_APB1_GRP1_EnableClock>
}
 80022ea:	bf00      	nop
 80022ec:	3758      	adds	r7, #88	; 0x58
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40005400 	.word	0x40005400
 80022f8:	48000400 	.word	0x48000400
 80022fc:	40005800 	.word	0x40005800
 8002300:	40005c00 	.word	0x40005c00

08002304 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 030c 	add.w	r3, r7, #12
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a19      	ldr	r2, [pc, #100]	; (8002388 <HAL_SPI_MspInit+0x84>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d12b      	bne.n	800237e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002326:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800232a:	f7ff ff10 	bl	800214e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232e:	2001      	movs	r0, #1
 8002330:	f7ff fedd 	bl	80020ee <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002334:	2002      	movs	r0, #2
 8002336:	f7ff feda 	bl	80020ee <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA12     ------> SPI1_MOSI
    PA11     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800233a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800233e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002340:	2302      	movs	r3, #2
 8002342:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002348:	2300      	movs	r3, #0
 800234a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800234c:	2305      	movs	r3, #5
 800234e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	4619      	mov	r1, r3
 8002356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800235a:	f000 fb09 	bl	8002970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800235e:	2308      	movs	r3, #8
 8002360:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2300      	movs	r3, #0
 800236c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800236e:	2305      	movs	r3, #5
 8002370:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002372:	f107 030c 	add.w	r3, r7, #12
 8002376:	4619      	mov	r1, r3
 8002378:	4804      	ldr	r0, [pc, #16]	; (800238c <HAL_SPI_MspInit+0x88>)
 800237a:	f000 faf9 	bl	8002970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800237e:	bf00      	nop
 8002380:	3720      	adds	r7, #32
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40013000 	.word	0x40013000
 800238c:	48000400 	.word	0x48000400

08002390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b096      	sub	sp, #88	; 0x58
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023a8:	f107 030c 	add.w	r3, r7, #12
 80023ac:	2238      	movs	r2, #56	; 0x38
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f003 fbc3 	bl	8005b3c <memset>
  if(huart->Instance==USART1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a21      	ldr	r2, [pc, #132]	; (8002440 <HAL_UART_MspInit+0xb0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d13a      	bne.n	8002436 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023c0:	2301      	movs	r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023c4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80023c8:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ca:	f107 030c 	add.w	r3, r7, #12
 80023ce:	4618      	mov	r0, r3
 80023d0:	f002 fbfe 	bl	8004bd0 <HAL_RCCEx_PeriphCLKConfig>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023da:	f7ff fe83 	bl	80020e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023de:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80023e2:	f7ff feb4 	bl	800214e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e6:	2001      	movs	r0, #1
 80023e8:	f7ff fe81 	bl	80020ee <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ec:	2002      	movs	r0, #2
 80023ee:	f7ff fe7e 	bl	80020ee <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023f6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f8:	2302      	movs	r3, #2
 80023fa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002400:	2300      	movs	r3, #0
 8002402:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002404:	2307      	movs	r3, #7
 8002406:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002408:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800240c:	4619      	mov	r1, r3
 800240e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002412:	f000 faad 	bl	8002970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002416:	2340      	movs	r3, #64	; 0x40
 8002418:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	2300      	movs	r3, #0
 8002424:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002426:	2307      	movs	r3, #7
 8002428:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800242e:	4619      	mov	r1, r3
 8002430:	4804      	ldr	r0, [pc, #16]	; (8002444 <HAL_UART_MspInit+0xb4>)
 8002432:	f000 fa9d 	bl	8002970 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002436:	bf00      	nop
 8002438:	3758      	adds	r7, #88	; 0x58
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40013800 	.word	0x40013800
 8002444:	48000400 	.word	0x48000400

08002448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800244c:	e7fe      	b.n	800244c <NMI_Handler+0x4>

0800244e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002452:	e7fe      	b.n	8002452 <HardFault_Handler+0x4>

08002454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002458:	e7fe      	b.n	8002458 <MemManage_Handler+0x4>

0800245a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800245e:	e7fe      	b.n	800245e <BusFault_Handler+0x4>

08002460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002464:	e7fe      	b.n	8002464 <UsageFault_Handler+0x4>

08002466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800248e:	f000 f94d 	bl	800272c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}

08002496 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0
  return 1;
 800249a:	2301      	movs	r3, #1
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <_kill>:

int _kill(int pid, int sig)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024ae:	f003 fb1b 	bl	8005ae8 <__errno>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2216      	movs	r2, #22
 80024b6:	601a      	str	r2, [r3, #0]
  return -1;
 80024b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <_exit>:

void _exit (int status)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024cc:	f04f 31ff 	mov.w	r1, #4294967295
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff ffe7 	bl	80024a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024d6:	e7fe      	b.n	80024d6 <_exit+0x12>

080024d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	e00a      	b.n	8002500 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024ea:	f3af 8000 	nop.w
 80024ee:	4601      	mov	r1, r0
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	60ba      	str	r2, [r7, #8]
 80024f6:	b2ca      	uxtb	r2, r1
 80024f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	3301      	adds	r3, #1
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	429a      	cmp	r2, r3
 8002506:	dbf0      	blt.n	80024ea <_read+0x12>
  }

  return len;
 8002508:	687b      	ldr	r3, [r7, #4]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b086      	sub	sp, #24
 8002516:	af00      	add	r7, sp, #0
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	e009      	b.n	8002538 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	60ba      	str	r2, [r7, #8]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	3301      	adds	r3, #1
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	429a      	cmp	r2, r3
 800253e:	dbf1      	blt.n	8002524 <_write+0x12>
  }
  return len;
 8002540:	687b      	ldr	r3, [r7, #4]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <_close>:

int _close(int file)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002552:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr

08002560 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002570:	605a      	str	r2, [r3, #4]
  return 0;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr

0800257e <_isatty>:

int _isatty(int file)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002586:	2301      	movs	r3, #1
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr

08002592 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002592:	b480      	push	{r7}
 8002594:	b085      	sub	sp, #20
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr
	...

080025ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025b4:	4a14      	ldr	r2, [pc, #80]	; (8002608 <_sbrk+0x5c>)
 80025b6:	4b15      	ldr	r3, [pc, #84]	; (800260c <_sbrk+0x60>)
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025c0:	4b13      	ldr	r3, [pc, #76]	; (8002610 <_sbrk+0x64>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d102      	bne.n	80025ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <_sbrk+0x64>)
 80025ca:	4a12      	ldr	r2, [pc, #72]	; (8002614 <_sbrk+0x68>)
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <_sbrk+0x64>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d207      	bcs.n	80025ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025dc:	f003 fa84 	bl	8005ae8 <__errno>
 80025e0:	4603      	mov	r3, r0
 80025e2:	220c      	movs	r2, #12
 80025e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ea:	e009      	b.n	8002600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <_sbrk+0x64>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <_sbrk+0x64>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	4a05      	ldr	r2, [pc, #20]	; (8002610 <_sbrk+0x64>)
 80025fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025fe:	68fb      	ldr	r3, [r7, #12]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20010000 	.word	0x20010000
 800260c:	00000400 	.word	0x00000400
 8002610:	20000440 	.word	0x20000440
 8002614:	20000458 	.word	0x20000458

08002618 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800261c:	bf00      	nop
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002624:	480d      	ldr	r0, [pc, #52]	; (800265c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002626:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002628:	f7ff fff6 	bl	8002618 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800262c:	480c      	ldr	r0, [pc, #48]	; (8002660 <LoopForever+0x6>)
  ldr r1, =_edata
 800262e:	490d      	ldr	r1, [pc, #52]	; (8002664 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002630:	4a0d      	ldr	r2, [pc, #52]	; (8002668 <LoopForever+0xe>)
  movs r3, #0
 8002632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002634:	e002      	b.n	800263c <LoopCopyDataInit>

08002636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800263a:	3304      	adds	r3, #4

0800263c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800263c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800263e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002640:	d3f9      	bcc.n	8002636 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002642:	4a0a      	ldr	r2, [pc, #40]	; (800266c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002644:	4c0a      	ldr	r4, [pc, #40]	; (8002670 <LoopForever+0x16>)
  movs r3, #0
 8002646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002648:	e001      	b.n	800264e <LoopFillZerobss>

0800264a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800264a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800264c:	3204      	adds	r2, #4

0800264e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800264e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002650:	d3fb      	bcc.n	800264a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002652:	f003 fa4f 	bl	8005af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002656:	f7ff fb13 	bl	8001c80 <main>

0800265a <LoopForever>:

LoopForever:
    b LoopForever
 800265a:	e7fe      	b.n	800265a <LoopForever>
  ldr   r0, =_estack
 800265c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002664:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002668:	0800a92c 	.word	0x0800a92c
  ldr r2, =_sbss
 800266c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002670:	20000458 	.word	0x20000458

08002674 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002674:	e7fe      	b.n	8002674 <ADC_IRQHandler>
	...

08002678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002682:	2003      	movs	r0, #3
 8002684:	f000 f942 	bl	800290c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002688:	f002 f8c4 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 800268c:	4603      	mov	r3, r0
 800268e:	4a09      	ldr	r2, [pc, #36]	; (80026b4 <HAL_Init+0x3c>)
 8002690:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002692:	200f      	movs	r0, #15
 8002694:	f000 f810 	bl	80026b8 <HAL_InitTick>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	71fb      	strb	r3, [r7, #7]
 80026a2:	e001      	b.n	80026a8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026a4:	f7ff fd6b 	bl	800217e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026a8:	79fb      	ldrb	r3, [r7, #7]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000000 	.word	0x20000000

080026b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80026c4:	4b17      	ldr	r3, [pc, #92]	; (8002724 <HAL_InitTick+0x6c>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d024      	beq.n	8002716 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80026cc:	f002 f8a2 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 80026d0:	4602      	mov	r2, r0
 80026d2:	4b14      	ldr	r3, [pc, #80]	; (8002724 <HAL_InitTick+0x6c>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	4619      	mov	r1, r3
 80026d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80026e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 f936 	bl	8002956 <HAL_SYSTICK_Config>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10f      	bne.n	8002710 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b0f      	cmp	r3, #15
 80026f4:	d809      	bhi.n	800270a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f6:	2200      	movs	r2, #0
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	f04f 30ff 	mov.w	r0, #4294967295
 80026fe:	f000 f910 	bl	8002922 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002702:	4a09      	ldr	r2, [pc, #36]	; (8002728 <HAL_InitTick+0x70>)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	e007      	b.n	800271a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	73fb      	strb	r3, [r7, #15]
 800270e:	e004      	b.n	800271a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
 8002714:	e001      	b.n	800271a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800271a:	7bfb      	ldrb	r3, [r7, #15]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000008 	.word	0x20000008
 8002728:	20000004 	.word	0x20000004

0800272c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <HAL_IncTick+0x1c>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	4b05      	ldr	r3, [pc, #20]	; (800274c <HAL_IncTick+0x20>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4413      	add	r3, r2
 800273c:	4a03      	ldr	r2, [pc, #12]	; (800274c <HAL_IncTick+0x20>)
 800273e:	6013      	str	r3, [r2, #0]
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr
 8002748:	20000008 	.word	0x20000008
 800274c:	20000444 	.word	0x20000444

08002750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return uwTick;
 8002754:	4b02      	ldr	r3, [pc, #8]	; (8002760 <HAL_GetTick+0x10>)
 8002756:	681b      	ldr	r3, [r3, #0]
}
 8002758:	4618      	mov	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr
 8002760:	20000444 	.word	0x20000444

08002764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800276c:	f7ff fff0 	bl	8002750 <HAL_GetTick>
 8002770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277c:	d005      	beq.n	800278a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <HAL_Delay+0x44>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4413      	add	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800278a:	bf00      	nop
 800278c:	f7ff ffe0 	bl	8002750 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	429a      	cmp	r2, r3
 800279a:	d8f7      	bhi.n	800278c <HAL_Delay+0x28>
  {
  }
}
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000008 	.word	0x20000008

080027ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <__NVIC_SetPriorityGrouping+0x44>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027c8:	4013      	ands	r3, r2
 80027ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027de:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <__NVIC_SetPriorityGrouping+0x44>)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	60d3      	str	r3, [r2, #12]
}
 80027e4:	bf00      	nop
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <__NVIC_GetPriorityGrouping+0x18>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	0a1b      	lsrs	r3, r3, #8
 80027fe:	f003 0307 	and.w	r3, r3, #7
}
 8002802:	4618      	mov	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	6039      	str	r1, [r7, #0]
 800281a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800281c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002820:	2b00      	cmp	r3, #0
 8002822:	db0a      	blt.n	800283a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	b2da      	uxtb	r2, r3
 8002828:	490c      	ldr	r1, [pc, #48]	; (800285c <__NVIC_SetPriority+0x4c>)
 800282a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282e:	0112      	lsls	r2, r2, #4
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	440b      	add	r3, r1
 8002834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002838:	e00a      	b.n	8002850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	b2da      	uxtb	r2, r3
 800283e:	4908      	ldr	r1, [pc, #32]	; (8002860 <__NVIC_SetPriority+0x50>)
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	3b04      	subs	r3, #4
 8002848:	0112      	lsls	r2, r2, #4
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	440b      	add	r3, r1
 800284e:	761a      	strb	r2, [r3, #24]
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	e000e100 	.word	0xe000e100
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002864:	b480      	push	{r7}
 8002866:	b089      	sub	sp, #36	; 0x24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f1c3 0307 	rsb	r3, r3, #7
 800287e:	2b04      	cmp	r3, #4
 8002880:	bf28      	it	cs
 8002882:	2304      	movcs	r3, #4
 8002884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3304      	adds	r3, #4
 800288a:	2b06      	cmp	r3, #6
 800288c:	d902      	bls.n	8002894 <NVIC_EncodePriority+0x30>
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	3b03      	subs	r3, #3
 8002892:	e000      	b.n	8002896 <NVIC_EncodePriority+0x32>
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002898:	f04f 32ff 	mov.w	r2, #4294967295
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43da      	mvns	r2, r3
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	401a      	ands	r2, r3
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028ac:	f04f 31ff 	mov.w	r1, #4294967295
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	fa01 f303 	lsl.w	r3, r1, r3
 80028b6:	43d9      	mvns	r1, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028bc:	4313      	orrs	r3, r2
         );
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3724      	adds	r7, #36	; 0x24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028d8:	d301      	bcc.n	80028de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028da:	2301      	movs	r3, #1
 80028dc:	e00f      	b.n	80028fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028de:	4a0a      	ldr	r2, [pc, #40]	; (8002908 <SysTick_Config+0x40>)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028e6:	210f      	movs	r1, #15
 80028e8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ec:	f7ff ff90 	bl	8002810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028f0:	4b05      	ldr	r3, [pc, #20]	; (8002908 <SysTick_Config+0x40>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028f6:	4b04      	ldr	r3, [pc, #16]	; (8002908 <SysTick_Config+0x40>)
 80028f8:	2207      	movs	r2, #7
 80028fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	e000e010 	.word	0xe000e010

0800290c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff ff49 	bl	80027ac <__NVIC_SetPriorityGrouping>
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b086      	sub	sp, #24
 8002926:	af00      	add	r7, sp, #0
 8002928:	4603      	mov	r3, r0
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	607a      	str	r2, [r7, #4]
 800292e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002930:	f7ff ff60 	bl	80027f4 <__NVIC_GetPriorityGrouping>
 8002934:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	6978      	ldr	r0, [r7, #20]
 800293c:	f7ff ff92 	bl	8002864 <NVIC_EncodePriority>
 8002940:	4602      	mov	r2, r0
 8002942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002946:	4611      	mov	r1, r2
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff ff61 	bl	8002810 <__NVIC_SetPriority>
}
 800294e:	bf00      	nop
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff ffb2 	bl	80028c8 <SysTick_Config>
 8002964:	4603      	mov	r3, r0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002970:	b480      	push	{r7}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800297e:	e140      	b.n	8002c02 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	2101      	movs	r1, #1
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	fa01 f303 	lsl.w	r3, r1, r3
 800298c:	4013      	ands	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 8132 	beq.w	8002bfc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d005      	beq.n	80029b0 <HAL_GPIO_Init+0x40>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 0303 	and.w	r3, r3, #3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d130      	bne.n	8002a12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	2203      	movs	r2, #3
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029e6:	2201      	movs	r2, #1
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4013      	ands	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	091b      	lsrs	r3, r3, #4
 80029fc:	f003 0201 	and.w	r2, r3, #1
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d017      	beq.n	8002a4e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	2203      	movs	r2, #3
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4013      	ands	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d123      	bne.n	8002aa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	08da      	lsrs	r2, r3, #3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3208      	adds	r2, #8
 8002a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	220f      	movs	r2, #15
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43db      	mvns	r3, r3
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	691a      	ldr	r2, [r3, #16]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	08da      	lsrs	r2, r3, #3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3208      	adds	r2, #8
 8002a9c:	6939      	ldr	r1, [r7, #16]
 8002a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	2203      	movs	r2, #3
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 0203 	and.w	r2, r3, #3
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 808c 	beq.w	8002bfc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002ae4:	4a4e      	ldr	r2, [pc, #312]	; (8002c20 <HAL_GPIO_Init+0x2b0>)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	3302      	adds	r3, #2
 8002aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	2207      	movs	r2, #7
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b0e:	d00d      	beq.n	8002b2c <HAL_GPIO_Init+0x1bc>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a44      	ldr	r2, [pc, #272]	; (8002c24 <HAL_GPIO_Init+0x2b4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d007      	beq.n	8002b28 <HAL_GPIO_Init+0x1b8>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a43      	ldr	r2, [pc, #268]	; (8002c28 <HAL_GPIO_Init+0x2b8>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d101      	bne.n	8002b24 <HAL_GPIO_Init+0x1b4>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e004      	b.n	8002b2e <HAL_GPIO_Init+0x1be>
 8002b24:	2307      	movs	r3, #7
 8002b26:	e002      	b.n	8002b2e <HAL_GPIO_Init+0x1be>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <HAL_GPIO_Init+0x1be>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	f002 0203 	and.w	r2, r2, #3
 8002b34:	0092      	lsls	r2, r2, #2
 8002b36:	4093      	lsls	r3, r2
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b3e:	4938      	ldr	r1, [pc, #224]	; (8002c20 <HAL_GPIO_Init+0x2b0>)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	089b      	lsrs	r3, r3, #2
 8002b44:	3302      	adds	r3, #2
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b4c:	4b37      	ldr	r3, [pc, #220]	; (8002c2c <HAL_GPIO_Init+0x2bc>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b70:	4a2e      	ldr	r2, [pc, #184]	; (8002c2c <HAL_GPIO_Init+0x2bc>)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b76:	4b2d      	ldr	r3, [pc, #180]	; (8002c2c <HAL_GPIO_Init+0x2bc>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b9a:	4a24      	ldr	r2, [pc, #144]	; (8002c2c <HAL_GPIO_Init+0x2bc>)
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002ba0:	4b22      	ldr	r3, [pc, #136]	; (8002c2c <HAL_GPIO_Init+0x2bc>)
 8002ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ba6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	43db      	mvns	r3, r3
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002bc6:	4a19      	ldr	r2, [pc, #100]	; (8002c2c <HAL_GPIO_Init+0x2bc>)
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002bce:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <HAL_GPIO_Init+0x2bc>)
 8002bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002bf4:	4a0d      	ldr	r2, [pc, #52]	; (8002c2c <HAL_GPIO_Init+0x2bc>)
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f47f aeb7 	bne.w	8002980 <HAL_GPIO_Init+0x10>
  }
}
 8002c12:	bf00      	nop
 8002c14:	bf00      	nop
 8002c16:	371c      	adds	r7, #28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40010000 	.word	0x40010000
 8002c24:	48000400 	.word	0x48000400
 8002c28:	48000800 	.word	0x48000800
 8002c2c:	58000800 	.word	0x58000800

08002c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	807b      	strh	r3, [r7, #2]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c40:	787b      	ldrb	r3, [r7, #1]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c46:	887a      	ldrh	r2, [r7, #2]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c4c:	e002      	b.n	8002c54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c4e:	887a      	ldrh	r2, [r7, #2]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr

08002c5e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e081      	b.n	8002d74 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d106      	bne.n	8002c8a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff fa81 	bl	800218c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2224      	movs	r2, #36	; 0x24
 8002c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0201 	bic.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cbe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d107      	bne.n	8002cd8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cd4:	609a      	str	r2, [r3, #8]
 8002cd6:	e006      	b.n	8002ce6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ce4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d104      	bne.n	8002cf8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cf6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d0a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d1a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69d9      	ldr	r1, [r3, #28]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1a      	ldr	r2, [r3, #32]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0201 	orr.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	4608      	mov	r0, r1
 8002d86:	4611      	mov	r1, r2
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	817b      	strh	r3, [r7, #10]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	813b      	strh	r3, [r7, #8]
 8002d92:	4613      	mov	r3, r2
 8002d94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	f040 80f9 	bne.w	8002f96 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <HAL_I2C_Mem_Write+0x34>
 8002daa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d105      	bne.n	8002dbc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002db6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0ed      	b.n	8002f98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_I2C_Mem_Write+0x4e>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e0e6      	b.n	8002f98 <HAL_I2C_Mem_Write+0x21c>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dd2:	f7ff fcbd 	bl	8002750 <HAL_GetTick>
 8002dd6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	2319      	movs	r3, #25
 8002dde:	2201      	movs	r2, #1
 8002de0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 fac2 	bl	800336e <I2C_WaitOnFlagUntilTimeout>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0d1      	b.n	8002f98 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2221      	movs	r2, #33	; 0x21
 8002df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2240      	movs	r2, #64	; 0x40
 8002e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a3a      	ldr	r2, [r7, #32]
 8002e0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e1c:	88f8      	ldrh	r0, [r7, #6]
 8002e1e:	893a      	ldrh	r2, [r7, #8]
 8002e20:	8979      	ldrh	r1, [r7, #10]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	9301      	str	r3, [sp, #4]
 8002e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f9d3 	bl	80031d8 <I2C_RequestMemoryWrite>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0a9      	b.n	8002f98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2bff      	cmp	r3, #255	; 0xff
 8002e4c:	d90e      	bls.n	8002e6c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	22ff      	movs	r2, #255	; 0xff
 8002e52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	8979      	ldrh	r1, [r7, #10]
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 fc1f 	bl	80036a8 <I2C_TransferConfig>
 8002e6a:	e00f      	b.n	8002e8c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	8979      	ldrh	r1, [r7, #10]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fc0e 	bl	80036a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 faac 	bl	80033ee <I2C_WaitOnTXISFlagUntilTimeout>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e07b      	b.n	8002f98 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	781a      	ldrb	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d034      	beq.n	8002f44 <HAL_I2C_Mem_Write+0x1c8>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d130      	bne.n	8002f44 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2180      	movs	r1, #128	; 0x80
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 fa3e 	bl	800336e <I2C_WaitOnFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e04d      	b.n	8002f98 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2bff      	cmp	r3, #255	; 0xff
 8002f04:	d90e      	bls.n	8002f24 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	22ff      	movs	r2, #255	; 0xff
 8002f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	8979      	ldrh	r1, [r7, #10]
 8002f14:	2300      	movs	r3, #0
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 fbc3 	bl	80036a8 <I2C_TransferConfig>
 8002f22:	e00f      	b.n	8002f44 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	8979      	ldrh	r1, [r7, #10]
 8002f36:	2300      	movs	r3, #0
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 fbb2 	bl	80036a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d19e      	bne.n	8002e8c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 fa8b 	bl	800346e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e01a      	b.n	8002f98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2220      	movs	r2, #32
 8002f68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6859      	ldr	r1, [r3, #4]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <HAL_I2C_Mem_Write+0x224>)
 8002f76:	400b      	ands	r3, r1
 8002f78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	e000      	b.n	8002f98 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002f96:	2302      	movs	r3, #2
  }
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	fe00e800 	.word	0xfe00e800

08002fa4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	4608      	mov	r0, r1
 8002fae:	4611      	mov	r1, r2
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	817b      	strh	r3, [r7, #10]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	813b      	strh	r3, [r7, #8]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	f040 80fd 	bne.w	80031c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <HAL_I2C_Mem_Read+0x34>
 8002fd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d105      	bne.n	8002fe4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fde:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0f1      	b.n	80031c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_I2C_Mem_Read+0x4e>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e0ea      	b.n	80031c8 <HAL_I2C_Mem_Read+0x224>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ffa:	f7ff fba9 	bl	8002750 <HAL_GetTick>
 8002ffe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	2319      	movs	r3, #25
 8003006:	2201      	movs	r2, #1
 8003008:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f9ae 	bl	800336e <I2C_WaitOnFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0d5      	b.n	80031c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2222      	movs	r2, #34	; 0x22
 8003020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2240      	movs	r2, #64	; 0x40
 8003028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a3a      	ldr	r2, [r7, #32]
 8003036:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800303c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003044:	88f8      	ldrh	r0, [r7, #6]
 8003046:	893a      	ldrh	r2, [r7, #8]
 8003048:	8979      	ldrh	r1, [r7, #10]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	9301      	str	r3, [sp, #4]
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	4603      	mov	r3, r0
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f913 	bl	8003280 <I2C_RequestMemoryRead>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e0ad      	b.n	80031c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003070:	b29b      	uxth	r3, r3
 8003072:	2bff      	cmp	r3, #255	; 0xff
 8003074:	d90e      	bls.n	8003094 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	22ff      	movs	r2, #255	; 0xff
 800307a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003080:	b2da      	uxtb	r2, r3
 8003082:	8979      	ldrh	r1, [r7, #10]
 8003084:	4b52      	ldr	r3, [pc, #328]	; (80031d0 <HAL_I2C_Mem_Read+0x22c>)
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 fb0b 	bl	80036a8 <I2C_TransferConfig>
 8003092:	e00f      	b.n	80030b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	8979      	ldrh	r1, [r7, #10]
 80030a6:	4b4a      	ldr	r3, [pc, #296]	; (80031d0 <HAL_I2C_Mem_Read+0x22c>)
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 fafa 	bl	80036a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	2200      	movs	r2, #0
 80030bc:	2104      	movs	r1, #4
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f955 	bl	800336e <I2C_WaitOnFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e07c      	b.n	80031c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d034      	beq.n	8003174 <HAL_I2C_Mem_Read+0x1d0>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310e:	2b00      	cmp	r3, #0
 8003110:	d130      	bne.n	8003174 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003118:	2200      	movs	r2, #0
 800311a:	2180      	movs	r1, #128	; 0x80
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f926 	bl	800336e <I2C_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e04d      	b.n	80031c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003130:	b29b      	uxth	r3, r3
 8003132:	2bff      	cmp	r3, #255	; 0xff
 8003134:	d90e      	bls.n	8003154 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	22ff      	movs	r2, #255	; 0xff
 800313a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003140:	b2da      	uxtb	r2, r3
 8003142:	8979      	ldrh	r1, [r7, #10]
 8003144:	2300      	movs	r3, #0
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 faab 	bl	80036a8 <I2C_TransferConfig>
 8003152:	e00f      	b.n	8003174 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003162:	b2da      	uxtb	r2, r3
 8003164:	8979      	ldrh	r1, [r7, #10]
 8003166:	2300      	movs	r3, #0
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 fa9a 	bl	80036a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d19a      	bne.n	80030b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f973 	bl	800346e <I2C_WaitOnSTOPFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e01a      	b.n	80031c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2220      	movs	r2, #32
 8003198:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6859      	ldr	r1, [r3, #4]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <HAL_I2C_Mem_Read+0x230>)
 80031a6:	400b      	ands	r3, r1
 80031a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	e000      	b.n	80031c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80031c6:	2302      	movs	r3, #2
  }
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	80002400 	.word	0x80002400
 80031d4:	fe00e800 	.word	0xfe00e800

080031d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af02      	add	r7, sp, #8
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	4608      	mov	r0, r1
 80031e2:	4611      	mov	r1, r2
 80031e4:	461a      	mov	r2, r3
 80031e6:	4603      	mov	r3, r0
 80031e8:	817b      	strh	r3, [r7, #10]
 80031ea:	460b      	mov	r3, r1
 80031ec:	813b      	strh	r3, [r7, #8]
 80031ee:	4613      	mov	r3, r2
 80031f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80031f2:	88fb      	ldrh	r3, [r7, #6]
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	8979      	ldrh	r1, [r7, #10]
 80031f8:	4b20      	ldr	r3, [pc, #128]	; (800327c <I2C_RequestMemoryWrite+0xa4>)
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 fa51 	bl	80036a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	69b9      	ldr	r1, [r7, #24]
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f8ef 	bl	80033ee <I2C_WaitOnTXISFlagUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e02c      	b.n	8003274 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800321a:	88fb      	ldrh	r3, [r7, #6]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d105      	bne.n	800322c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003220:	893b      	ldrh	r3, [r7, #8]
 8003222:	b2da      	uxtb	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	629a      	str	r2, [r3, #40]	; 0x28
 800322a:	e015      	b.n	8003258 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800322c:	893b      	ldrh	r3, [r7, #8]
 800322e:	0a1b      	lsrs	r3, r3, #8
 8003230:	b29b      	uxth	r3, r3
 8003232:	b2da      	uxtb	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800323a:	69fa      	ldr	r2, [r7, #28]
 800323c:	69b9      	ldr	r1, [r7, #24]
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 f8d5 	bl	80033ee <I2C_WaitOnTXISFlagUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e012      	b.n	8003274 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800324e:	893b      	ldrh	r3, [r7, #8]
 8003250:	b2da      	uxtb	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2200      	movs	r2, #0
 8003260:	2180      	movs	r1, #128	; 0x80
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 f883 	bl	800336e <I2C_WaitOnFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	80002000 	.word	0x80002000

08003280 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af02      	add	r7, sp, #8
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	4608      	mov	r0, r1
 800328a:	4611      	mov	r1, r2
 800328c:	461a      	mov	r2, r3
 800328e:	4603      	mov	r3, r0
 8003290:	817b      	strh	r3, [r7, #10]
 8003292:	460b      	mov	r3, r1
 8003294:	813b      	strh	r3, [r7, #8]
 8003296:	4613      	mov	r3, r2
 8003298:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800329a:	88fb      	ldrh	r3, [r7, #6]
 800329c:	b2da      	uxtb	r2, r3
 800329e:	8979      	ldrh	r1, [r7, #10]
 80032a0:	4b20      	ldr	r3, [pc, #128]	; (8003324 <I2C_RequestMemoryRead+0xa4>)
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	2300      	movs	r3, #0
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f9fe 	bl	80036a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ac:	69fa      	ldr	r2, [r7, #28]
 80032ae:	69b9      	ldr	r1, [r7, #24]
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 f89c 	bl	80033ee <I2C_WaitOnTXISFlagUntilTimeout>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e02c      	b.n	800331a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032c0:	88fb      	ldrh	r3, [r7, #6]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d105      	bne.n	80032d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032c6:	893b      	ldrh	r3, [r7, #8]
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	629a      	str	r2, [r3, #40]	; 0x28
 80032d0:	e015      	b.n	80032fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032d2:	893b      	ldrh	r3, [r7, #8]
 80032d4:	0a1b      	lsrs	r3, r3, #8
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e0:	69fa      	ldr	r2, [r7, #28]
 80032e2:	69b9      	ldr	r1, [r7, #24]
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f882 	bl	80033ee <I2C_WaitOnTXISFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e012      	b.n	800331a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032f4:	893b      	ldrh	r3, [r7, #8]
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	2200      	movs	r2, #0
 8003306:	2140      	movs	r1, #64	; 0x40
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 f830 	bl	800336e <I2C_WaitOnFlagUntilTimeout>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	80002000 	.word	0x80002000

08003328 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b02      	cmp	r3, #2
 800333c:	d103      	bne.n	8003346 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2200      	movs	r2, #0
 8003344:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b01      	cmp	r3, #1
 8003352:	d007      	beq.n	8003364 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699a      	ldr	r2, [r3, #24]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	619a      	str	r2, [r3, #24]
  }
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr

0800336e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b084      	sub	sp, #16
 8003372:	af00      	add	r7, sp, #0
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	603b      	str	r3, [r7, #0]
 800337a:	4613      	mov	r3, r2
 800337c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800337e:	e022      	b.n	80033c6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003386:	d01e      	beq.n	80033c6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003388:	f7ff f9e2 	bl	8002750 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d302      	bcc.n	800339e <I2C_WaitOnFlagUntilTimeout+0x30>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d113      	bne.n	80033c6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a2:	f043 0220 	orr.w	r2, r3, #32
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e00f      	b.n	80033e6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	699a      	ldr	r2, [r3, #24]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4013      	ands	r3, r2
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	bf0c      	ite	eq
 80033d6:	2301      	moveq	r3, #1
 80033d8:	2300      	movne	r3, #0
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	461a      	mov	r2, r3
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d0cd      	beq.n	8003380 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b084      	sub	sp, #16
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033fa:	e02c      	b.n	8003456 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	68b9      	ldr	r1, [r7, #8]
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 f871 	bl	80034e8 <I2C_IsErrorOccurred>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e02a      	b.n	8003466 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003416:	d01e      	beq.n	8003456 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003418:	f7ff f99a 	bl	8002750 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	429a      	cmp	r2, r3
 8003426:	d302      	bcc.n	800342e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d113      	bne.n	8003456 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	f043 0220 	orr.w	r2, r3, #32
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e007      	b.n	8003466 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b02      	cmp	r3, #2
 8003462:	d1cb      	bne.n	80033fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b084      	sub	sp, #16
 8003472:	af00      	add	r7, sp, #0
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800347a:	e028      	b.n	80034ce <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f831 	bl	80034e8 <I2C_IsErrorOccurred>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e026      	b.n	80034de <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003490:	f7ff f95e 	bl	8002750 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	429a      	cmp	r2, r3
 800349e:	d302      	bcc.n	80034a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d113      	bne.n	80034ce <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	f043 0220 	orr.w	r2, r3, #32
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e007      	b.n	80034de <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d1cf      	bne.n	800347c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	; 0x28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	2b00      	cmp	r3, #0
 8003512:	d068      	beq.n	80035e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2210      	movs	r2, #16
 800351a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800351c:	e049      	b.n	80035b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d045      	beq.n	80035b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003526:	f7ff f913 	bl	8002750 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	429a      	cmp	r2, r3
 8003534:	d302      	bcc.n	800353c <I2C_IsErrorOccurred+0x54>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d13a      	bne.n	80035b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003546:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800354e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800355a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800355e:	d121      	bne.n	80035a4 <I2C_IsErrorOccurred+0xbc>
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003566:	d01d      	beq.n	80035a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003568:	7cfb      	ldrb	r3, [r7, #19]
 800356a:	2b20      	cmp	r3, #32
 800356c:	d01a      	beq.n	80035a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800357c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800357e:	f7ff f8e7 	bl	8002750 <HAL_GetTick>
 8003582:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003584:	e00e      	b.n	80035a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003586:	f7ff f8e3 	bl	8002750 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b19      	cmp	r3, #25
 8003592:	d907      	bls.n	80035a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	f043 0320 	orr.w	r3, r3, #32
 800359a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80035a2:	e006      	b.n	80035b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b20      	cmp	r3, #32
 80035b0:	d1e9      	bne.n	8003586 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b20      	cmp	r3, #32
 80035be:	d003      	beq.n	80035c8 <I2C_IsErrorOccurred+0xe0>
 80035c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0aa      	beq.n	800351e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80035c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d103      	bne.n	80035d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2220      	movs	r2, #32
 80035d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	f043 0304 	orr.w	r3, r3, #4
 80035de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00b      	beq.n	8003610 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003608:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00b      	beq.n	8003632 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	f043 0308 	orr.w	r3, r3, #8
 8003620:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800362a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00b      	beq.n	8003654 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	f043 0302 	orr.w	r3, r3, #2
 8003642:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800364c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01c      	beq.n	8003696 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7ff fe63 	bl	8003328 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6859      	ldr	r1, [r3, #4]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <I2C_IsErrorOccurred+0x1bc>)
 800366e:	400b      	ands	r3, r1
 8003670:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	431a      	orrs	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800369a:	4618      	mov	r0, r3
 800369c:	3728      	adds	r7, #40	; 0x28
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	fe00e800 	.word	0xfe00e800

080036a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	607b      	str	r3, [r7, #4]
 80036b2:	460b      	mov	r3, r1
 80036b4:	817b      	strh	r3, [r7, #10]
 80036b6:	4613      	mov	r3, r2
 80036b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036ba:	897b      	ldrh	r3, [r7, #10]
 80036bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036c0:	7a7b      	ldrb	r3, [r7, #9]
 80036c2:	041b      	lsls	r3, r3, #16
 80036c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	0d5b      	lsrs	r3, r3, #21
 80036e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80036e6:	4b07      	ldr	r3, [pc, #28]	; (8003704 <I2C_TransferConfig+0x5c>)
 80036e8:	430b      	orrs	r3, r1
 80036ea:	43db      	mvns	r3, r3
 80036ec:	ea02 0103 	and.w	r1, r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036fa:	bf00      	nop
 80036fc:	371c      	adds	r7, #28
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr
 8003704:	03ff63ff 	.word	0x03ff63ff

08003708 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b20      	cmp	r3, #32
 800371c:	d138      	bne.n	8003790 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003728:	2302      	movs	r3, #2
 800372a:	e032      	b.n	8003792 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2224      	movs	r2, #36	; 0x24
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0201 	bic.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800375a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6819      	ldr	r1, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	e000      	b.n	8003792 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003790:	2302      	movs	r3, #2
  }
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr

0800379c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d139      	bne.n	8003826 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037bc:	2302      	movs	r3, #2
 80037be:	e033      	b.n	8003828 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2224      	movs	r2, #36	; 0x24
 80037cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	021b      	lsls	r3, r3, #8
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0201 	orr.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	e000      	b.n	8003828 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003826:	2302      	movs	r3, #2
  }
}
 8003828:	4618      	mov	r0, r3
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr
	...

08003834 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003838:	4b04      	ldr	r3, [pc, #16]	; (800384c <HAL_PWR_EnableBkUpAccess+0x18>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a03      	ldr	r2, [pc, #12]	; (800384c <HAL_PWR_EnableBkUpAccess+0x18>)
 800383e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003842:	6013      	str	r3, [r2, #0]
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr
 800384c:	58000400 	.word	0x58000400

08003850 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <HAL_PWREx_GetVoltageRange+0x14>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800385c:	4618      	mov	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr
 8003864:	58000400 	.word	0x58000400

08003868 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800386c:	4b06      	ldr	r3, [pc, #24]	; (8003888 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003878:	d101      	bne.n	800387e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr
 8003888:	58000400 	.word	0x58000400

0800388c <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800389a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800389e:	6013      	str	r3, [r2, #0]
}
 80038a0:	bf00      	nop
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80038ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038ba:	6013      	str	r3, [r2, #0]
}
 80038bc:	bf00      	nop
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80038c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038d6:	d101      	bne.n	80038dc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80038d8:	2301      	movs	r3, #1
 80038da:	e000      	b.n	80038de <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr

080038e6 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80038e6:	b480      	push	{r7}
 80038e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80038ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f8:	6013      	str	r3, [r2, #0]
}
 80038fa:	bf00      	nop
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr

08003902 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003902:	b480      	push	{r7}
 8003904:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003914:	6013      	str	r3, [r2, #0]
}
 8003916:	bf00      	nop
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr

0800391e <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800391e:	b480      	push	{r7}
 8003920:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003930:	d101      	bne.n	8003936 <LL_RCC_HSE_IsReady+0x18>
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <LL_RCC_HSE_IsReady+0x1a>
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr

08003940 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800394e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003952:	6013      	str	r3, [r2, #0]
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr

0800395c <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800396a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800396e:	6013      	str	r3, [r2, #0]
}
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr

08003978 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800397c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800398a:	d101      	bne.n	8003990 <LL_RCC_HSI_IsReady+0x18>
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <LL_RCC_HSI_IsReady+0x1a>
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr

0800399a <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80039a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	061b      	lsls	r3, r3, #24
 80039b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039b4:	4313      	orrs	r3, r2
 80039b6:	604b      	str	r3, [r1, #4]
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr

080039c2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80039c2:	b480      	push	{r7}
 80039c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80039c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d101      	bne.n	80039da <LL_RCC_LSE_IsReady+0x18>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <LL_RCC_LSE_IsReady+0x1a>
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr

080039e4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80039e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039f4:	f043 0301 	orr.w	r3, r3, #1
 80039f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80039fc:	bf00      	nop
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr

08003a04 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003a1c:	bf00      	nop
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr

08003a24 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d101      	bne.n	8003a3c <LL_RCC_LSI_IsReady+0x18>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <LL_RCC_LSI_IsReady+0x1a>
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003a46:	b480      	push	{r7}
 8003a48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	6013      	str	r3, [r2, #0]
}
 8003a5a:	bf00      	nop
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc80      	pop	{r7}
 8003a60:	4770      	bx	lr

08003a62 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003a62:	b480      	push	{r7}
 8003a64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	6013      	str	r3, [r2, #0]
}
 8003a76:	bf00      	nop
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr

08003a7e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d101      	bne.n	8003a94 <LL_RCC_MSI_IsReady+0x16>
 8003a90:	2301      	movs	r3, #1
 8003a92:	e000      	b.n	8003a96 <LL_RCC_MSI_IsReady+0x18>
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr

08003a9e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d101      	bne.n	8003ab4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e000      	b.n	8003ab6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr

08003abe <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr

08003ad4 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ae0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr

08003aec <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	021b      	lsls	r3, r3, #8
 8003b02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b06:	4313      	orrs	r3, r2
 8003b08:	604b      	str	r3, [r1, #4]
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr

08003b14 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f023 0203 	bic.w	r2, r3, #3
 8003b26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	608b      	str	r3, [r1, #8]
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr

08003b3a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 030c 	and.w	r3, r3, #12
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr

08003b50 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	608b      	str	r3, [r1, #8]
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr

08003b76 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b82:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b86:	f023 020f 	bic.w	r2, r3, #15
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr

08003ba2 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	608b      	str	r3, [r1, #8]
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr

08003bc8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	608b      	str	r3, [r1, #8]
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr

08003bee <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr

08003c04 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c0c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr

08003c1e <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr

08003c34 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr

08003c4a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c5c:	6013      	str	r3, [r2, #0]
}
 8003c5e:	bf00      	nop
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr

08003c66 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003c66:	b480      	push	{r7}
 8003c68:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c78:	6013      	str	r3, [r2, #0]
}
 8003c7a:	bf00      	nop
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr

08003c82 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003c82:	b480      	push	{r7}
 8003c84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c94:	d101      	bne.n	8003c9a <LL_RCC_PLL_IsReady+0x18>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <LL_RCC_PLL_IsReady+0x1a>
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr

08003ca4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	0a1b      	lsrs	r3, r3, #8
 8003cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	4770      	bx	lr

08003cd2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr

08003ce8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f003 0303 	and.w	r3, r3, #3
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr

08003cfe <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d10:	d101      	bne.n	8003d16 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr

08003d20 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d28:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d34:	d101      	bne.n	8003d3a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr

08003d44 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d56:	d101      	bne.n	8003d5c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bc80      	pop	{r7}
 8003d64:	4770      	bx	lr

08003d66 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003d66:	b480      	push	{r7}
 8003d68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d78:	d101      	bne.n	8003d7e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr

08003d88 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e36f      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d9a:	f7ff fece 	bl	8003b3a <LL_RCC_GetSysClkSource>
 8003d9e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003da0:	f7ff ffa2 	bl	8003ce8 <LL_RCC_PLL_GetMainSource>
 8003da4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 80c4 	beq.w	8003f3c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x3e>
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	2b0c      	cmp	r3, #12
 8003dbe:	d176      	bne.n	8003eae <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d173      	bne.n	8003eae <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e353      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <HAL_RCC_OscConfig+0x68>
 8003de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dee:	e006      	b.n	8003dfe <HAL_RCC_OscConfig+0x76>
 8003df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003df8:	091b      	lsrs	r3, r3, #4
 8003dfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d222      	bcs.n	8003e48 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 fd3c 	bl	8004884 <RCC_SetFlashLatencyFromMSIRange>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e331      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e20:	f043 0308 	orr.w	r3, r3, #8
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff fe53 	bl	8003aec <LL_RCC_MSI_SetCalibTrimming>
 8003e46:	e021      	b.n	8003e8c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e52:	f043 0308 	orr.w	r3, r3, #8
 8003e56:	6013      	str	r3, [r2, #0]
 8003e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff fe3a 	bl	8003aec <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 fd01 	bl	8004884 <RCC_SetFlashLatencyFromMSIRange>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e2f6      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003e8c:	f000 fcc2 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 8003e90:	4603      	mov	r3, r0
 8003e92:	4aa7      	ldr	r2, [pc, #668]	; (8004130 <HAL_RCC_OscConfig+0x3a8>)
 8003e94:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8003e96:	4ba7      	ldr	r3, [pc, #668]	; (8004134 <HAL_RCC_OscConfig+0x3ac>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fe fc0c 	bl	80026b8 <HAL_InitTick>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003ea4:	7cfb      	ldrb	r3, [r7, #19]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d047      	beq.n	8003f3a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8003eaa:	7cfb      	ldrb	r3, [r7, #19]
 8003eac:	e2e5      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d02c      	beq.n	8003f10 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003eb6:	f7ff fdc6 	bl	8003a46 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003eba:	f7fe fc49 	bl	8002750 <HAL_GetTick>
 8003ebe:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ec2:	f7fe fc45 	bl	8002750 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e2d2      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003ed4:	f7ff fdd3 	bl	8003a7e <LL_RCC_MSI_IsReady>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f1      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ee8:	f043 0308 	orr.w	r3, r3, #8
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f00:	4313      	orrs	r3, r2
 8003f02:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff fdef 	bl	8003aec <LL_RCC_MSI_SetCalibTrimming>
 8003f0e:	e015      	b.n	8003f3c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f10:	f7ff fda7 	bl	8003a62 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f14:	f7fe fc1c 	bl	8002750 <HAL_GetTick>
 8003f18:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f1c:	f7fe fc18 	bl	8002750 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e2a5      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003f2e:	f7ff fda6 	bl	8003a7e <LL_RCC_MSI_IsReady>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f1      	bne.n	8003f1c <HAL_RCC_OscConfig+0x194>
 8003f38:	e000      	b.n	8003f3c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003f3a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d058      	beq.n	8003ffa <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	d005      	beq.n	8003f5a <HAL_RCC_OscConfig+0x1d2>
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	2b0c      	cmp	r3, #12
 8003f52:	d108      	bne.n	8003f66 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d105      	bne.n	8003f66 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d14b      	bne.n	8003ffa <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e289      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8003f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f84:	d102      	bne.n	8003f8c <HAL_RCC_OscConfig+0x204>
 8003f86:	f7ff fcae 	bl	80038e6 <LL_RCC_HSE_Enable>
 8003f8a:	e00d      	b.n	8003fa8 <HAL_RCC_OscConfig+0x220>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003f94:	d104      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x218>
 8003f96:	f7ff fc79 	bl	800388c <LL_RCC_HSE_EnableTcxo>
 8003f9a:	f7ff fca4 	bl	80038e6 <LL_RCC_HSE_Enable>
 8003f9e:	e003      	b.n	8003fa8 <HAL_RCC_OscConfig+0x220>
 8003fa0:	f7ff fcaf 	bl	8003902 <LL_RCC_HSE_Disable>
 8003fa4:	f7ff fc80 	bl	80038a8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d012      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb0:	f7fe fbce 	bl	8002750 <HAL_GetTick>
 8003fb4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb8:	f7fe fbca 	bl	8002750 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b64      	cmp	r3, #100	; 0x64
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e257      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003fca:	f7ff fca8 	bl	800391e <LL_RCC_HSE_IsReady>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0f1      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x230>
 8003fd4:	e011      	b.n	8003ffa <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd6:	f7fe fbbb 	bl	8002750 <HAL_GetTick>
 8003fda:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fde:	f7fe fbb7 	bl	8002750 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b64      	cmp	r3, #100	; 0x64
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e244      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003ff0:	f7ff fc95 	bl	800391e <LL_RCC_HSE_IsReady>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f1      	bne.n	8003fde <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d046      	beq.n	8004094 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	2b04      	cmp	r3, #4
 800400a:	d005      	beq.n	8004018 <HAL_RCC_OscConfig+0x290>
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	2b0c      	cmp	r3, #12
 8004010:	d10e      	bne.n	8004030 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	2b02      	cmp	r3, #2
 8004016:	d10b      	bne.n	8004030 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e22a      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff fcb6 	bl	800399a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800402e:	e031      	b.n	8004094 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d019      	beq.n	800406c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004038:	f7ff fc82 	bl	8003940 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fe fb88 	bl	8002750 <HAL_GetTick>
 8004040:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004044:	f7fe fb84 	bl	8002750 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e211      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004056:	f7ff fc8f 	bl	8003978 <LL_RCC_HSI_IsReady>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f1      	beq.n	8004044 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff fc98 	bl	800399a <LL_RCC_HSI_SetCalibTrimming>
 800406a:	e013      	b.n	8004094 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800406c:	f7ff fc76 	bl	800395c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004070:	f7fe fb6e 	bl	8002750 <HAL_GetTick>
 8004074:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004078:	f7fe fb6a 	bl	8002750 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e1f7      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800408a:	f7ff fc75 	bl	8003978 <LL_RCC_HSI_IsReady>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f1      	bne.n	8004078 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b00      	cmp	r3, #0
 800409e:	d06e      	beq.n	800417e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d056      	beq.n	8004156 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80040a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040b0:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69da      	ldr	r2, [r3, #28]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f003 0310 	and.w	r3, r3, #16
 80040bc:	429a      	cmp	r2, r3
 80040be:	d031      	beq.n	8004124 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d006      	beq.n	80040d8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e1d0      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d013      	beq.n	800410a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80040e2:	f7ff fc8f 	bl	8003a04 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040e6:	f7fe fb33 	bl	8002750 <HAL_GetTick>
 80040ea:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80040ec:	e008      	b.n	8004100 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ee:	f7fe fb2f 	bl	8002750 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b11      	cmp	r3, #17
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e1bc      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8004100:	f7ff fc90 	bl	8003a24 <LL_RCC_LSI_IsReady>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f1      	bne.n	80040ee <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800410a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800410e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004112:	f023 0210 	bic.w	r2, r3, #16
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004124:	f7ff fc5e 	bl	80039e4 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004128:	f7fe fb12 	bl	8002750 <HAL_GetTick>
 800412c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800412e:	e00c      	b.n	800414a <HAL_RCC_OscConfig+0x3c2>
 8004130:	20000000 	.word	0x20000000
 8004134:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004138:	f7fe fb0a 	bl	8002750 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b11      	cmp	r3, #17
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e197      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800414a:	f7ff fc6b 	bl	8003a24 <LL_RCC_LSI_IsReady>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0f1      	beq.n	8004138 <HAL_RCC_OscConfig+0x3b0>
 8004154:	e013      	b.n	800417e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004156:	f7ff fc55 	bl	8003a04 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800415a:	f7fe faf9 	bl	8002750 <HAL_GetTick>
 800415e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004162:	f7fe faf5 	bl	8002750 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b11      	cmp	r3, #17
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e182      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004174:	f7ff fc56 	bl	8003a24 <LL_RCC_LSI_IsReady>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f1      	bne.n	8004162 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0304 	and.w	r3, r3, #4
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 80d8 	beq.w	800433c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800418c:	f7ff fb6c 	bl	8003868 <LL_PWR_IsEnabledBkUpAccess>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d113      	bne.n	80041be <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004196:	f7ff fb4d 	bl	8003834 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800419a:	f7fe fad9 	bl	8002750 <HAL_GetTick>
 800419e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80041a0:	e008      	b.n	80041b4 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a2:	f7fe fad5 	bl	8002750 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e162      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80041b4:	f7ff fb58 	bl	8003868 <LL_PWR_IsEnabledBkUpAccess>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0f1      	beq.n	80041a2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d07b      	beq.n	80042be <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	2b85      	cmp	r3, #133	; 0x85
 80041cc:	d003      	beq.n	80041d6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	2b05      	cmp	r3, #5
 80041d4:	d109      	bne.n	80041ea <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80041d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041e2:	f043 0304 	orr.w	r3, r3, #4
 80041e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ea:	f7fe fab1 	bl	8002750 <HAL_GetTick>
 80041ee:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80041f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041fc:	f043 0301 	orr.w	r3, r3, #1
 8004200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004204:	e00a      	b.n	800421c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004206:	f7fe faa3 	bl	8002750 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	f241 3288 	movw	r2, #5000	; 0x1388
 8004214:	4293      	cmp	r3, r2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e12e      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800421c:	f7ff fbd1 	bl	80039c2 <LL_RCC_LSE_IsReady>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0ef      	beq.n	8004206 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	2b81      	cmp	r3, #129	; 0x81
 800422c:	d003      	beq.n	8004236 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	2b85      	cmp	r3, #133	; 0x85
 8004234:	d121      	bne.n	800427a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004236:	f7fe fa8b 	bl	8002750 <HAL_GetTick>
 800423a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800423c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004244:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800424c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004250:	e00a      	b.n	8004268 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004252:	f7fe fa7d 	bl	8002750 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004260:	4293      	cmp	r3, r2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e108      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004270:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0ec      	beq.n	8004252 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004278:	e060      	b.n	800433c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427a:	f7fe fa69 	bl	8002750 <HAL_GetTick>
 800427e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800428c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004294:	e00a      	b.n	80042ac <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004296:	f7fe fa5b 	bl	8002750 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e0e6      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80042ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1ec      	bne.n	8004296 <HAL_RCC_OscConfig+0x50e>
 80042bc:	e03e      	b.n	800433c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042be:	f7fe fa47 	bl	8002750 <HAL_GetTick>
 80042c2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80042c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80042d8:	e00a      	b.n	80042f0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042da:	f7fe fa39 	bl	8002750 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e0c4      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80042f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1ec      	bne.n	80042da <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004300:	f7fe fa26 	bl	8002750 <HAL_GetTick>
 8004304:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800430a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004312:	f023 0301 	bic.w	r3, r3, #1
 8004316:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800431a:	e00a      	b.n	8004332 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800431c:	f7fe fa18 	bl	8002750 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f241 3288 	movw	r2, #5000	; 0x1388
 800432a:	4293      	cmp	r3, r2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e0a3      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004332:	f7ff fb46 	bl	80039c2 <LL_RCC_LSE_IsReady>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1ef      	bne.n	800431c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 8099 	beq.w	8004478 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	2b0c      	cmp	r3, #12
 800434a:	d06c      	beq.n	8004426 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	2b02      	cmp	r3, #2
 8004352:	d14b      	bne.n	80043ec <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004354:	f7ff fc87 	bl	8003c66 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004358:	f7fe f9fa 	bl	8002750 <HAL_GetTick>
 800435c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004360:	f7fe f9f6 	bl	8002750 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b0a      	cmp	r3, #10
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e083      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004372:	f7ff fc86 	bl	8003c82 <LL_RCC_PLL_IsReady>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f1      	bne.n	8004360 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800437c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	4b40      	ldr	r3, [pc, #256]	; (8004484 <HAL_RCC_OscConfig+0x6fc>)
 8004384:	4013      	ands	r3, r2
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800438e:	4311      	orrs	r1, r2
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004394:	0212      	lsls	r2, r2, #8
 8004396:	4311      	orrs	r1, r2
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800439c:	4311      	orrs	r1, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043a2:	4311      	orrs	r1, r2
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80043a8:	430a      	orrs	r2, r1
 80043aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043b2:	f7ff fc4a 	bl	8003c4a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c6:	f7fe f9c3 	bl	8002750 <HAL_GetTick>
 80043ca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ce:	f7fe f9bf 	bl	8002750 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b0a      	cmp	r3, #10
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e04c      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80043e0:	f7ff fc4f 	bl	8003c82 <LL_RCC_PLL_IsReady>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f1      	beq.n	80043ce <HAL_RCC_OscConfig+0x646>
 80043ea:	e045      	b.n	8004478 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ec:	f7ff fc3b 	bl	8003c66 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f0:	f7fe f9ae 	bl	8002750 <HAL_GetTick>
 80043f4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f8:	f7fe f9aa 	bl	8002750 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b0a      	cmp	r3, #10
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e037      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800440a:	f7ff fc3a 	bl	8003c82 <LL_RCC_PLL_IsReady>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1f1      	bne.n	80043f8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800441e:	4b1a      	ldr	r3, [pc, #104]	; (8004488 <HAL_RCC_OscConfig+0x700>)
 8004420:	4013      	ands	r3, r2
 8004422:	60cb      	str	r3, [r1, #12]
 8004424:	e028      	b.n	8004478 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e023      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	f003 0203 	and.w	r2, r3, #3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004444:	429a      	cmp	r2, r3
 8004446:	d115      	bne.n	8004474 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004452:	429a      	cmp	r2, r3
 8004454:	d10e      	bne.n	8004474 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	429a      	cmp	r2, r3
 8004464:	d106      	bne.n	8004474 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004470:	429a      	cmp	r2, r3
 8004472:	d001      	beq.n	8004478 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e000      	b.n	800447a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3720      	adds	r7, #32
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	11c1808c 	.word	0x11c1808c
 8004488:	eefefffc 	.word	0xeefefffc

0800448c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e10f      	b.n	80046c0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044a0:	4b89      	ldr	r3, [pc, #548]	; (80046c8 <HAL_RCC_ClockConfig+0x23c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d91b      	bls.n	80044e6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ae:	4b86      	ldr	r3, [pc, #536]	; (80046c8 <HAL_RCC_ClockConfig+0x23c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f023 0207 	bic.w	r2, r3, #7
 80044b6:	4984      	ldr	r1, [pc, #528]	; (80046c8 <HAL_RCC_ClockConfig+0x23c>)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044be:	f7fe f947 	bl	8002750 <HAL_GetTick>
 80044c2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80044c6:	f7fe f943 	bl	8002750 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e0f3      	b.n	80046c0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d8:	4b7b      	ldr	r3, [pc, #492]	; (80046c8 <HAL_RCC_ClockConfig+0x23c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d1ef      	bne.n	80044c6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d016      	beq.n	8004520 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff fb2a 	bl	8003b50 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80044fc:	f7fe f928 	bl	8002750 <HAL_GetTick>
 8004500:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004502:	e008      	b.n	8004516 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004504:	f7fe f924 	bl	8002750 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e0d4      	b.n	80046c0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004516:	f7ff fbf2 	bl	8003cfe <LL_RCC_IsActiveFlag_HPRE>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f1      	beq.n	8004504 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004528:	2b00      	cmp	r3, #0
 800452a:	d016      	beq.n	800455a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff fb20 	bl	8003b76 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004536:	f7fe f90b 	bl	8002750 <HAL_GetTick>
 800453a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800453c:	e008      	b.n	8004550 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800453e:	f7fe f907 	bl	8002750 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e0b7      	b.n	80046c0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004550:	f7ff fbe6 	bl	8003d20 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f1      	beq.n	800453e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0304 	and.w	r3, r3, #4
 8004562:	2b00      	cmp	r3, #0
 8004564:	d016      	beq.n	8004594 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff fb19 	bl	8003ba2 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004570:	f7fe f8ee 	bl	8002750 <HAL_GetTick>
 8004574:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004576:	e008      	b.n	800458a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004578:	f7fe f8ea 	bl	8002750 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e09a      	b.n	80046c0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800458a:	f7ff fbdb 	bl	8003d44 <LL_RCC_IsActiveFlag_PPRE1>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0f1      	beq.n	8004578 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b00      	cmp	r3, #0
 800459e:	d017      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7ff fb0e 	bl	8003bc8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80045ac:	f7fe f8d0 	bl	8002750 <HAL_GetTick>
 80045b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80045b4:	f7fe f8cc 	bl	8002750 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e07c      	b.n	80046c0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80045c6:	f7ff fbce 	bl	8003d66 <LL_RCC_IsActiveFlag_PPRE2>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f1      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d043      	beq.n	8004664 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d106      	bne.n	80045f2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80045e4:	f7ff f99b 	bl	800391e <LL_RCC_HSE_IsReady>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d11e      	bne.n	800462c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e066      	b.n	80046c0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d106      	bne.n	8004608 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80045fa:	f7ff fb42 	bl	8003c82 <LL_RCC_PLL_IsReady>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d113      	bne.n	800462c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e05b      	b.n	80046c0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d106      	bne.n	800461e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004610:	f7ff fa35 	bl	8003a7e <LL_RCC_MSI_IsReady>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d108      	bne.n	800462c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e050      	b.n	80046c0 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800461e:	f7ff f9ab 	bl	8003978 <LL_RCC_HSI_IsReady>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e049      	b.n	80046c0 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff fa6f 	bl	8003b14 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004636:	f7fe f88b 	bl	8002750 <HAL_GetTick>
 800463a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463c:	e00a      	b.n	8004654 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800463e:	f7fe f887 	bl	8002750 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	f241 3288 	movw	r2, #5000	; 0x1388
 800464c:	4293      	cmp	r3, r2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e035      	b.n	80046c0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004654:	f7ff fa71 	bl	8003b3a <LL_RCC_GetSysClkSource>
 8004658:	4602      	mov	r2, r0
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	429a      	cmp	r2, r3
 8004662:	d1ec      	bne.n	800463e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004664:	4b18      	ldr	r3, [pc, #96]	; (80046c8 <HAL_RCC_ClockConfig+0x23c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d21b      	bcs.n	80046aa <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004672:	4b15      	ldr	r3, [pc, #84]	; (80046c8 <HAL_RCC_ClockConfig+0x23c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f023 0207 	bic.w	r2, r3, #7
 800467a:	4913      	ldr	r1, [pc, #76]	; (80046c8 <HAL_RCC_ClockConfig+0x23c>)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	4313      	orrs	r3, r2
 8004680:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004682:	f7fe f865 	bl	8002750 <HAL_GetTick>
 8004686:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004688:	e008      	b.n	800469c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800468a:	f7fe f861 	bl	8002750 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e011      	b.n	80046c0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800469c:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <HAL_RCC_ClockConfig+0x23c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d1ef      	bne.n	800468a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80046aa:	f000 f8b3 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 80046ae:	4603      	mov	r3, r0
 80046b0:	4a06      	ldr	r2, [pc, #24]	; (80046cc <HAL_RCC_ClockConfig+0x240>)
 80046b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80046b4:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <HAL_RCC_ClockConfig+0x244>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fd fffd 	bl	80026b8 <HAL_InitTick>
 80046be:	4603      	mov	r3, r0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	58004000 	.word	0x58004000
 80046cc:	20000000 	.word	0x20000000
 80046d0:	20000004 	.word	0x20000004

080046d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046d4:	b590      	push	{r4, r7, lr}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046e2:	f7ff fa2a 	bl	8003b3a <LL_RCC_GetSysClkSource>
 80046e6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046e8:	f7ff fafe 	bl	8003ce8 <LL_RCC_PLL_GetMainSource>
 80046ec:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <HAL_RCC_GetSysClockFreq+0x2c>
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2b0c      	cmp	r3, #12
 80046f8:	d139      	bne.n	800476e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d136      	bne.n	800476e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004700:	f7ff f9cd 	bl	8003a9e <LL_RCC_MSI_IsEnabledRangeSelect>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d115      	bne.n	8004736 <HAL_RCC_GetSysClockFreq+0x62>
 800470a:	f7ff f9c8 	bl	8003a9e <LL_RCC_MSI_IsEnabledRangeSelect>
 800470e:	4603      	mov	r3, r0
 8004710:	2b01      	cmp	r3, #1
 8004712:	d106      	bne.n	8004722 <HAL_RCC_GetSysClockFreq+0x4e>
 8004714:	f7ff f9d3 	bl	8003abe <LL_RCC_MSI_GetRange>
 8004718:	4603      	mov	r3, r0
 800471a:	0a1b      	lsrs	r3, r3, #8
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	e005      	b.n	800472e <HAL_RCC_GetSysClockFreq+0x5a>
 8004722:	f7ff f9d7 	bl	8003ad4 <LL_RCC_MSI_GetRangeAfterStandby>
 8004726:	4603      	mov	r3, r0
 8004728:	0a1b      	lsrs	r3, r3, #8
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	4a36      	ldr	r2, [pc, #216]	; (8004808 <HAL_RCC_GetSysClockFreq+0x134>)
 8004730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004734:	e014      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x8c>
 8004736:	f7ff f9b2 	bl	8003a9e <LL_RCC_MSI_IsEnabledRangeSelect>
 800473a:	4603      	mov	r3, r0
 800473c:	2b01      	cmp	r3, #1
 800473e:	d106      	bne.n	800474e <HAL_RCC_GetSysClockFreq+0x7a>
 8004740:	f7ff f9bd 	bl	8003abe <LL_RCC_MSI_GetRange>
 8004744:	4603      	mov	r3, r0
 8004746:	091b      	lsrs	r3, r3, #4
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	e005      	b.n	800475a <HAL_RCC_GetSysClockFreq+0x86>
 800474e:	f7ff f9c1 	bl	8003ad4 <LL_RCC_MSI_GetRangeAfterStandby>
 8004752:	4603      	mov	r3, r0
 8004754:	091b      	lsrs	r3, r3, #4
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	4a2b      	ldr	r2, [pc, #172]	; (8004808 <HAL_RCC_GetSysClockFreq+0x134>)
 800475c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004760:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d115      	bne.n	8004794 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800476c:	e012      	b.n	8004794 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2b04      	cmp	r3, #4
 8004772:	d102      	bne.n	800477a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004774:	4b25      	ldr	r3, [pc, #148]	; (800480c <HAL_RCC_GetSysClockFreq+0x138>)
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	e00c      	b.n	8004794 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b08      	cmp	r3, #8
 800477e:	d109      	bne.n	8004794 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004780:	f7ff f8a0 	bl	80038c4 <LL_RCC_HSE_IsEnabledDiv2>
 8004784:	4603      	mov	r3, r0
 8004786:	2b01      	cmp	r3, #1
 8004788:	d102      	bne.n	8004790 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800478a:	4b20      	ldr	r3, [pc, #128]	; (800480c <HAL_RCC_GetSysClockFreq+0x138>)
 800478c:	617b      	str	r3, [r7, #20]
 800478e:	e001      	b.n	8004794 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004790:	4b1f      	ldr	r3, [pc, #124]	; (8004810 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004792:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004794:	f7ff f9d1 	bl	8003b3a <LL_RCC_GetSysClkSource>
 8004798:	4603      	mov	r3, r0
 800479a:	2b0c      	cmp	r3, #12
 800479c:	d12f      	bne.n	80047fe <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800479e:	f7ff faa3 	bl	8003ce8 <LL_RCC_PLL_GetMainSource>
 80047a2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d003      	beq.n	80047b2 <HAL_RCC_GetSysClockFreq+0xde>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d003      	beq.n	80047b8 <HAL_RCC_GetSysClockFreq+0xe4>
 80047b0:	e00d      	b.n	80047ce <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80047b2:	4b16      	ldr	r3, [pc, #88]	; (800480c <HAL_RCC_GetSysClockFreq+0x138>)
 80047b4:	60fb      	str	r3, [r7, #12]
        break;
 80047b6:	e00d      	b.n	80047d4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80047b8:	f7ff f884 	bl	80038c4 <LL_RCC_HSE_IsEnabledDiv2>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d102      	bne.n	80047c8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80047c2:	4b12      	ldr	r3, [pc, #72]	; (800480c <HAL_RCC_GetSysClockFreq+0x138>)
 80047c4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80047c6:	e005      	b.n	80047d4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80047c8:	4b11      	ldr	r3, [pc, #68]	; (8004810 <HAL_RCC_GetSysClockFreq+0x13c>)
 80047ca:	60fb      	str	r3, [r7, #12]
        break;
 80047cc:	e002      	b.n	80047d4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	60fb      	str	r3, [r7, #12]
        break;
 80047d2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80047d4:	f7ff fa66 	bl	8003ca4 <LL_RCC_PLL_GetN>
 80047d8:	4602      	mov	r2, r0
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	fb03 f402 	mul.w	r4, r3, r2
 80047e0:	f7ff fa77 	bl	8003cd2 <LL_RCC_PLL_GetDivider>
 80047e4:	4603      	mov	r3, r0
 80047e6:	091b      	lsrs	r3, r3, #4
 80047e8:	3301      	adds	r3, #1
 80047ea:	fbb4 f4f3 	udiv	r4, r4, r3
 80047ee:	f7ff fa65 	bl	8003cbc <LL_RCC_PLL_GetR>
 80047f2:	4603      	mov	r3, r0
 80047f4:	0f5b      	lsrs	r3, r3, #29
 80047f6:	3301      	adds	r3, #1
 80047f8:	fbb4 f3f3 	udiv	r3, r4, r3
 80047fc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80047fe:	697b      	ldr	r3, [r7, #20]
}
 8004800:	4618      	mov	r0, r3
 8004802:	371c      	adds	r7, #28
 8004804:	46bd      	mov	sp, r7
 8004806:	bd90      	pop	{r4, r7, pc}
 8004808:	0800a40c 	.word	0x0800a40c
 800480c:	00f42400 	.word	0x00f42400
 8004810:	01e84800 	.word	0x01e84800

08004814 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004814:	b598      	push	{r3, r4, r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004818:	f7ff ff5c 	bl	80046d4 <HAL_RCC_GetSysClockFreq>
 800481c:	4604      	mov	r4, r0
 800481e:	f7ff f9e6 	bl	8003bee <LL_RCC_GetAHBPrescaler>
 8004822:	4603      	mov	r3, r0
 8004824:	091b      	lsrs	r3, r3, #4
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	4a03      	ldr	r2, [pc, #12]	; (8004838 <HAL_RCC_GetHCLKFreq+0x24>)
 800482c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004830:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004834:	4618      	mov	r0, r3
 8004836:	bd98      	pop	{r3, r4, r7, pc}
 8004838:	0800a3ac 	.word	0x0800a3ac

0800483c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800483c:	b598      	push	{r3, r4, r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004840:	f7ff ffe8 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 8004844:	4604      	mov	r4, r0
 8004846:	f7ff f9ea 	bl	8003c1e <LL_RCC_GetAPB1Prescaler>
 800484a:	4603      	mov	r3, r0
 800484c:	0a1b      	lsrs	r3, r3, #8
 800484e:	4a03      	ldr	r2, [pc, #12]	; (800485c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004854:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004858:	4618      	mov	r0, r3
 800485a:	bd98      	pop	{r3, r4, r7, pc}
 800485c:	0800a3ec 	.word	0x0800a3ec

08004860 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004860:	b598      	push	{r3, r4, r7, lr}
 8004862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004864:	f7ff ffd6 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 8004868:	4604      	mov	r4, r0
 800486a:	f7ff f9e3 	bl	8003c34 <LL_RCC_GetAPB2Prescaler>
 800486e:	4603      	mov	r3, r0
 8004870:	0adb      	lsrs	r3, r3, #11
 8004872:	4a03      	ldr	r2, [pc, #12]	; (8004880 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004878:	fa24 f303 	lsr.w	r3, r4, r3
}
 800487c:	4618      	mov	r0, r3
 800487e:	bd98      	pop	{r3, r4, r7, pc}
 8004880:	0800a3ec 	.word	0x0800a3ec

08004884 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004884:	b590      	push	{r4, r7, lr}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	091b      	lsrs	r3, r3, #4
 8004890:	f003 030f 	and.w	r3, r3, #15
 8004894:	4a10      	ldr	r2, [pc, #64]	; (80048d8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8004896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800489a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800489c:	f7ff f9b2 	bl	8003c04 <LL_RCC_GetAHB3Prescaler>
 80048a0:	4603      	mov	r3, r0
 80048a2:	091b      	lsrs	r3, r3, #4
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	4a0c      	ldr	r2, [pc, #48]	; (80048dc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80048aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	4a09      	ldr	r2, [pc, #36]	; (80048e0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80048ba:	fba2 2303 	umull	r2, r3, r2, r3
 80048be:	0c9c      	lsrs	r4, r3, #18
 80048c0:	f7fe ffc6 	bl	8003850 <HAL_PWREx_GetVoltageRange>
 80048c4:	4603      	mov	r3, r0
 80048c6:	4619      	mov	r1, r3
 80048c8:	4620      	mov	r0, r4
 80048ca:	f000 f80b 	bl	80048e4 <RCC_SetFlashLatency>
 80048ce:	4603      	mov	r3, r0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd90      	pop	{r4, r7, pc}
 80048d8:	0800a40c 	.word	0x0800a40c
 80048dc:	0800a3ac 	.word	0x0800a3ac
 80048e0:	431bde83 	.word	0x431bde83

080048e4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08e      	sub	sp, #56	; 0x38
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80048ee:	4a3a      	ldr	r2, [pc, #232]	; (80049d8 <RCC_SetFlashLatency+0xf4>)
 80048f0:	f107 0320 	add.w	r3, r7, #32
 80048f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80048f8:	6018      	str	r0, [r3, #0]
 80048fa:	3304      	adds	r3, #4
 80048fc:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80048fe:	4a37      	ldr	r2, [pc, #220]	; (80049dc <RCC_SetFlashLatency+0xf8>)
 8004900:	f107 0318 	add.w	r3, r7, #24
 8004904:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004908:	6018      	str	r0, [r3, #0]
 800490a:	3304      	adds	r3, #4
 800490c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800490e:	4a34      	ldr	r2, [pc, #208]	; (80049e0 <RCC_SetFlashLatency+0xfc>)
 8004910:	f107 030c 	add.w	r3, r7, #12
 8004914:	ca07      	ldmia	r2, {r0, r1, r2}
 8004916:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800491a:	2300      	movs	r3, #0
 800491c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004924:	d11b      	bne.n	800495e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004926:	2300      	movs	r3, #0
 8004928:	633b      	str	r3, [r7, #48]	; 0x30
 800492a:	e014      	b.n	8004956 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800492c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	3338      	adds	r3, #56	; 0x38
 8004932:	443b      	add	r3, r7
 8004934:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004938:	461a      	mov	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4293      	cmp	r3, r2
 800493e:	d807      	bhi.n	8004950 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	3338      	adds	r3, #56	; 0x38
 8004946:	443b      	add	r3, r7
 8004948:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800494c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800494e:	e021      	b.n	8004994 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004952:	3301      	adds	r3, #1
 8004954:	633b      	str	r3, [r7, #48]	; 0x30
 8004956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004958:	2b02      	cmp	r3, #2
 800495a:	d9e7      	bls.n	800492c <RCC_SetFlashLatency+0x48>
 800495c:	e01a      	b.n	8004994 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800495e:	2300      	movs	r3, #0
 8004960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004962:	e014      	b.n	800498e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	3338      	adds	r3, #56	; 0x38
 800496a:	443b      	add	r3, r7
 800496c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8004970:	461a      	mov	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4293      	cmp	r3, r2
 8004976:	d807      	bhi.n	8004988 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	3338      	adds	r3, #56	; 0x38
 800497e:	443b      	add	r3, r7
 8004980:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004984:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004986:	e005      	b.n	8004994 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498a:	3301      	adds	r3, #1
 800498c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004990:	2b02      	cmp	r3, #2
 8004992:	d9e7      	bls.n	8004964 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004994:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <RCC_SetFlashLatency+0x100>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f023 0207 	bic.w	r2, r3, #7
 800499c:	4911      	ldr	r1, [pc, #68]	; (80049e4 <RCC_SetFlashLatency+0x100>)
 800499e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a0:	4313      	orrs	r3, r2
 80049a2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80049a4:	f7fd fed4 	bl	8002750 <HAL_GetTick>
 80049a8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80049aa:	e008      	b.n	80049be <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80049ac:	f7fd fed0 	bl	8002750 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e007      	b.n	80049ce <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80049be:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <RCC_SetFlashLatency+0x100>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d1ef      	bne.n	80049ac <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3738      	adds	r7, #56	; 0x38
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	0800a390 	.word	0x0800a390
 80049dc:	0800a398 	.word	0x0800a398
 80049e0:	0800a3a0 	.word	0x0800a3a0
 80049e4:	58004000 	.word	0x58004000

080049e8 <LL_RCC_LSE_IsReady>:
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80049ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d101      	bne.n	8004a00 <LL_RCC_LSE_IsReady+0x18>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <LL_RCC_LSE_IsReady+0x1a>
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr

08004a0a <LL_RCC_SetUSARTClockSource>:
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	0c1b      	lsrs	r3, r3, #16
 8004a1e:	43db      	mvns	r3, r3
 8004a20:	401a      	ands	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bc80      	pop	{r7}
 8004a38:	4770      	bx	lr

08004a3a <LL_RCC_SetI2SClockSource>:
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr

08004a64 <LL_RCC_SetLPUARTClockSource>:
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bc80      	pop	{r7}
 8004a8c:	4770      	bx	lr

08004a8e <LL_RCC_SetI2CClockSource>:
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	091b      	lsrs	r3, r3, #4
 8004aa2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	401a      	ands	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004ab2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bc80      	pop	{r7}
 8004ac4:	4770      	bx	lr

08004ac6 <LL_RCC_SetLPTIMClockSource>:
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	0c1b      	lsrs	r3, r3, #16
 8004ada:	041b      	lsls	r3, r3, #16
 8004adc:	43db      	mvns	r3, r3
 8004ade:	401a      	ands	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	041b      	lsls	r3, r3, #16
 8004ae4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr

08004af8 <LL_RCC_SetRNGClockSource>:
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b08:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004b0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr

08004b22 <LL_RCC_SetADCClockSource>:
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr

08004b4c <LL_RCC_SetRTCClockSource>:
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bc80      	pop	{r7}
 8004b74:	4770      	bx	lr

08004b76 <LL_RCC_GetRTCClockSource>:
{
 8004b76:	b480      	push	{r7}
 8004b78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bc80      	pop	{r7}
 8004b8c:	4770      	bx	lr

08004b8e <LL_RCC_ForceBackupDomainReset>:
{
 8004b8e:	b480      	push	{r7}
 8004b90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004ba6:	bf00      	nop
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bc80      	pop	{r7}
 8004bac:	4770      	bx	lr

08004bae <LL_RCC_ReleaseBackupDomainReset>:
{
 8004bae:	b480      	push	{r7}
 8004bb0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004bc6:	bf00      	nop
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc80      	pop	{r7}
 8004bcc:	4770      	bx	lr
	...

08004bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004bdc:	2300      	movs	r3, #0
 8004bde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004be0:	2300      	movs	r3, #0
 8004be2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d058      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8004bf0:	f7fe fe20 	bl	8003834 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bf4:	f7fd fdac 	bl	8002750 <HAL_GetTick>
 8004bf8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004bfa:	e009      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bfc:	f7fd fda8 	bl	8002750 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d902      	bls.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	74fb      	strb	r3, [r7, #19]
        break;
 8004c0e:	e006      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004c10:	4b7b      	ldr	r3, [pc, #492]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c1c:	d1ee      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8004c1e:	7cfb      	ldrb	r3, [r7, #19]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d13c      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004c24:	f7ff ffa7 	bl	8004b76 <LL_RCC_GetRTCClockSource>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d00f      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c3e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c40:	f7ff ffa5 	bl	8004b8e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c44:	f7ff ffb3 	bl	8004bae <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d014      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5c:	f7fd fd78 	bl	8002750 <HAL_GetTick>
 8004c60:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8004c62:	e00b      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c64:	f7fd fd74 	bl	8002750 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d902      	bls.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	74fb      	strb	r3, [r7, #19]
            break;
 8004c7a:	e004      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8004c7c:	f7ff feb4 	bl	80049e8 <LL_RCC_LSE_IsReady>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d1ee      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8004c86:	7cfb      	ldrb	r3, [r7, #19]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d105      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7ff ff5b 	bl	8004b4c <LL_RCC_SetRTCClockSource>
 8004c96:	e004      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c98:	7cfb      	ldrb	r3, [r7, #19]
 8004c9a:	74bb      	strb	r3, [r7, #18]
 8004c9c:	e001      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ca0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d004      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff fea9 	bl	8004a0a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d004      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7ff fe9e 	bl	8004a0a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d004      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff fec0 	bl	8004a64 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d004      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff fee6 	bl	8004ac6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d004      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff fedb 	bl	8004ac6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d004      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff fed0 	bl	8004ac6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d004      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7ff fea9 	bl	8004a8e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d004      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff fe9e 	bl	8004a8e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d004      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff fe93 	bl	8004a8e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0310 	and.w	r3, r3, #16
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d011      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff fe5e 	bl	8004a3a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d86:	d107      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d96:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d010      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff fea5 	bl	8004af8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d107      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dc4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d011      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff fea3 	bl	8004b22 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004de4:	d107      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004df6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3718      	adds	r7, #24
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	58000400 	.word	0x58000400

08004e04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e0c6      	b.n	8004fa4 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d108      	bne.n	8004e30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e26:	d009      	beq.n	8004e3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	61da      	str	r2, [r3, #28]
 8004e2e:	e005      	b.n	8004e3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d106      	bne.n	8004e56 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7fd fa57 	bl	8002304 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e6c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e76:	d902      	bls.n	8004e7e <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	e002      	b.n	8004e84 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e82:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e8c:	d007      	beq.n	8004e9e <HAL_SPI_Init+0x9a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e96:	d002      	beq.n	8004e9e <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee0:	ea42 0103 	orr.w	r1, r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004efc:	d11b      	bne.n	8004f36 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10b      	bne.n	8004f1e <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f0e:	d903      	bls.n	8004f18 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30
 8004f16:	e002      	b.n	8004f1e <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d107      	bne.n	8004f36 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	0c1b      	lsrs	r3, r3, #16
 8004f3c:	f003 0204 	and.w	r2, r3, #4
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f4e:	f003 0308 	and.w	r3, r3, #8
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004f5c:	ea42 0103 	orr.w	r1, r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f76:	d105      	bne.n	8004f84 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	b292      	uxth	r2, r2
 8004f82:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	69da      	ldr	r2, [r3, #28]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f92:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <LL_RCC_GetUSARTClockSource>:
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	401a      	ands	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	041b      	lsls	r3, r3, #16
 8004fc4:	4313      	orrs	r3, r2
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bc80      	pop	{r7}
 8004fce:	4770      	bx	lr

08004fd0 <LL_RCC_GetLPUARTClockSource>:
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4013      	ands	r3, r2
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bc80      	pop	{r7}
 8004fec:	4770      	bx	lr

08004fee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b082      	sub	sp, #8
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e042      	b.n	8005086 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005006:	2b00      	cmp	r3, #0
 8005008:	d106      	bne.n	8005018 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7fd f9bc 	bl	8002390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2224      	movs	r2, #36	; 0x24
 800501c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0201 	bic.w	r2, r2, #1
 800502e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f82d 	bl	8005090 <UART_SetConfig>
 8005036:	4603      	mov	r3, r0
 8005038:	2b01      	cmp	r3, #1
 800503a:	d101      	bne.n	8005040 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e022      	b.n	8005086 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fa95 	bl	8005578 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800505c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800506c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f042 0201 	orr.w	r2, r2, #1
 800507c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fb1b 	bl	80056ba <UART_CheckIdleState>
 8005084:	4603      	mov	r3, r0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005094:	b08c      	sub	sp, #48	; 0x30
 8005096:	af00      	add	r7, sp, #0
 8005098:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	431a      	orrs	r2, r3
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	431a      	orrs	r2, r3
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	4b94      	ldr	r3, [pc, #592]	; (8005310 <UART_SetConfig+0x280>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050c8:	430b      	orrs	r3, r1
 80050ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a89      	ldr	r2, [pc, #548]	; (8005314 <UART_SetConfig+0x284>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d004      	beq.n	80050fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050f8:	4313      	orrs	r3, r2
 80050fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005106:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	6812      	ldr	r2, [r2, #0]
 800510e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005110:	430b      	orrs	r3, r1
 8005112:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511a:	f023 010f 	bic.w	r1, r3, #15
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a7a      	ldr	r2, [pc, #488]	; (8005318 <UART_SetConfig+0x288>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d127      	bne.n	8005184 <UART_SetConfig+0xf4>
 8005134:	2003      	movs	r0, #3
 8005136:	f7ff ff39 	bl	8004fac <LL_RCC_GetUSARTClockSource>
 800513a:	4603      	mov	r3, r0
 800513c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005140:	2b03      	cmp	r3, #3
 8005142:	d81b      	bhi.n	800517c <UART_SetConfig+0xec>
 8005144:	a201      	add	r2, pc, #4	; (adr r2, 800514c <UART_SetConfig+0xbc>)
 8005146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514a:	bf00      	nop
 800514c:	0800515d 	.word	0x0800515d
 8005150:	0800516d 	.word	0x0800516d
 8005154:	08005165 	.word	0x08005165
 8005158:	08005175 	.word	0x08005175
 800515c:	2301      	movs	r3, #1
 800515e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005162:	e080      	b.n	8005266 <UART_SetConfig+0x1d6>
 8005164:	2302      	movs	r3, #2
 8005166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800516a:	e07c      	b.n	8005266 <UART_SetConfig+0x1d6>
 800516c:	2304      	movs	r3, #4
 800516e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005172:	e078      	b.n	8005266 <UART_SetConfig+0x1d6>
 8005174:	2308      	movs	r3, #8
 8005176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800517a:	e074      	b.n	8005266 <UART_SetConfig+0x1d6>
 800517c:	2310      	movs	r3, #16
 800517e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005182:	e070      	b.n	8005266 <UART_SetConfig+0x1d6>
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a64      	ldr	r2, [pc, #400]	; (800531c <UART_SetConfig+0x28c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d138      	bne.n	8005200 <UART_SetConfig+0x170>
 800518e:	200c      	movs	r0, #12
 8005190:	f7ff ff0c 	bl	8004fac <LL_RCC_GetUSARTClockSource>
 8005194:	4603      	mov	r3, r0
 8005196:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800519a:	2b0c      	cmp	r3, #12
 800519c:	d82c      	bhi.n	80051f8 <UART_SetConfig+0x168>
 800519e:	a201      	add	r2, pc, #4	; (adr r2, 80051a4 <UART_SetConfig+0x114>)
 80051a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a4:	080051d9 	.word	0x080051d9
 80051a8:	080051f9 	.word	0x080051f9
 80051ac:	080051f9 	.word	0x080051f9
 80051b0:	080051f9 	.word	0x080051f9
 80051b4:	080051e9 	.word	0x080051e9
 80051b8:	080051f9 	.word	0x080051f9
 80051bc:	080051f9 	.word	0x080051f9
 80051c0:	080051f9 	.word	0x080051f9
 80051c4:	080051e1 	.word	0x080051e1
 80051c8:	080051f9 	.word	0x080051f9
 80051cc:	080051f9 	.word	0x080051f9
 80051d0:	080051f9 	.word	0x080051f9
 80051d4:	080051f1 	.word	0x080051f1
 80051d8:	2300      	movs	r3, #0
 80051da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051de:	e042      	b.n	8005266 <UART_SetConfig+0x1d6>
 80051e0:	2302      	movs	r3, #2
 80051e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051e6:	e03e      	b.n	8005266 <UART_SetConfig+0x1d6>
 80051e8:	2304      	movs	r3, #4
 80051ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ee:	e03a      	b.n	8005266 <UART_SetConfig+0x1d6>
 80051f0:	2308      	movs	r3, #8
 80051f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051f6:	e036      	b.n	8005266 <UART_SetConfig+0x1d6>
 80051f8:	2310      	movs	r3, #16
 80051fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051fe:	e032      	b.n	8005266 <UART_SetConfig+0x1d6>
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a43      	ldr	r2, [pc, #268]	; (8005314 <UART_SetConfig+0x284>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d12a      	bne.n	8005260 <UART_SetConfig+0x1d0>
 800520a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800520e:	f7ff fedf 	bl	8004fd0 <LL_RCC_GetLPUARTClockSource>
 8005212:	4603      	mov	r3, r0
 8005214:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005218:	d01a      	beq.n	8005250 <UART_SetConfig+0x1c0>
 800521a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800521e:	d81b      	bhi.n	8005258 <UART_SetConfig+0x1c8>
 8005220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005224:	d00c      	beq.n	8005240 <UART_SetConfig+0x1b0>
 8005226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800522a:	d815      	bhi.n	8005258 <UART_SetConfig+0x1c8>
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <UART_SetConfig+0x1a8>
 8005230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005234:	d008      	beq.n	8005248 <UART_SetConfig+0x1b8>
 8005236:	e00f      	b.n	8005258 <UART_SetConfig+0x1c8>
 8005238:	2300      	movs	r3, #0
 800523a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800523e:	e012      	b.n	8005266 <UART_SetConfig+0x1d6>
 8005240:	2302      	movs	r3, #2
 8005242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005246:	e00e      	b.n	8005266 <UART_SetConfig+0x1d6>
 8005248:	2304      	movs	r3, #4
 800524a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800524e:	e00a      	b.n	8005266 <UART_SetConfig+0x1d6>
 8005250:	2308      	movs	r3, #8
 8005252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005256:	e006      	b.n	8005266 <UART_SetConfig+0x1d6>
 8005258:	2310      	movs	r3, #16
 800525a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800525e:	e002      	b.n	8005266 <UART_SetConfig+0x1d6>
 8005260:	2310      	movs	r3, #16
 8005262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a2a      	ldr	r2, [pc, #168]	; (8005314 <UART_SetConfig+0x284>)
 800526c:	4293      	cmp	r3, r2
 800526e:	f040 80a4 	bne.w	80053ba <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005272:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005276:	2b08      	cmp	r3, #8
 8005278:	d823      	bhi.n	80052c2 <UART_SetConfig+0x232>
 800527a:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <UART_SetConfig+0x1f0>)
 800527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005280:	080052a5 	.word	0x080052a5
 8005284:	080052c3 	.word	0x080052c3
 8005288:	080052ad 	.word	0x080052ad
 800528c:	080052c3 	.word	0x080052c3
 8005290:	080052b3 	.word	0x080052b3
 8005294:	080052c3 	.word	0x080052c3
 8005298:	080052c3 	.word	0x080052c3
 800529c:	080052c3 	.word	0x080052c3
 80052a0:	080052bb 	.word	0x080052bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052a4:	f7ff faca 	bl	800483c <HAL_RCC_GetPCLK1Freq>
 80052a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052aa:	e010      	b.n	80052ce <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052ac:	4b1c      	ldr	r3, [pc, #112]	; (8005320 <UART_SetConfig+0x290>)
 80052ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052b0:	e00d      	b.n	80052ce <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052b2:	f7ff fa0f 	bl	80046d4 <HAL_RCC_GetSysClockFreq>
 80052b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052b8:	e009      	b.n	80052ce <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052c0:	e005      	b.n	80052ce <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80052cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 8137 	beq.w	8005544 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	4a12      	ldr	r2, [pc, #72]	; (8005324 <UART_SetConfig+0x294>)
 80052dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052e0:	461a      	mov	r2, r3
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80052e8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	4613      	mov	r3, r2
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	4413      	add	r3, r2
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d305      	bcc.n	8005306 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	429a      	cmp	r2, r3
 8005304:	d910      	bls.n	8005328 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800530c:	e11a      	b.n	8005544 <UART_SetConfig+0x4b4>
 800530e:	bf00      	nop
 8005310:	cfff69f3 	.word	0xcfff69f3
 8005314:	40008000 	.word	0x40008000
 8005318:	40013800 	.word	0x40013800
 800531c:	40004400 	.word	0x40004400
 8005320:	00f42400 	.word	0x00f42400
 8005324:	0800a44c 	.word	0x0800a44c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	2200      	movs	r2, #0
 800532c:	60bb      	str	r3, [r7, #8]
 800532e:	60fa      	str	r2, [r7, #12]
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	4a8e      	ldr	r2, [pc, #568]	; (8005570 <UART_SetConfig+0x4e0>)
 8005336:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800533a:	b29b      	uxth	r3, r3
 800533c:	2200      	movs	r2, #0
 800533e:	603b      	str	r3, [r7, #0]
 8005340:	607a      	str	r2, [r7, #4]
 8005342:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005346:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800534a:	f7fb fcc5 	bl	8000cd8 <__aeabi_uldivmod>
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	4610      	mov	r0, r2
 8005354:	4619      	mov	r1, r3
 8005356:	f04f 0200 	mov.w	r2, #0
 800535a:	f04f 0300 	mov.w	r3, #0
 800535e:	020b      	lsls	r3, r1, #8
 8005360:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005364:	0202      	lsls	r2, r0, #8
 8005366:	6979      	ldr	r1, [r7, #20]
 8005368:	6849      	ldr	r1, [r1, #4]
 800536a:	0849      	lsrs	r1, r1, #1
 800536c:	2000      	movs	r0, #0
 800536e:	460c      	mov	r4, r1
 8005370:	4605      	mov	r5, r0
 8005372:	eb12 0804 	adds.w	r8, r2, r4
 8005376:	eb43 0905 	adc.w	r9, r3, r5
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	469a      	mov	sl, r3
 8005382:	4693      	mov	fp, r2
 8005384:	4652      	mov	r2, sl
 8005386:	465b      	mov	r3, fp
 8005388:	4640      	mov	r0, r8
 800538a:	4649      	mov	r1, r9
 800538c:	f7fb fca4 	bl	8000cd8 <__aeabi_uldivmod>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	4613      	mov	r3, r2
 8005396:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800539e:	d308      	bcc.n	80053b2 <UART_SetConfig+0x322>
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053a6:	d204      	bcs.n	80053b2 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6a3a      	ldr	r2, [r7, #32]
 80053ae:	60da      	str	r2, [r3, #12]
 80053b0:	e0c8      	b.n	8005544 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80053b8:	e0c4      	b.n	8005544 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053c2:	d167      	bne.n	8005494 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80053c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d828      	bhi.n	800541e <UART_SetConfig+0x38e>
 80053cc:	a201      	add	r2, pc, #4	; (adr r2, 80053d4 <UART_SetConfig+0x344>)
 80053ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d2:	bf00      	nop
 80053d4:	080053f9 	.word	0x080053f9
 80053d8:	08005401 	.word	0x08005401
 80053dc:	08005409 	.word	0x08005409
 80053e0:	0800541f 	.word	0x0800541f
 80053e4:	0800540f 	.word	0x0800540f
 80053e8:	0800541f 	.word	0x0800541f
 80053ec:	0800541f 	.word	0x0800541f
 80053f0:	0800541f 	.word	0x0800541f
 80053f4:	08005417 	.word	0x08005417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053f8:	f7ff fa20 	bl	800483c <HAL_RCC_GetPCLK1Freq>
 80053fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053fe:	e014      	b.n	800542a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005400:	f7ff fa2e 	bl	8004860 <HAL_RCC_GetPCLK2Freq>
 8005404:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005406:	e010      	b.n	800542a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005408:	4b5a      	ldr	r3, [pc, #360]	; (8005574 <UART_SetConfig+0x4e4>)
 800540a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800540c:	e00d      	b.n	800542a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800540e:	f7ff f961 	bl	80046d4 <HAL_RCC_GetSysClockFreq>
 8005412:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005414:	e009      	b.n	800542a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800541a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800541c:	e005      	b.n	800542a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800541e:	2300      	movs	r3, #0
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005428:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 8089 	beq.w	8005544 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	4a4e      	ldr	r2, [pc, #312]	; (8005570 <UART_SetConfig+0x4e0>)
 8005438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800543c:	461a      	mov	r2, r3
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	fbb3 f3f2 	udiv	r3, r3, r2
 8005444:	005a      	lsls	r2, r3, #1
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	085b      	lsrs	r3, r3, #1
 800544c:	441a      	add	r2, r3
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	fbb2 f3f3 	udiv	r3, r2, r3
 8005456:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	2b0f      	cmp	r3, #15
 800545c:	d916      	bls.n	800548c <UART_SetConfig+0x3fc>
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005464:	d212      	bcs.n	800548c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	b29b      	uxth	r3, r3
 800546a:	f023 030f 	bic.w	r3, r3, #15
 800546e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	085b      	lsrs	r3, r3, #1
 8005474:	b29b      	uxth	r3, r3
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	b29a      	uxth	r2, r3
 800547c:	8bfb      	ldrh	r3, [r7, #30]
 800547e:	4313      	orrs	r3, r2
 8005480:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	8bfa      	ldrh	r2, [r7, #30]
 8005488:	60da      	str	r2, [r3, #12]
 800548a:	e05b      	b.n	8005544 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005492:	e057      	b.n	8005544 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005494:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005498:	2b08      	cmp	r3, #8
 800549a:	d828      	bhi.n	80054ee <UART_SetConfig+0x45e>
 800549c:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <UART_SetConfig+0x414>)
 800549e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a2:	bf00      	nop
 80054a4:	080054c9 	.word	0x080054c9
 80054a8:	080054d1 	.word	0x080054d1
 80054ac:	080054d9 	.word	0x080054d9
 80054b0:	080054ef 	.word	0x080054ef
 80054b4:	080054df 	.word	0x080054df
 80054b8:	080054ef 	.word	0x080054ef
 80054bc:	080054ef 	.word	0x080054ef
 80054c0:	080054ef 	.word	0x080054ef
 80054c4:	080054e7 	.word	0x080054e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054c8:	f7ff f9b8 	bl	800483c <HAL_RCC_GetPCLK1Freq>
 80054cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054ce:	e014      	b.n	80054fa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054d0:	f7ff f9c6 	bl	8004860 <HAL_RCC_GetPCLK2Freq>
 80054d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054d6:	e010      	b.n	80054fa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054d8:	4b26      	ldr	r3, [pc, #152]	; (8005574 <UART_SetConfig+0x4e4>)
 80054da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054dc:	e00d      	b.n	80054fa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054de:	f7ff f8f9 	bl	80046d4 <HAL_RCC_GetSysClockFreq>
 80054e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054e4:	e009      	b.n	80054fa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054ec:	e005      	b.n	80054fa <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80054f8:	bf00      	nop
    }

    if (pclk != 0U)
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d021      	beq.n	8005544 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	4a1a      	ldr	r2, [pc, #104]	; (8005570 <UART_SetConfig+0x4e0>)
 8005506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800550a:	461a      	mov	r2, r3
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	085b      	lsrs	r3, r3, #1
 8005518:	441a      	add	r2, r3
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005522:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	2b0f      	cmp	r3, #15
 8005528:	d909      	bls.n	800553e <UART_SetConfig+0x4ae>
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005530:	d205      	bcs.n	800553e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	b29a      	uxth	r2, r3
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60da      	str	r2, [r3, #12]
 800553c:	e002      	b.n	8005544 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	2201      	movs	r2, #1
 8005548:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	2201      	movs	r2, #1
 8005550:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2200      	movs	r2, #0
 8005558:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2200      	movs	r2, #0
 800555e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005560:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005564:	4618      	mov	r0, r3
 8005566:	3730      	adds	r7, #48	; 0x30
 8005568:	46bd      	mov	sp, r7
 800556a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800556e:	bf00      	nop
 8005570:	0800a44c 	.word	0x0800a44c
 8005574:	00f42400 	.word	0x00f42400

08005578 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00a      	beq.n	80055a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00a      	beq.n	80055e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ea:	f003 0308 	and.w	r3, r3, #8
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560c:	f003 0310 	and.w	r3, r3, #16
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005654:	2b00      	cmp	r3, #0
 8005656:	d01a      	beq.n	800568e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005676:	d10a      	bne.n	800568e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	605a      	str	r2, [r3, #4]
  }
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bc80      	pop	{r7}
 80056b8:	4770      	bx	lr

080056ba <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b086      	sub	sp, #24
 80056be:	af02      	add	r7, sp, #8
 80056c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056ca:	f7fd f841 	bl	8002750 <HAL_GetTick>
 80056ce:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d10e      	bne.n	80056fc <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f832 	bl	8005756 <UART_WaitOnFlagUntilTimeout>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e028      	b.n	800574e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0304 	and.w	r3, r3, #4
 8005706:	2b04      	cmp	r3, #4
 8005708:	d10e      	bne.n	8005728 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800570a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f81c 	bl	8005756 <UART_WaitOnFlagUntilTimeout>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e012      	b.n	800574e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2220      	movs	r2, #32
 800572c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2220      	movs	r2, #32
 8005734:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b09c      	sub	sp, #112	; 0x70
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	603b      	str	r3, [r7, #0]
 8005762:	4613      	mov	r3, r2
 8005764:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005766:	e0a9      	b.n	80058bc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800576a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576e:	f000 80a5 	beq.w	80058bc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005772:	f7fc ffed 	bl	8002750 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800577e:	429a      	cmp	r2, r3
 8005780:	d302      	bcc.n	8005788 <UART_WaitOnFlagUntilTimeout+0x32>
 8005782:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005784:	2b00      	cmp	r3, #0
 8005786:	d140      	bne.n	800580a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005790:	e853 3f00 	ldrex	r3, [r3]
 8005794:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005798:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800579c:	667b      	str	r3, [r7, #100]	; 0x64
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057a8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057ae:	e841 2300 	strex	r3, r2, [r1]
 80057b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80057b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1e6      	bne.n	8005788 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3308      	adds	r3, #8
 80057c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057cc:	f023 0301 	bic.w	r3, r3, #1
 80057d0:	663b      	str	r3, [r7, #96]	; 0x60
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3308      	adds	r3, #8
 80057d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057da:	64ba      	str	r2, [r7, #72]	; 0x48
 80057dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e5      	bne.n	80057ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2220      	movs	r2, #32
 80057f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e069      	b.n	80058de <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b00      	cmp	r3, #0
 8005816:	d051      	beq.n	80058bc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005826:	d149      	bne.n	80058bc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005830:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583a:	e853 3f00 	ldrex	r3, [r3]
 800583e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005846:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	461a      	mov	r2, r3
 800584e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005850:	637b      	str	r3, [r7, #52]	; 0x34
 8005852:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005854:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005858:	e841 2300 	strex	r3, r2, [r1]
 800585c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800585e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1e6      	bne.n	8005832 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3308      	adds	r3, #8
 800586a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	e853 3f00 	ldrex	r3, [r3]
 8005872:	613b      	str	r3, [r7, #16]
   return(result);
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f023 0301 	bic.w	r3, r3, #1
 800587a:	66bb      	str	r3, [r7, #104]	; 0x68
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3308      	adds	r3, #8
 8005882:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005884:	623a      	str	r2, [r7, #32]
 8005886:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005888:	69f9      	ldr	r1, [r7, #28]
 800588a:	6a3a      	ldr	r2, [r7, #32]
 800588c:	e841 2300 	strex	r3, r2, [r1]
 8005890:	61bb      	str	r3, [r7, #24]
   return(result);
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1e5      	bne.n	8005864 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2220      	movs	r2, #32
 800589c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2220      	movs	r2, #32
 80058a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e010      	b.n	80058de <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69da      	ldr	r2, [r3, #28]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	4013      	ands	r3, r2
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	bf0c      	ite	eq
 80058cc:	2301      	moveq	r3, #1
 80058ce:	2300      	movne	r3, #0
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	461a      	mov	r2, r3
 80058d4:	79fb      	ldrb	r3, [r7, #7]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	f43f af46 	beq.w	8005768 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3770      	adds	r7, #112	; 0x70
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b085      	sub	sp, #20
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_UARTEx_DisableFifoMode+0x16>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e027      	b.n	800594c <HAL_UARTEx_DisableFifoMode+0x66>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2224      	movs	r2, #36	; 0x24
 8005908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0201 	bic.w	r2, r2, #1
 8005922:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800592a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2220      	movs	r2, #32
 800593e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	bc80      	pop	{r7}
 8005954:	4770      	bx	lr

08005956 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005966:	2b01      	cmp	r3, #1
 8005968:	d101      	bne.n	800596e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800596a:	2302      	movs	r3, #2
 800596c:	e02d      	b.n	80059ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2224      	movs	r2, #36	; 0x24
 800597a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0201 	bic.w	r2, r2, #1
 8005994:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f850 	bl	8005a50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2220      	movs	r2, #32
 80059bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d101      	bne.n	80059ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059e6:	2302      	movs	r3, #2
 80059e8:	e02d      	b.n	8005a46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2224      	movs	r2, #36	; 0x24
 80059f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 0201 	bic.w	r2, r2, #1
 8005a10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f812 	bl	8005a50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
	...

08005a50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d108      	bne.n	8005a72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a70:	e031      	b.n	8005ad6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a72:	2308      	movs	r3, #8
 8005a74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a76:	2308      	movs	r3, #8
 8005a78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	0e5b      	lsrs	r3, r3, #25
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	f003 0307 	and.w	r3, r3, #7
 8005a88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	0f5b      	lsrs	r3, r3, #29
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a9a:	7bbb      	ldrb	r3, [r7, #14]
 8005a9c:	7b3a      	ldrb	r2, [r7, #12]
 8005a9e:	4910      	ldr	r1, [pc, #64]	; (8005ae0 <UARTEx_SetNbDataToProcess+0x90>)
 8005aa0:	5c8a      	ldrb	r2, [r1, r2]
 8005aa2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005aa6:	7b3a      	ldrb	r2, [r7, #12]
 8005aa8:	490e      	ldr	r1, [pc, #56]	; (8005ae4 <UARTEx_SetNbDataToProcess+0x94>)
 8005aaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005aac:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
 8005aba:	7b7a      	ldrb	r2, [r7, #13]
 8005abc:	4908      	ldr	r1, [pc, #32]	; (8005ae0 <UARTEx_SetNbDataToProcess+0x90>)
 8005abe:	5c8a      	ldrb	r2, [r1, r2]
 8005ac0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ac4:	7b7a      	ldrb	r2, [r7, #13]
 8005ac6:	4907      	ldr	r1, [pc, #28]	; (8005ae4 <UARTEx_SetNbDataToProcess+0x94>)
 8005ac8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005aca:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005ad6:	bf00      	nop
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bc80      	pop	{r7}
 8005ade:	4770      	bx	lr
 8005ae0:	0800a464 	.word	0x0800a464
 8005ae4:	0800a46c 	.word	0x0800a46c

08005ae8 <__errno>:
 8005ae8:	4b01      	ldr	r3, [pc, #4]	; (8005af0 <__errno+0x8>)
 8005aea:	6818      	ldr	r0, [r3, #0]
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	2000000c 	.word	0x2000000c

08005af4 <__libc_init_array>:
 8005af4:	b570      	push	{r4, r5, r6, lr}
 8005af6:	4d0d      	ldr	r5, [pc, #52]	; (8005b2c <__libc_init_array+0x38>)
 8005af8:	4c0d      	ldr	r4, [pc, #52]	; (8005b30 <__libc_init_array+0x3c>)
 8005afa:	1b64      	subs	r4, r4, r5
 8005afc:	10a4      	asrs	r4, r4, #2
 8005afe:	2600      	movs	r6, #0
 8005b00:	42a6      	cmp	r6, r4
 8005b02:	d109      	bne.n	8005b18 <__libc_init_array+0x24>
 8005b04:	4d0b      	ldr	r5, [pc, #44]	; (8005b34 <__libc_init_array+0x40>)
 8005b06:	4c0c      	ldr	r4, [pc, #48]	; (8005b38 <__libc_init_array+0x44>)
 8005b08:	f004 fc34 	bl	800a374 <_init>
 8005b0c:	1b64      	subs	r4, r4, r5
 8005b0e:	10a4      	asrs	r4, r4, #2
 8005b10:	2600      	movs	r6, #0
 8005b12:	42a6      	cmp	r6, r4
 8005b14:	d105      	bne.n	8005b22 <__libc_init_array+0x2e>
 8005b16:	bd70      	pop	{r4, r5, r6, pc}
 8005b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b1c:	4798      	blx	r3
 8005b1e:	3601      	adds	r6, #1
 8005b20:	e7ee      	b.n	8005b00 <__libc_init_array+0xc>
 8005b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b26:	4798      	blx	r3
 8005b28:	3601      	adds	r6, #1
 8005b2a:	e7f2      	b.n	8005b12 <__libc_init_array+0x1e>
 8005b2c:	0800a924 	.word	0x0800a924
 8005b30:	0800a924 	.word	0x0800a924
 8005b34:	0800a924 	.word	0x0800a924
 8005b38:	0800a928 	.word	0x0800a928

08005b3c <memset>:
 8005b3c:	4402      	add	r2, r0
 8005b3e:	4603      	mov	r3, r0
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d100      	bne.n	8005b46 <memset+0xa>
 8005b44:	4770      	bx	lr
 8005b46:	f803 1b01 	strb.w	r1, [r3], #1
 8005b4a:	e7f9      	b.n	8005b40 <memset+0x4>

08005b4c <__cvt>:
 8005b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b50:	b088      	sub	sp, #32
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	461f      	mov	r7, r3
 8005b56:	4614      	mov	r4, r2
 8005b58:	bfb8      	it	lt
 8005b5a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005b5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b60:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005b62:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005b66:	bfb6      	itet	lt
 8005b68:	461f      	movlt	r7, r3
 8005b6a:	2300      	movge	r3, #0
 8005b6c:	232d      	movlt	r3, #45	; 0x2d
 8005b6e:	7013      	strb	r3, [r2, #0]
 8005b70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b72:	f023 0820 	bic.w	r8, r3, #32
 8005b76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b7a:	d005      	beq.n	8005b88 <__cvt+0x3c>
 8005b7c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005b80:	d100      	bne.n	8005b84 <__cvt+0x38>
 8005b82:	3501      	adds	r5, #1
 8005b84:	2302      	movs	r3, #2
 8005b86:	e000      	b.n	8005b8a <__cvt+0x3e>
 8005b88:	2303      	movs	r3, #3
 8005b8a:	aa07      	add	r2, sp, #28
 8005b8c:	9204      	str	r2, [sp, #16]
 8005b8e:	aa06      	add	r2, sp, #24
 8005b90:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005b94:	e9cd 3500 	strd	r3, r5, [sp]
 8005b98:	4622      	mov	r2, r4
 8005b9a:	463b      	mov	r3, r7
 8005b9c:	f001 fd78 	bl	8007690 <_dtoa_r>
 8005ba0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ba4:	4606      	mov	r6, r0
 8005ba6:	d102      	bne.n	8005bae <__cvt+0x62>
 8005ba8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005baa:	07db      	lsls	r3, r3, #31
 8005bac:	d522      	bpl.n	8005bf4 <__cvt+0xa8>
 8005bae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005bb2:	eb06 0905 	add.w	r9, r6, r5
 8005bb6:	d110      	bne.n	8005bda <__cvt+0x8e>
 8005bb8:	7833      	ldrb	r3, [r6, #0]
 8005bba:	2b30      	cmp	r3, #48	; 0x30
 8005bbc:	d10a      	bne.n	8005bd4 <__cvt+0x88>
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	4639      	mov	r1, r7
 8005bc6:	f7fa ff57 	bl	8000a78 <__aeabi_dcmpeq>
 8005bca:	b918      	cbnz	r0, 8005bd4 <__cvt+0x88>
 8005bcc:	f1c5 0501 	rsb	r5, r5, #1
 8005bd0:	f8ca 5000 	str.w	r5, [sl]
 8005bd4:	f8da 3000 	ldr.w	r3, [sl]
 8005bd8:	4499      	add	r9, r3
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2300      	movs	r3, #0
 8005bde:	4620      	mov	r0, r4
 8005be0:	4639      	mov	r1, r7
 8005be2:	f7fa ff49 	bl	8000a78 <__aeabi_dcmpeq>
 8005be6:	b108      	cbz	r0, 8005bec <__cvt+0xa0>
 8005be8:	f8cd 901c 	str.w	r9, [sp, #28]
 8005bec:	2230      	movs	r2, #48	; 0x30
 8005bee:	9b07      	ldr	r3, [sp, #28]
 8005bf0:	454b      	cmp	r3, r9
 8005bf2:	d307      	bcc.n	8005c04 <__cvt+0xb8>
 8005bf4:	9b07      	ldr	r3, [sp, #28]
 8005bf6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005bf8:	1b9b      	subs	r3, r3, r6
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	b008      	add	sp, #32
 8005c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c04:	1c59      	adds	r1, r3, #1
 8005c06:	9107      	str	r1, [sp, #28]
 8005c08:	701a      	strb	r2, [r3, #0]
 8005c0a:	e7f0      	b.n	8005bee <__cvt+0xa2>

08005c0c <__exponent>:
 8005c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2900      	cmp	r1, #0
 8005c12:	bfb8      	it	lt
 8005c14:	4249      	neglt	r1, r1
 8005c16:	f803 2b02 	strb.w	r2, [r3], #2
 8005c1a:	bfb4      	ite	lt
 8005c1c:	222d      	movlt	r2, #45	; 0x2d
 8005c1e:	222b      	movge	r2, #43	; 0x2b
 8005c20:	2909      	cmp	r1, #9
 8005c22:	7042      	strb	r2, [r0, #1]
 8005c24:	dd2a      	ble.n	8005c7c <__exponent+0x70>
 8005c26:	f10d 0407 	add.w	r4, sp, #7
 8005c2a:	46a4      	mov	ip, r4
 8005c2c:	270a      	movs	r7, #10
 8005c2e:	46a6      	mov	lr, r4
 8005c30:	460a      	mov	r2, r1
 8005c32:	fb91 f6f7 	sdiv	r6, r1, r7
 8005c36:	fb07 1516 	mls	r5, r7, r6, r1
 8005c3a:	3530      	adds	r5, #48	; 0x30
 8005c3c:	2a63      	cmp	r2, #99	; 0x63
 8005c3e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005c42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005c46:	4631      	mov	r1, r6
 8005c48:	dcf1      	bgt.n	8005c2e <__exponent+0x22>
 8005c4a:	3130      	adds	r1, #48	; 0x30
 8005c4c:	f1ae 0502 	sub.w	r5, lr, #2
 8005c50:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005c54:	1c44      	adds	r4, r0, #1
 8005c56:	4629      	mov	r1, r5
 8005c58:	4561      	cmp	r1, ip
 8005c5a:	d30a      	bcc.n	8005c72 <__exponent+0x66>
 8005c5c:	f10d 0209 	add.w	r2, sp, #9
 8005c60:	eba2 020e 	sub.w	r2, r2, lr
 8005c64:	4565      	cmp	r5, ip
 8005c66:	bf88      	it	hi
 8005c68:	2200      	movhi	r2, #0
 8005c6a:	4413      	add	r3, r2
 8005c6c:	1a18      	subs	r0, r3, r0
 8005c6e:	b003      	add	sp, #12
 8005c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c76:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005c7a:	e7ed      	b.n	8005c58 <__exponent+0x4c>
 8005c7c:	2330      	movs	r3, #48	; 0x30
 8005c7e:	3130      	adds	r1, #48	; 0x30
 8005c80:	7083      	strb	r3, [r0, #2]
 8005c82:	70c1      	strb	r1, [r0, #3]
 8005c84:	1d03      	adds	r3, r0, #4
 8005c86:	e7f1      	b.n	8005c6c <__exponent+0x60>

08005c88 <_printf_float>:
 8005c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c8c:	b091      	sub	sp, #68	; 0x44
 8005c8e:	460c      	mov	r4, r1
 8005c90:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005c94:	4616      	mov	r6, r2
 8005c96:	461f      	mov	r7, r3
 8005c98:	4605      	mov	r5, r0
 8005c9a:	f002 fe4d 	bl	8008938 <_localeconv_r>
 8005c9e:	6803      	ldr	r3, [r0, #0]
 8005ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fa fa6c 	bl	8000180 <strlen>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	930e      	str	r3, [sp, #56]	; 0x38
 8005cac:	f8d8 3000 	ldr.w	r3, [r8]
 8005cb0:	900a      	str	r0, [sp, #40]	; 0x28
 8005cb2:	3307      	adds	r3, #7
 8005cb4:	f023 0307 	bic.w	r3, r3, #7
 8005cb8:	f103 0208 	add.w	r2, r3, #8
 8005cbc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005cc0:	f8d4 b000 	ldr.w	fp, [r4]
 8005cc4:	f8c8 2000 	str.w	r2, [r8]
 8005cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ccc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005cd0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005cd4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005cd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005cdc:	4b9c      	ldr	r3, [pc, #624]	; (8005f50 <_printf_float+0x2c8>)
 8005cde:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce2:	4640      	mov	r0, r8
 8005ce4:	f7fa fefa 	bl	8000adc <__aeabi_dcmpun>
 8005ce8:	bb70      	cbnz	r0, 8005d48 <_printf_float+0xc0>
 8005cea:	4b99      	ldr	r3, [pc, #612]	; (8005f50 <_printf_float+0x2c8>)
 8005cec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005cee:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf2:	4640      	mov	r0, r8
 8005cf4:	f7fa fed4 	bl	8000aa0 <__aeabi_dcmple>
 8005cf8:	bb30      	cbnz	r0, 8005d48 <_printf_float+0xc0>
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	4640      	mov	r0, r8
 8005d00:	4651      	mov	r1, sl
 8005d02:	f7fa fec3 	bl	8000a8c <__aeabi_dcmplt>
 8005d06:	b110      	cbz	r0, 8005d0e <_printf_float+0x86>
 8005d08:	232d      	movs	r3, #45	; 0x2d
 8005d0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d0e:	4b91      	ldr	r3, [pc, #580]	; (8005f54 <_printf_float+0x2cc>)
 8005d10:	4891      	ldr	r0, [pc, #580]	; (8005f58 <_printf_float+0x2d0>)
 8005d12:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005d16:	bf94      	ite	ls
 8005d18:	4698      	movls	r8, r3
 8005d1a:	4680      	movhi	r8, r0
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	6123      	str	r3, [r4, #16]
 8005d20:	f02b 0304 	bic.w	r3, fp, #4
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	f04f 0a00 	mov.w	sl, #0
 8005d2a:	9700      	str	r7, [sp, #0]
 8005d2c:	4633      	mov	r3, r6
 8005d2e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005d30:	4621      	mov	r1, r4
 8005d32:	4628      	mov	r0, r5
 8005d34:	f000 f9d2 	bl	80060dc <_printf_common>
 8005d38:	3001      	adds	r0, #1
 8005d3a:	f040 808f 	bne.w	8005e5c <_printf_float+0x1d4>
 8005d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d42:	b011      	add	sp, #68	; 0x44
 8005d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d48:	4642      	mov	r2, r8
 8005d4a:	4653      	mov	r3, sl
 8005d4c:	4640      	mov	r0, r8
 8005d4e:	4651      	mov	r1, sl
 8005d50:	f7fa fec4 	bl	8000adc <__aeabi_dcmpun>
 8005d54:	b140      	cbz	r0, 8005d68 <_printf_float+0xe0>
 8005d56:	f1ba 0f00 	cmp.w	sl, #0
 8005d5a:	bfbc      	itt	lt
 8005d5c:	232d      	movlt	r3, #45	; 0x2d
 8005d5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d62:	487e      	ldr	r0, [pc, #504]	; (8005f5c <_printf_float+0x2d4>)
 8005d64:	4b7e      	ldr	r3, [pc, #504]	; (8005f60 <_printf_float+0x2d8>)
 8005d66:	e7d4      	b.n	8005d12 <_printf_float+0x8a>
 8005d68:	6863      	ldr	r3, [r4, #4]
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005d70:	d142      	bne.n	8005df8 <_printf_float+0x170>
 8005d72:	2306      	movs	r3, #6
 8005d74:	6063      	str	r3, [r4, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	9206      	str	r2, [sp, #24]
 8005d7a:	aa0e      	add	r2, sp, #56	; 0x38
 8005d7c:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005d80:	aa0d      	add	r2, sp, #52	; 0x34
 8005d82:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005d86:	9203      	str	r2, [sp, #12]
 8005d88:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005d8c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005d90:	6023      	str	r3, [r4, #0]
 8005d92:	6863      	ldr	r3, [r4, #4]
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	4642      	mov	r2, r8
 8005d98:	4653      	mov	r3, sl
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	910b      	str	r1, [sp, #44]	; 0x2c
 8005d9e:	f7ff fed5 	bl	8005b4c <__cvt>
 8005da2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005da4:	2947      	cmp	r1, #71	; 0x47
 8005da6:	4680      	mov	r8, r0
 8005da8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005daa:	d108      	bne.n	8005dbe <_printf_float+0x136>
 8005dac:	1cc8      	adds	r0, r1, #3
 8005dae:	db02      	blt.n	8005db6 <_printf_float+0x12e>
 8005db0:	6863      	ldr	r3, [r4, #4]
 8005db2:	4299      	cmp	r1, r3
 8005db4:	dd40      	ble.n	8005e38 <_printf_float+0x1b0>
 8005db6:	f1a9 0902 	sub.w	r9, r9, #2
 8005dba:	fa5f f989 	uxtb.w	r9, r9
 8005dbe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005dc2:	d81f      	bhi.n	8005e04 <_printf_float+0x17c>
 8005dc4:	3901      	subs	r1, #1
 8005dc6:	464a      	mov	r2, r9
 8005dc8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005dcc:	910d      	str	r1, [sp, #52]	; 0x34
 8005dce:	f7ff ff1d 	bl	8005c0c <__exponent>
 8005dd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005dd4:	1813      	adds	r3, r2, r0
 8005dd6:	2a01      	cmp	r2, #1
 8005dd8:	4682      	mov	sl, r0
 8005dda:	6123      	str	r3, [r4, #16]
 8005ddc:	dc02      	bgt.n	8005de4 <_printf_float+0x15c>
 8005dde:	6822      	ldr	r2, [r4, #0]
 8005de0:	07d2      	lsls	r2, r2, #31
 8005de2:	d501      	bpl.n	8005de8 <_printf_float+0x160>
 8005de4:	3301      	adds	r3, #1
 8005de6:	6123      	str	r3, [r4, #16]
 8005de8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d09c      	beq.n	8005d2a <_printf_float+0xa2>
 8005df0:	232d      	movs	r3, #45	; 0x2d
 8005df2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005df6:	e798      	b.n	8005d2a <_printf_float+0xa2>
 8005df8:	2947      	cmp	r1, #71	; 0x47
 8005dfa:	d1bc      	bne.n	8005d76 <_printf_float+0xee>
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1ba      	bne.n	8005d76 <_printf_float+0xee>
 8005e00:	2301      	movs	r3, #1
 8005e02:	e7b7      	b.n	8005d74 <_printf_float+0xec>
 8005e04:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005e08:	d118      	bne.n	8005e3c <_printf_float+0x1b4>
 8005e0a:	2900      	cmp	r1, #0
 8005e0c:	6863      	ldr	r3, [r4, #4]
 8005e0e:	dd0b      	ble.n	8005e28 <_printf_float+0x1a0>
 8005e10:	6121      	str	r1, [r4, #16]
 8005e12:	b913      	cbnz	r3, 8005e1a <_printf_float+0x192>
 8005e14:	6822      	ldr	r2, [r4, #0]
 8005e16:	07d0      	lsls	r0, r2, #31
 8005e18:	d502      	bpl.n	8005e20 <_printf_float+0x198>
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	440b      	add	r3, r1
 8005e1e:	6123      	str	r3, [r4, #16]
 8005e20:	65a1      	str	r1, [r4, #88]	; 0x58
 8005e22:	f04f 0a00 	mov.w	sl, #0
 8005e26:	e7df      	b.n	8005de8 <_printf_float+0x160>
 8005e28:	b913      	cbnz	r3, 8005e30 <_printf_float+0x1a8>
 8005e2a:	6822      	ldr	r2, [r4, #0]
 8005e2c:	07d2      	lsls	r2, r2, #31
 8005e2e:	d501      	bpl.n	8005e34 <_printf_float+0x1ac>
 8005e30:	3302      	adds	r3, #2
 8005e32:	e7f4      	b.n	8005e1e <_printf_float+0x196>
 8005e34:	2301      	movs	r3, #1
 8005e36:	e7f2      	b.n	8005e1e <_printf_float+0x196>
 8005e38:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005e3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e3e:	4299      	cmp	r1, r3
 8005e40:	db05      	blt.n	8005e4e <_printf_float+0x1c6>
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	6121      	str	r1, [r4, #16]
 8005e46:	07d8      	lsls	r0, r3, #31
 8005e48:	d5ea      	bpl.n	8005e20 <_printf_float+0x198>
 8005e4a:	1c4b      	adds	r3, r1, #1
 8005e4c:	e7e7      	b.n	8005e1e <_printf_float+0x196>
 8005e4e:	2900      	cmp	r1, #0
 8005e50:	bfd4      	ite	le
 8005e52:	f1c1 0202 	rsble	r2, r1, #2
 8005e56:	2201      	movgt	r2, #1
 8005e58:	4413      	add	r3, r2
 8005e5a:	e7e0      	b.n	8005e1e <_printf_float+0x196>
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	055a      	lsls	r2, r3, #21
 8005e60:	d407      	bmi.n	8005e72 <_printf_float+0x1ea>
 8005e62:	6923      	ldr	r3, [r4, #16]
 8005e64:	4642      	mov	r2, r8
 8005e66:	4631      	mov	r1, r6
 8005e68:	4628      	mov	r0, r5
 8005e6a:	47b8      	blx	r7
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	d12b      	bne.n	8005ec8 <_printf_float+0x240>
 8005e70:	e765      	b.n	8005d3e <_printf_float+0xb6>
 8005e72:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005e76:	f240 80dc 	bls.w	8006032 <_printf_float+0x3aa>
 8005e7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e7e:	2200      	movs	r2, #0
 8005e80:	2300      	movs	r3, #0
 8005e82:	f7fa fdf9 	bl	8000a78 <__aeabi_dcmpeq>
 8005e86:	2800      	cmp	r0, #0
 8005e88:	d033      	beq.n	8005ef2 <_printf_float+0x26a>
 8005e8a:	4a36      	ldr	r2, [pc, #216]	; (8005f64 <_printf_float+0x2dc>)
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	4631      	mov	r1, r6
 8005e90:	4628      	mov	r0, r5
 8005e92:	47b8      	blx	r7
 8005e94:	3001      	adds	r0, #1
 8005e96:	f43f af52 	beq.w	8005d3e <_printf_float+0xb6>
 8005e9a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	db02      	blt.n	8005ea8 <_printf_float+0x220>
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	07d8      	lsls	r0, r3, #31
 8005ea6:	d50f      	bpl.n	8005ec8 <_printf_float+0x240>
 8005ea8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005eac:	4631      	mov	r1, r6
 8005eae:	4628      	mov	r0, r5
 8005eb0:	47b8      	blx	r7
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	f43f af43 	beq.w	8005d3e <_printf_float+0xb6>
 8005eb8:	f04f 0800 	mov.w	r8, #0
 8005ebc:	f104 091a 	add.w	r9, r4, #26
 8005ec0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	4543      	cmp	r3, r8
 8005ec6:	dc09      	bgt.n	8005edc <_printf_float+0x254>
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	079b      	lsls	r3, r3, #30
 8005ecc:	f100 8101 	bmi.w	80060d2 <_printf_float+0x44a>
 8005ed0:	68e0      	ldr	r0, [r4, #12]
 8005ed2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ed4:	4298      	cmp	r0, r3
 8005ed6:	bfb8      	it	lt
 8005ed8:	4618      	movlt	r0, r3
 8005eda:	e732      	b.n	8005d42 <_printf_float+0xba>
 8005edc:	2301      	movs	r3, #1
 8005ede:	464a      	mov	r2, r9
 8005ee0:	4631      	mov	r1, r6
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	47b8      	blx	r7
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	f43f af29 	beq.w	8005d3e <_printf_float+0xb6>
 8005eec:	f108 0801 	add.w	r8, r8, #1
 8005ef0:	e7e6      	b.n	8005ec0 <_printf_float+0x238>
 8005ef2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	dc37      	bgt.n	8005f68 <_printf_float+0x2e0>
 8005ef8:	4a1a      	ldr	r2, [pc, #104]	; (8005f64 <_printf_float+0x2dc>)
 8005efa:	2301      	movs	r3, #1
 8005efc:	4631      	mov	r1, r6
 8005efe:	4628      	mov	r0, r5
 8005f00:	47b8      	blx	r7
 8005f02:	3001      	adds	r0, #1
 8005f04:	f43f af1b 	beq.w	8005d3e <_printf_float+0xb6>
 8005f08:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	d102      	bne.n	8005f16 <_printf_float+0x28e>
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	07d9      	lsls	r1, r3, #31
 8005f14:	d5d8      	bpl.n	8005ec8 <_printf_float+0x240>
 8005f16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	47b8      	blx	r7
 8005f20:	3001      	adds	r0, #1
 8005f22:	f43f af0c 	beq.w	8005d3e <_printf_float+0xb6>
 8005f26:	f04f 0900 	mov.w	r9, #0
 8005f2a:	f104 0a1a 	add.w	sl, r4, #26
 8005f2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f30:	425b      	negs	r3, r3
 8005f32:	454b      	cmp	r3, r9
 8005f34:	dc01      	bgt.n	8005f3a <_printf_float+0x2b2>
 8005f36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f38:	e794      	b.n	8005e64 <_printf_float+0x1dc>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	4652      	mov	r2, sl
 8005f3e:	4631      	mov	r1, r6
 8005f40:	4628      	mov	r0, r5
 8005f42:	47b8      	blx	r7
 8005f44:	3001      	adds	r0, #1
 8005f46:	f43f aefa 	beq.w	8005d3e <_printf_float+0xb6>
 8005f4a:	f109 0901 	add.w	r9, r9, #1
 8005f4e:	e7ee      	b.n	8005f2e <_printf_float+0x2a6>
 8005f50:	7fefffff 	.word	0x7fefffff
 8005f54:	0800a478 	.word	0x0800a478
 8005f58:	0800a47c 	.word	0x0800a47c
 8005f5c:	0800a484 	.word	0x0800a484
 8005f60:	0800a480 	.word	0x0800a480
 8005f64:	0800a488 	.word	0x0800a488
 8005f68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	bfa8      	it	ge
 8005f70:	461a      	movge	r2, r3
 8005f72:	2a00      	cmp	r2, #0
 8005f74:	4691      	mov	r9, r2
 8005f76:	dc37      	bgt.n	8005fe8 <_printf_float+0x360>
 8005f78:	f04f 0b00 	mov.w	fp, #0
 8005f7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f80:	f104 021a 	add.w	r2, r4, #26
 8005f84:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005f88:	ebaa 0309 	sub.w	r3, sl, r9
 8005f8c:	455b      	cmp	r3, fp
 8005f8e:	dc33      	bgt.n	8005ff8 <_printf_float+0x370>
 8005f90:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f94:	429a      	cmp	r2, r3
 8005f96:	db3b      	blt.n	8006010 <_printf_float+0x388>
 8005f98:	6823      	ldr	r3, [r4, #0]
 8005f9a:	07da      	lsls	r2, r3, #31
 8005f9c:	d438      	bmi.n	8006010 <_printf_float+0x388>
 8005f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fa0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005fa2:	eba3 020a 	sub.w	r2, r3, sl
 8005fa6:	eba3 0901 	sub.w	r9, r3, r1
 8005faa:	4591      	cmp	r9, r2
 8005fac:	bfa8      	it	ge
 8005fae:	4691      	movge	r9, r2
 8005fb0:	f1b9 0f00 	cmp.w	r9, #0
 8005fb4:	dc34      	bgt.n	8006020 <_printf_float+0x398>
 8005fb6:	f04f 0800 	mov.w	r8, #0
 8005fba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fbe:	f104 0a1a 	add.w	sl, r4, #26
 8005fc2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005fc6:	1a9b      	subs	r3, r3, r2
 8005fc8:	eba3 0309 	sub.w	r3, r3, r9
 8005fcc:	4543      	cmp	r3, r8
 8005fce:	f77f af7b 	ble.w	8005ec8 <_printf_float+0x240>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	4652      	mov	r2, sl
 8005fd6:	4631      	mov	r1, r6
 8005fd8:	4628      	mov	r0, r5
 8005fda:	47b8      	blx	r7
 8005fdc:	3001      	adds	r0, #1
 8005fde:	f43f aeae 	beq.w	8005d3e <_printf_float+0xb6>
 8005fe2:	f108 0801 	add.w	r8, r8, #1
 8005fe6:	e7ec      	b.n	8005fc2 <_printf_float+0x33a>
 8005fe8:	4613      	mov	r3, r2
 8005fea:	4631      	mov	r1, r6
 8005fec:	4642      	mov	r2, r8
 8005fee:	4628      	mov	r0, r5
 8005ff0:	47b8      	blx	r7
 8005ff2:	3001      	adds	r0, #1
 8005ff4:	d1c0      	bne.n	8005f78 <_printf_float+0x2f0>
 8005ff6:	e6a2      	b.n	8005d3e <_printf_float+0xb6>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	920b      	str	r2, [sp, #44]	; 0x2c
 8006000:	47b8      	blx	r7
 8006002:	3001      	adds	r0, #1
 8006004:	f43f ae9b 	beq.w	8005d3e <_printf_float+0xb6>
 8006008:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800600a:	f10b 0b01 	add.w	fp, fp, #1
 800600e:	e7b9      	b.n	8005f84 <_printf_float+0x2fc>
 8006010:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006014:	4631      	mov	r1, r6
 8006016:	4628      	mov	r0, r5
 8006018:	47b8      	blx	r7
 800601a:	3001      	adds	r0, #1
 800601c:	d1bf      	bne.n	8005f9e <_printf_float+0x316>
 800601e:	e68e      	b.n	8005d3e <_printf_float+0xb6>
 8006020:	464b      	mov	r3, r9
 8006022:	eb08 020a 	add.w	r2, r8, sl
 8006026:	4631      	mov	r1, r6
 8006028:	4628      	mov	r0, r5
 800602a:	47b8      	blx	r7
 800602c:	3001      	adds	r0, #1
 800602e:	d1c2      	bne.n	8005fb6 <_printf_float+0x32e>
 8006030:	e685      	b.n	8005d3e <_printf_float+0xb6>
 8006032:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006034:	2a01      	cmp	r2, #1
 8006036:	dc01      	bgt.n	800603c <_printf_float+0x3b4>
 8006038:	07db      	lsls	r3, r3, #31
 800603a:	d537      	bpl.n	80060ac <_printf_float+0x424>
 800603c:	2301      	movs	r3, #1
 800603e:	4642      	mov	r2, r8
 8006040:	4631      	mov	r1, r6
 8006042:	4628      	mov	r0, r5
 8006044:	47b8      	blx	r7
 8006046:	3001      	adds	r0, #1
 8006048:	f43f ae79 	beq.w	8005d3e <_printf_float+0xb6>
 800604c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006050:	4631      	mov	r1, r6
 8006052:	4628      	mov	r0, r5
 8006054:	47b8      	blx	r7
 8006056:	3001      	adds	r0, #1
 8006058:	f43f ae71 	beq.w	8005d3e <_printf_float+0xb6>
 800605c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006060:	2200      	movs	r2, #0
 8006062:	2300      	movs	r3, #0
 8006064:	f7fa fd08 	bl	8000a78 <__aeabi_dcmpeq>
 8006068:	b9d8      	cbnz	r0, 80060a2 <_printf_float+0x41a>
 800606a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800606c:	f108 0201 	add.w	r2, r8, #1
 8006070:	3b01      	subs	r3, #1
 8006072:	4631      	mov	r1, r6
 8006074:	4628      	mov	r0, r5
 8006076:	47b8      	blx	r7
 8006078:	3001      	adds	r0, #1
 800607a:	d10e      	bne.n	800609a <_printf_float+0x412>
 800607c:	e65f      	b.n	8005d3e <_printf_float+0xb6>
 800607e:	2301      	movs	r3, #1
 8006080:	464a      	mov	r2, r9
 8006082:	4631      	mov	r1, r6
 8006084:	4628      	mov	r0, r5
 8006086:	47b8      	blx	r7
 8006088:	3001      	adds	r0, #1
 800608a:	f43f ae58 	beq.w	8005d3e <_printf_float+0xb6>
 800608e:	f108 0801 	add.w	r8, r8, #1
 8006092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006094:	3b01      	subs	r3, #1
 8006096:	4543      	cmp	r3, r8
 8006098:	dcf1      	bgt.n	800607e <_printf_float+0x3f6>
 800609a:	4653      	mov	r3, sl
 800609c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80060a0:	e6e1      	b.n	8005e66 <_printf_float+0x1de>
 80060a2:	f04f 0800 	mov.w	r8, #0
 80060a6:	f104 091a 	add.w	r9, r4, #26
 80060aa:	e7f2      	b.n	8006092 <_printf_float+0x40a>
 80060ac:	2301      	movs	r3, #1
 80060ae:	4642      	mov	r2, r8
 80060b0:	e7df      	b.n	8006072 <_printf_float+0x3ea>
 80060b2:	2301      	movs	r3, #1
 80060b4:	464a      	mov	r2, r9
 80060b6:	4631      	mov	r1, r6
 80060b8:	4628      	mov	r0, r5
 80060ba:	47b8      	blx	r7
 80060bc:	3001      	adds	r0, #1
 80060be:	f43f ae3e 	beq.w	8005d3e <_printf_float+0xb6>
 80060c2:	f108 0801 	add.w	r8, r8, #1
 80060c6:	68e3      	ldr	r3, [r4, #12]
 80060c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80060ca:	1a5b      	subs	r3, r3, r1
 80060cc:	4543      	cmp	r3, r8
 80060ce:	dcf0      	bgt.n	80060b2 <_printf_float+0x42a>
 80060d0:	e6fe      	b.n	8005ed0 <_printf_float+0x248>
 80060d2:	f04f 0800 	mov.w	r8, #0
 80060d6:	f104 0919 	add.w	r9, r4, #25
 80060da:	e7f4      	b.n	80060c6 <_printf_float+0x43e>

080060dc <_printf_common>:
 80060dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060e0:	4616      	mov	r6, r2
 80060e2:	4699      	mov	r9, r3
 80060e4:	688a      	ldr	r2, [r1, #8]
 80060e6:	690b      	ldr	r3, [r1, #16]
 80060e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060ec:	4293      	cmp	r3, r2
 80060ee:	bfb8      	it	lt
 80060f0:	4613      	movlt	r3, r2
 80060f2:	6033      	str	r3, [r6, #0]
 80060f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060f8:	4607      	mov	r7, r0
 80060fa:	460c      	mov	r4, r1
 80060fc:	b10a      	cbz	r2, 8006102 <_printf_common+0x26>
 80060fe:	3301      	adds	r3, #1
 8006100:	6033      	str	r3, [r6, #0]
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	0699      	lsls	r1, r3, #26
 8006106:	bf42      	ittt	mi
 8006108:	6833      	ldrmi	r3, [r6, #0]
 800610a:	3302      	addmi	r3, #2
 800610c:	6033      	strmi	r3, [r6, #0]
 800610e:	6825      	ldr	r5, [r4, #0]
 8006110:	f015 0506 	ands.w	r5, r5, #6
 8006114:	d106      	bne.n	8006124 <_printf_common+0x48>
 8006116:	f104 0a19 	add.w	sl, r4, #25
 800611a:	68e3      	ldr	r3, [r4, #12]
 800611c:	6832      	ldr	r2, [r6, #0]
 800611e:	1a9b      	subs	r3, r3, r2
 8006120:	42ab      	cmp	r3, r5
 8006122:	dc26      	bgt.n	8006172 <_printf_common+0x96>
 8006124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006128:	1e13      	subs	r3, r2, #0
 800612a:	6822      	ldr	r2, [r4, #0]
 800612c:	bf18      	it	ne
 800612e:	2301      	movne	r3, #1
 8006130:	0692      	lsls	r2, r2, #26
 8006132:	d42b      	bmi.n	800618c <_printf_common+0xb0>
 8006134:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006138:	4649      	mov	r1, r9
 800613a:	4638      	mov	r0, r7
 800613c:	47c0      	blx	r8
 800613e:	3001      	adds	r0, #1
 8006140:	d01e      	beq.n	8006180 <_printf_common+0xa4>
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	68e5      	ldr	r5, [r4, #12]
 8006146:	6832      	ldr	r2, [r6, #0]
 8006148:	f003 0306 	and.w	r3, r3, #6
 800614c:	2b04      	cmp	r3, #4
 800614e:	bf08      	it	eq
 8006150:	1aad      	subeq	r5, r5, r2
 8006152:	68a3      	ldr	r3, [r4, #8]
 8006154:	6922      	ldr	r2, [r4, #16]
 8006156:	bf0c      	ite	eq
 8006158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800615c:	2500      	movne	r5, #0
 800615e:	4293      	cmp	r3, r2
 8006160:	bfc4      	itt	gt
 8006162:	1a9b      	subgt	r3, r3, r2
 8006164:	18ed      	addgt	r5, r5, r3
 8006166:	2600      	movs	r6, #0
 8006168:	341a      	adds	r4, #26
 800616a:	42b5      	cmp	r5, r6
 800616c:	d11a      	bne.n	80061a4 <_printf_common+0xc8>
 800616e:	2000      	movs	r0, #0
 8006170:	e008      	b.n	8006184 <_printf_common+0xa8>
 8006172:	2301      	movs	r3, #1
 8006174:	4652      	mov	r2, sl
 8006176:	4649      	mov	r1, r9
 8006178:	4638      	mov	r0, r7
 800617a:	47c0      	blx	r8
 800617c:	3001      	adds	r0, #1
 800617e:	d103      	bne.n	8006188 <_printf_common+0xac>
 8006180:	f04f 30ff 	mov.w	r0, #4294967295
 8006184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006188:	3501      	adds	r5, #1
 800618a:	e7c6      	b.n	800611a <_printf_common+0x3e>
 800618c:	18e1      	adds	r1, r4, r3
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	2030      	movs	r0, #48	; 0x30
 8006192:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006196:	4422      	add	r2, r4
 8006198:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800619c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061a0:	3302      	adds	r3, #2
 80061a2:	e7c7      	b.n	8006134 <_printf_common+0x58>
 80061a4:	2301      	movs	r3, #1
 80061a6:	4622      	mov	r2, r4
 80061a8:	4649      	mov	r1, r9
 80061aa:	4638      	mov	r0, r7
 80061ac:	47c0      	blx	r8
 80061ae:	3001      	adds	r0, #1
 80061b0:	d0e6      	beq.n	8006180 <_printf_common+0xa4>
 80061b2:	3601      	adds	r6, #1
 80061b4:	e7d9      	b.n	800616a <_printf_common+0x8e>
	...

080061b8 <_printf_i>:
 80061b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061bc:	7e0f      	ldrb	r7, [r1, #24]
 80061be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061c0:	2f78      	cmp	r7, #120	; 0x78
 80061c2:	4691      	mov	r9, r2
 80061c4:	4680      	mov	r8, r0
 80061c6:	460c      	mov	r4, r1
 80061c8:	469a      	mov	sl, r3
 80061ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061ce:	d807      	bhi.n	80061e0 <_printf_i+0x28>
 80061d0:	2f62      	cmp	r7, #98	; 0x62
 80061d2:	d80a      	bhi.n	80061ea <_printf_i+0x32>
 80061d4:	2f00      	cmp	r7, #0
 80061d6:	f000 80d8 	beq.w	800638a <_printf_i+0x1d2>
 80061da:	2f58      	cmp	r7, #88	; 0x58
 80061dc:	f000 80a3 	beq.w	8006326 <_printf_i+0x16e>
 80061e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061e8:	e03a      	b.n	8006260 <_printf_i+0xa8>
 80061ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061ee:	2b15      	cmp	r3, #21
 80061f0:	d8f6      	bhi.n	80061e0 <_printf_i+0x28>
 80061f2:	a101      	add	r1, pc, #4	; (adr r1, 80061f8 <_printf_i+0x40>)
 80061f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061f8:	08006251 	.word	0x08006251
 80061fc:	08006265 	.word	0x08006265
 8006200:	080061e1 	.word	0x080061e1
 8006204:	080061e1 	.word	0x080061e1
 8006208:	080061e1 	.word	0x080061e1
 800620c:	080061e1 	.word	0x080061e1
 8006210:	08006265 	.word	0x08006265
 8006214:	080061e1 	.word	0x080061e1
 8006218:	080061e1 	.word	0x080061e1
 800621c:	080061e1 	.word	0x080061e1
 8006220:	080061e1 	.word	0x080061e1
 8006224:	08006371 	.word	0x08006371
 8006228:	08006295 	.word	0x08006295
 800622c:	08006353 	.word	0x08006353
 8006230:	080061e1 	.word	0x080061e1
 8006234:	080061e1 	.word	0x080061e1
 8006238:	08006393 	.word	0x08006393
 800623c:	080061e1 	.word	0x080061e1
 8006240:	08006295 	.word	0x08006295
 8006244:	080061e1 	.word	0x080061e1
 8006248:	080061e1 	.word	0x080061e1
 800624c:	0800635b 	.word	0x0800635b
 8006250:	682b      	ldr	r3, [r5, #0]
 8006252:	1d1a      	adds	r2, r3, #4
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	602a      	str	r2, [r5, #0]
 8006258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800625c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006260:	2301      	movs	r3, #1
 8006262:	e0a3      	b.n	80063ac <_printf_i+0x1f4>
 8006264:	6820      	ldr	r0, [r4, #0]
 8006266:	6829      	ldr	r1, [r5, #0]
 8006268:	0606      	lsls	r6, r0, #24
 800626a:	f101 0304 	add.w	r3, r1, #4
 800626e:	d50a      	bpl.n	8006286 <_printf_i+0xce>
 8006270:	680e      	ldr	r6, [r1, #0]
 8006272:	602b      	str	r3, [r5, #0]
 8006274:	2e00      	cmp	r6, #0
 8006276:	da03      	bge.n	8006280 <_printf_i+0xc8>
 8006278:	232d      	movs	r3, #45	; 0x2d
 800627a:	4276      	negs	r6, r6
 800627c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006280:	485e      	ldr	r0, [pc, #376]	; (80063fc <_printf_i+0x244>)
 8006282:	230a      	movs	r3, #10
 8006284:	e019      	b.n	80062ba <_printf_i+0x102>
 8006286:	680e      	ldr	r6, [r1, #0]
 8006288:	602b      	str	r3, [r5, #0]
 800628a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800628e:	bf18      	it	ne
 8006290:	b236      	sxthne	r6, r6
 8006292:	e7ef      	b.n	8006274 <_printf_i+0xbc>
 8006294:	682b      	ldr	r3, [r5, #0]
 8006296:	6820      	ldr	r0, [r4, #0]
 8006298:	1d19      	adds	r1, r3, #4
 800629a:	6029      	str	r1, [r5, #0]
 800629c:	0601      	lsls	r1, r0, #24
 800629e:	d501      	bpl.n	80062a4 <_printf_i+0xec>
 80062a0:	681e      	ldr	r6, [r3, #0]
 80062a2:	e002      	b.n	80062aa <_printf_i+0xf2>
 80062a4:	0646      	lsls	r6, r0, #25
 80062a6:	d5fb      	bpl.n	80062a0 <_printf_i+0xe8>
 80062a8:	881e      	ldrh	r6, [r3, #0]
 80062aa:	4854      	ldr	r0, [pc, #336]	; (80063fc <_printf_i+0x244>)
 80062ac:	2f6f      	cmp	r7, #111	; 0x6f
 80062ae:	bf0c      	ite	eq
 80062b0:	2308      	moveq	r3, #8
 80062b2:	230a      	movne	r3, #10
 80062b4:	2100      	movs	r1, #0
 80062b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062ba:	6865      	ldr	r5, [r4, #4]
 80062bc:	60a5      	str	r5, [r4, #8]
 80062be:	2d00      	cmp	r5, #0
 80062c0:	bfa2      	ittt	ge
 80062c2:	6821      	ldrge	r1, [r4, #0]
 80062c4:	f021 0104 	bicge.w	r1, r1, #4
 80062c8:	6021      	strge	r1, [r4, #0]
 80062ca:	b90e      	cbnz	r6, 80062d0 <_printf_i+0x118>
 80062cc:	2d00      	cmp	r5, #0
 80062ce:	d04d      	beq.n	800636c <_printf_i+0x1b4>
 80062d0:	4615      	mov	r5, r2
 80062d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80062d6:	fb03 6711 	mls	r7, r3, r1, r6
 80062da:	5dc7      	ldrb	r7, [r0, r7]
 80062dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062e0:	4637      	mov	r7, r6
 80062e2:	42bb      	cmp	r3, r7
 80062e4:	460e      	mov	r6, r1
 80062e6:	d9f4      	bls.n	80062d2 <_printf_i+0x11a>
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d10b      	bne.n	8006304 <_printf_i+0x14c>
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	07de      	lsls	r6, r3, #31
 80062f0:	d508      	bpl.n	8006304 <_printf_i+0x14c>
 80062f2:	6923      	ldr	r3, [r4, #16]
 80062f4:	6861      	ldr	r1, [r4, #4]
 80062f6:	4299      	cmp	r1, r3
 80062f8:	bfde      	ittt	le
 80062fa:	2330      	movle	r3, #48	; 0x30
 80062fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006300:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006304:	1b52      	subs	r2, r2, r5
 8006306:	6122      	str	r2, [r4, #16]
 8006308:	f8cd a000 	str.w	sl, [sp]
 800630c:	464b      	mov	r3, r9
 800630e:	aa03      	add	r2, sp, #12
 8006310:	4621      	mov	r1, r4
 8006312:	4640      	mov	r0, r8
 8006314:	f7ff fee2 	bl	80060dc <_printf_common>
 8006318:	3001      	adds	r0, #1
 800631a:	d14c      	bne.n	80063b6 <_printf_i+0x1fe>
 800631c:	f04f 30ff 	mov.w	r0, #4294967295
 8006320:	b004      	add	sp, #16
 8006322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006326:	4835      	ldr	r0, [pc, #212]	; (80063fc <_printf_i+0x244>)
 8006328:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800632c:	6829      	ldr	r1, [r5, #0]
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	f851 6b04 	ldr.w	r6, [r1], #4
 8006334:	6029      	str	r1, [r5, #0]
 8006336:	061d      	lsls	r5, r3, #24
 8006338:	d514      	bpl.n	8006364 <_printf_i+0x1ac>
 800633a:	07df      	lsls	r7, r3, #31
 800633c:	bf44      	itt	mi
 800633e:	f043 0320 	orrmi.w	r3, r3, #32
 8006342:	6023      	strmi	r3, [r4, #0]
 8006344:	b91e      	cbnz	r6, 800634e <_printf_i+0x196>
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	f023 0320 	bic.w	r3, r3, #32
 800634c:	6023      	str	r3, [r4, #0]
 800634e:	2310      	movs	r3, #16
 8006350:	e7b0      	b.n	80062b4 <_printf_i+0xfc>
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	f043 0320 	orr.w	r3, r3, #32
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	2378      	movs	r3, #120	; 0x78
 800635c:	4828      	ldr	r0, [pc, #160]	; (8006400 <_printf_i+0x248>)
 800635e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006362:	e7e3      	b.n	800632c <_printf_i+0x174>
 8006364:	0659      	lsls	r1, r3, #25
 8006366:	bf48      	it	mi
 8006368:	b2b6      	uxthmi	r6, r6
 800636a:	e7e6      	b.n	800633a <_printf_i+0x182>
 800636c:	4615      	mov	r5, r2
 800636e:	e7bb      	b.n	80062e8 <_printf_i+0x130>
 8006370:	682b      	ldr	r3, [r5, #0]
 8006372:	6826      	ldr	r6, [r4, #0]
 8006374:	6961      	ldr	r1, [r4, #20]
 8006376:	1d18      	adds	r0, r3, #4
 8006378:	6028      	str	r0, [r5, #0]
 800637a:	0635      	lsls	r5, r6, #24
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	d501      	bpl.n	8006384 <_printf_i+0x1cc>
 8006380:	6019      	str	r1, [r3, #0]
 8006382:	e002      	b.n	800638a <_printf_i+0x1d2>
 8006384:	0670      	lsls	r0, r6, #25
 8006386:	d5fb      	bpl.n	8006380 <_printf_i+0x1c8>
 8006388:	8019      	strh	r1, [r3, #0]
 800638a:	2300      	movs	r3, #0
 800638c:	6123      	str	r3, [r4, #16]
 800638e:	4615      	mov	r5, r2
 8006390:	e7ba      	b.n	8006308 <_printf_i+0x150>
 8006392:	682b      	ldr	r3, [r5, #0]
 8006394:	1d1a      	adds	r2, r3, #4
 8006396:	602a      	str	r2, [r5, #0]
 8006398:	681d      	ldr	r5, [r3, #0]
 800639a:	6862      	ldr	r2, [r4, #4]
 800639c:	2100      	movs	r1, #0
 800639e:	4628      	mov	r0, r5
 80063a0:	f7f9 fef6 	bl	8000190 <memchr>
 80063a4:	b108      	cbz	r0, 80063aa <_printf_i+0x1f2>
 80063a6:	1b40      	subs	r0, r0, r5
 80063a8:	6060      	str	r0, [r4, #4]
 80063aa:	6863      	ldr	r3, [r4, #4]
 80063ac:	6123      	str	r3, [r4, #16]
 80063ae:	2300      	movs	r3, #0
 80063b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063b4:	e7a8      	b.n	8006308 <_printf_i+0x150>
 80063b6:	6923      	ldr	r3, [r4, #16]
 80063b8:	462a      	mov	r2, r5
 80063ba:	4649      	mov	r1, r9
 80063bc:	4640      	mov	r0, r8
 80063be:	47d0      	blx	sl
 80063c0:	3001      	adds	r0, #1
 80063c2:	d0ab      	beq.n	800631c <_printf_i+0x164>
 80063c4:	6823      	ldr	r3, [r4, #0]
 80063c6:	079b      	lsls	r3, r3, #30
 80063c8:	d413      	bmi.n	80063f2 <_printf_i+0x23a>
 80063ca:	68e0      	ldr	r0, [r4, #12]
 80063cc:	9b03      	ldr	r3, [sp, #12]
 80063ce:	4298      	cmp	r0, r3
 80063d0:	bfb8      	it	lt
 80063d2:	4618      	movlt	r0, r3
 80063d4:	e7a4      	b.n	8006320 <_printf_i+0x168>
 80063d6:	2301      	movs	r3, #1
 80063d8:	4632      	mov	r2, r6
 80063da:	4649      	mov	r1, r9
 80063dc:	4640      	mov	r0, r8
 80063de:	47d0      	blx	sl
 80063e0:	3001      	adds	r0, #1
 80063e2:	d09b      	beq.n	800631c <_printf_i+0x164>
 80063e4:	3501      	adds	r5, #1
 80063e6:	68e3      	ldr	r3, [r4, #12]
 80063e8:	9903      	ldr	r1, [sp, #12]
 80063ea:	1a5b      	subs	r3, r3, r1
 80063ec:	42ab      	cmp	r3, r5
 80063ee:	dcf2      	bgt.n	80063d6 <_printf_i+0x21e>
 80063f0:	e7eb      	b.n	80063ca <_printf_i+0x212>
 80063f2:	2500      	movs	r5, #0
 80063f4:	f104 0619 	add.w	r6, r4, #25
 80063f8:	e7f5      	b.n	80063e6 <_printf_i+0x22e>
 80063fa:	bf00      	nop
 80063fc:	0800a48a 	.word	0x0800a48a
 8006400:	0800a49b 	.word	0x0800a49b

08006404 <_scanf_float>:
 8006404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006408:	b087      	sub	sp, #28
 800640a:	4617      	mov	r7, r2
 800640c:	9303      	str	r3, [sp, #12]
 800640e:	688b      	ldr	r3, [r1, #8]
 8006410:	1e5a      	subs	r2, r3, #1
 8006412:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006416:	bf83      	ittte	hi
 8006418:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800641c:	195b      	addhi	r3, r3, r5
 800641e:	9302      	strhi	r3, [sp, #8]
 8006420:	2300      	movls	r3, #0
 8006422:	bf86      	itte	hi
 8006424:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006428:	608b      	strhi	r3, [r1, #8]
 800642a:	9302      	strls	r3, [sp, #8]
 800642c:	680b      	ldr	r3, [r1, #0]
 800642e:	468b      	mov	fp, r1
 8006430:	2500      	movs	r5, #0
 8006432:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006436:	f84b 3b1c 	str.w	r3, [fp], #28
 800643a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800643e:	4680      	mov	r8, r0
 8006440:	460c      	mov	r4, r1
 8006442:	465e      	mov	r6, fp
 8006444:	46aa      	mov	sl, r5
 8006446:	46a9      	mov	r9, r5
 8006448:	9501      	str	r5, [sp, #4]
 800644a:	68a2      	ldr	r2, [r4, #8]
 800644c:	b152      	cbz	r2, 8006464 <_scanf_float+0x60>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	2b4e      	cmp	r3, #78	; 0x4e
 8006454:	d864      	bhi.n	8006520 <_scanf_float+0x11c>
 8006456:	2b40      	cmp	r3, #64	; 0x40
 8006458:	d83c      	bhi.n	80064d4 <_scanf_float+0xd0>
 800645a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800645e:	b2c8      	uxtb	r0, r1
 8006460:	280e      	cmp	r0, #14
 8006462:	d93a      	bls.n	80064da <_scanf_float+0xd6>
 8006464:	f1b9 0f00 	cmp.w	r9, #0
 8006468:	d003      	beq.n	8006472 <_scanf_float+0x6e>
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006470:	6023      	str	r3, [r4, #0]
 8006472:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006476:	f1ba 0f01 	cmp.w	sl, #1
 800647a:	f200 8113 	bhi.w	80066a4 <_scanf_float+0x2a0>
 800647e:	455e      	cmp	r6, fp
 8006480:	f200 8105 	bhi.w	800668e <_scanf_float+0x28a>
 8006484:	2501      	movs	r5, #1
 8006486:	4628      	mov	r0, r5
 8006488:	b007      	add	sp, #28
 800648a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800648e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006492:	2a0d      	cmp	r2, #13
 8006494:	d8e6      	bhi.n	8006464 <_scanf_float+0x60>
 8006496:	a101      	add	r1, pc, #4	; (adr r1, 800649c <_scanf_float+0x98>)
 8006498:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800649c:	080065db 	.word	0x080065db
 80064a0:	08006465 	.word	0x08006465
 80064a4:	08006465 	.word	0x08006465
 80064a8:	08006465 	.word	0x08006465
 80064ac:	0800663b 	.word	0x0800663b
 80064b0:	08006613 	.word	0x08006613
 80064b4:	08006465 	.word	0x08006465
 80064b8:	08006465 	.word	0x08006465
 80064bc:	080065e9 	.word	0x080065e9
 80064c0:	08006465 	.word	0x08006465
 80064c4:	08006465 	.word	0x08006465
 80064c8:	08006465 	.word	0x08006465
 80064cc:	08006465 	.word	0x08006465
 80064d0:	080065a1 	.word	0x080065a1
 80064d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80064d8:	e7db      	b.n	8006492 <_scanf_float+0x8e>
 80064da:	290e      	cmp	r1, #14
 80064dc:	d8c2      	bhi.n	8006464 <_scanf_float+0x60>
 80064de:	a001      	add	r0, pc, #4	; (adr r0, 80064e4 <_scanf_float+0xe0>)
 80064e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80064e4:	08006593 	.word	0x08006593
 80064e8:	08006465 	.word	0x08006465
 80064ec:	08006593 	.word	0x08006593
 80064f0:	08006627 	.word	0x08006627
 80064f4:	08006465 	.word	0x08006465
 80064f8:	08006541 	.word	0x08006541
 80064fc:	0800657d 	.word	0x0800657d
 8006500:	0800657d 	.word	0x0800657d
 8006504:	0800657d 	.word	0x0800657d
 8006508:	0800657d 	.word	0x0800657d
 800650c:	0800657d 	.word	0x0800657d
 8006510:	0800657d 	.word	0x0800657d
 8006514:	0800657d 	.word	0x0800657d
 8006518:	0800657d 	.word	0x0800657d
 800651c:	0800657d 	.word	0x0800657d
 8006520:	2b6e      	cmp	r3, #110	; 0x6e
 8006522:	d809      	bhi.n	8006538 <_scanf_float+0x134>
 8006524:	2b60      	cmp	r3, #96	; 0x60
 8006526:	d8b2      	bhi.n	800648e <_scanf_float+0x8a>
 8006528:	2b54      	cmp	r3, #84	; 0x54
 800652a:	d077      	beq.n	800661c <_scanf_float+0x218>
 800652c:	2b59      	cmp	r3, #89	; 0x59
 800652e:	d199      	bne.n	8006464 <_scanf_float+0x60>
 8006530:	2d07      	cmp	r5, #7
 8006532:	d197      	bne.n	8006464 <_scanf_float+0x60>
 8006534:	2508      	movs	r5, #8
 8006536:	e029      	b.n	800658c <_scanf_float+0x188>
 8006538:	2b74      	cmp	r3, #116	; 0x74
 800653a:	d06f      	beq.n	800661c <_scanf_float+0x218>
 800653c:	2b79      	cmp	r3, #121	; 0x79
 800653e:	e7f6      	b.n	800652e <_scanf_float+0x12a>
 8006540:	6821      	ldr	r1, [r4, #0]
 8006542:	05c8      	lsls	r0, r1, #23
 8006544:	d51a      	bpl.n	800657c <_scanf_float+0x178>
 8006546:	9b02      	ldr	r3, [sp, #8]
 8006548:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800654c:	6021      	str	r1, [r4, #0]
 800654e:	f109 0901 	add.w	r9, r9, #1
 8006552:	b11b      	cbz	r3, 800655c <_scanf_float+0x158>
 8006554:	3b01      	subs	r3, #1
 8006556:	3201      	adds	r2, #1
 8006558:	9302      	str	r3, [sp, #8]
 800655a:	60a2      	str	r2, [r4, #8]
 800655c:	68a3      	ldr	r3, [r4, #8]
 800655e:	3b01      	subs	r3, #1
 8006560:	60a3      	str	r3, [r4, #8]
 8006562:	6923      	ldr	r3, [r4, #16]
 8006564:	3301      	adds	r3, #1
 8006566:	6123      	str	r3, [r4, #16]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3b01      	subs	r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	607b      	str	r3, [r7, #4]
 8006570:	f340 8084 	ble.w	800667c <_scanf_float+0x278>
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	3301      	adds	r3, #1
 8006578:	603b      	str	r3, [r7, #0]
 800657a:	e766      	b.n	800644a <_scanf_float+0x46>
 800657c:	eb1a 0f05 	cmn.w	sl, r5
 8006580:	f47f af70 	bne.w	8006464 <_scanf_float+0x60>
 8006584:	6822      	ldr	r2, [r4, #0]
 8006586:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800658a:	6022      	str	r2, [r4, #0]
 800658c:	f806 3b01 	strb.w	r3, [r6], #1
 8006590:	e7e4      	b.n	800655c <_scanf_float+0x158>
 8006592:	6822      	ldr	r2, [r4, #0]
 8006594:	0610      	lsls	r0, r2, #24
 8006596:	f57f af65 	bpl.w	8006464 <_scanf_float+0x60>
 800659a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800659e:	e7f4      	b.n	800658a <_scanf_float+0x186>
 80065a0:	f1ba 0f00 	cmp.w	sl, #0
 80065a4:	d10e      	bne.n	80065c4 <_scanf_float+0x1c0>
 80065a6:	f1b9 0f00 	cmp.w	r9, #0
 80065aa:	d10e      	bne.n	80065ca <_scanf_float+0x1c6>
 80065ac:	6822      	ldr	r2, [r4, #0]
 80065ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80065b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80065b6:	d108      	bne.n	80065ca <_scanf_float+0x1c6>
 80065b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80065bc:	6022      	str	r2, [r4, #0]
 80065be:	f04f 0a01 	mov.w	sl, #1
 80065c2:	e7e3      	b.n	800658c <_scanf_float+0x188>
 80065c4:	f1ba 0f02 	cmp.w	sl, #2
 80065c8:	d055      	beq.n	8006676 <_scanf_float+0x272>
 80065ca:	2d01      	cmp	r5, #1
 80065cc:	d002      	beq.n	80065d4 <_scanf_float+0x1d0>
 80065ce:	2d04      	cmp	r5, #4
 80065d0:	f47f af48 	bne.w	8006464 <_scanf_float+0x60>
 80065d4:	3501      	adds	r5, #1
 80065d6:	b2ed      	uxtb	r5, r5
 80065d8:	e7d8      	b.n	800658c <_scanf_float+0x188>
 80065da:	f1ba 0f01 	cmp.w	sl, #1
 80065de:	f47f af41 	bne.w	8006464 <_scanf_float+0x60>
 80065e2:	f04f 0a02 	mov.w	sl, #2
 80065e6:	e7d1      	b.n	800658c <_scanf_float+0x188>
 80065e8:	b97d      	cbnz	r5, 800660a <_scanf_float+0x206>
 80065ea:	f1b9 0f00 	cmp.w	r9, #0
 80065ee:	f47f af3c 	bne.w	800646a <_scanf_float+0x66>
 80065f2:	6822      	ldr	r2, [r4, #0]
 80065f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80065f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80065fc:	f47f af39 	bne.w	8006472 <_scanf_float+0x6e>
 8006600:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006604:	6022      	str	r2, [r4, #0]
 8006606:	2501      	movs	r5, #1
 8006608:	e7c0      	b.n	800658c <_scanf_float+0x188>
 800660a:	2d03      	cmp	r5, #3
 800660c:	d0e2      	beq.n	80065d4 <_scanf_float+0x1d0>
 800660e:	2d05      	cmp	r5, #5
 8006610:	e7de      	b.n	80065d0 <_scanf_float+0x1cc>
 8006612:	2d02      	cmp	r5, #2
 8006614:	f47f af26 	bne.w	8006464 <_scanf_float+0x60>
 8006618:	2503      	movs	r5, #3
 800661a:	e7b7      	b.n	800658c <_scanf_float+0x188>
 800661c:	2d06      	cmp	r5, #6
 800661e:	f47f af21 	bne.w	8006464 <_scanf_float+0x60>
 8006622:	2507      	movs	r5, #7
 8006624:	e7b2      	b.n	800658c <_scanf_float+0x188>
 8006626:	6822      	ldr	r2, [r4, #0]
 8006628:	0591      	lsls	r1, r2, #22
 800662a:	f57f af1b 	bpl.w	8006464 <_scanf_float+0x60>
 800662e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006632:	6022      	str	r2, [r4, #0]
 8006634:	f8cd 9004 	str.w	r9, [sp, #4]
 8006638:	e7a8      	b.n	800658c <_scanf_float+0x188>
 800663a:	6822      	ldr	r2, [r4, #0]
 800663c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006640:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006644:	d006      	beq.n	8006654 <_scanf_float+0x250>
 8006646:	0550      	lsls	r0, r2, #21
 8006648:	f57f af0c 	bpl.w	8006464 <_scanf_float+0x60>
 800664c:	f1b9 0f00 	cmp.w	r9, #0
 8006650:	f43f af0f 	beq.w	8006472 <_scanf_float+0x6e>
 8006654:	0591      	lsls	r1, r2, #22
 8006656:	bf58      	it	pl
 8006658:	9901      	ldrpl	r1, [sp, #4]
 800665a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800665e:	bf58      	it	pl
 8006660:	eba9 0101 	subpl.w	r1, r9, r1
 8006664:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006668:	bf58      	it	pl
 800666a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800666e:	6022      	str	r2, [r4, #0]
 8006670:	f04f 0900 	mov.w	r9, #0
 8006674:	e78a      	b.n	800658c <_scanf_float+0x188>
 8006676:	f04f 0a03 	mov.w	sl, #3
 800667a:	e787      	b.n	800658c <_scanf_float+0x188>
 800667c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006680:	4639      	mov	r1, r7
 8006682:	4640      	mov	r0, r8
 8006684:	4798      	blx	r3
 8006686:	2800      	cmp	r0, #0
 8006688:	f43f aedf 	beq.w	800644a <_scanf_float+0x46>
 800668c:	e6ea      	b.n	8006464 <_scanf_float+0x60>
 800668e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006692:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006696:	463a      	mov	r2, r7
 8006698:	4640      	mov	r0, r8
 800669a:	4798      	blx	r3
 800669c:	6923      	ldr	r3, [r4, #16]
 800669e:	3b01      	subs	r3, #1
 80066a0:	6123      	str	r3, [r4, #16]
 80066a2:	e6ec      	b.n	800647e <_scanf_float+0x7a>
 80066a4:	1e6b      	subs	r3, r5, #1
 80066a6:	2b06      	cmp	r3, #6
 80066a8:	d825      	bhi.n	80066f6 <_scanf_float+0x2f2>
 80066aa:	2d02      	cmp	r5, #2
 80066ac:	d836      	bhi.n	800671c <_scanf_float+0x318>
 80066ae:	455e      	cmp	r6, fp
 80066b0:	f67f aee8 	bls.w	8006484 <_scanf_float+0x80>
 80066b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066bc:	463a      	mov	r2, r7
 80066be:	4640      	mov	r0, r8
 80066c0:	4798      	blx	r3
 80066c2:	6923      	ldr	r3, [r4, #16]
 80066c4:	3b01      	subs	r3, #1
 80066c6:	6123      	str	r3, [r4, #16]
 80066c8:	e7f1      	b.n	80066ae <_scanf_float+0x2aa>
 80066ca:	9802      	ldr	r0, [sp, #8]
 80066cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80066d4:	9002      	str	r0, [sp, #8]
 80066d6:	463a      	mov	r2, r7
 80066d8:	4640      	mov	r0, r8
 80066da:	4798      	blx	r3
 80066dc:	6923      	ldr	r3, [r4, #16]
 80066de:	3b01      	subs	r3, #1
 80066e0:	6123      	str	r3, [r4, #16]
 80066e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066e6:	fa5f fa8a 	uxtb.w	sl, sl
 80066ea:	f1ba 0f02 	cmp.w	sl, #2
 80066ee:	d1ec      	bne.n	80066ca <_scanf_float+0x2c6>
 80066f0:	3d03      	subs	r5, #3
 80066f2:	b2ed      	uxtb	r5, r5
 80066f4:	1b76      	subs	r6, r6, r5
 80066f6:	6823      	ldr	r3, [r4, #0]
 80066f8:	05da      	lsls	r2, r3, #23
 80066fa:	d52f      	bpl.n	800675c <_scanf_float+0x358>
 80066fc:	055b      	lsls	r3, r3, #21
 80066fe:	d510      	bpl.n	8006722 <_scanf_float+0x31e>
 8006700:	455e      	cmp	r6, fp
 8006702:	f67f aebf 	bls.w	8006484 <_scanf_float+0x80>
 8006706:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800670a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800670e:	463a      	mov	r2, r7
 8006710:	4640      	mov	r0, r8
 8006712:	4798      	blx	r3
 8006714:	6923      	ldr	r3, [r4, #16]
 8006716:	3b01      	subs	r3, #1
 8006718:	6123      	str	r3, [r4, #16]
 800671a:	e7f1      	b.n	8006700 <_scanf_float+0x2fc>
 800671c:	46aa      	mov	sl, r5
 800671e:	9602      	str	r6, [sp, #8]
 8006720:	e7df      	b.n	80066e2 <_scanf_float+0x2de>
 8006722:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006726:	6923      	ldr	r3, [r4, #16]
 8006728:	2965      	cmp	r1, #101	; 0x65
 800672a:	f103 33ff 	add.w	r3, r3, #4294967295
 800672e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006732:	6123      	str	r3, [r4, #16]
 8006734:	d00c      	beq.n	8006750 <_scanf_float+0x34c>
 8006736:	2945      	cmp	r1, #69	; 0x45
 8006738:	d00a      	beq.n	8006750 <_scanf_float+0x34c>
 800673a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800673e:	463a      	mov	r2, r7
 8006740:	4640      	mov	r0, r8
 8006742:	4798      	blx	r3
 8006744:	6923      	ldr	r3, [r4, #16]
 8006746:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800674a:	3b01      	subs	r3, #1
 800674c:	1eb5      	subs	r5, r6, #2
 800674e:	6123      	str	r3, [r4, #16]
 8006750:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006754:	463a      	mov	r2, r7
 8006756:	4640      	mov	r0, r8
 8006758:	4798      	blx	r3
 800675a:	462e      	mov	r6, r5
 800675c:	6825      	ldr	r5, [r4, #0]
 800675e:	f015 0510 	ands.w	r5, r5, #16
 8006762:	d155      	bne.n	8006810 <_scanf_float+0x40c>
 8006764:	7035      	strb	r5, [r6, #0]
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800676c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006770:	d11b      	bne.n	80067aa <_scanf_float+0x3a6>
 8006772:	9b01      	ldr	r3, [sp, #4]
 8006774:	454b      	cmp	r3, r9
 8006776:	eba3 0209 	sub.w	r2, r3, r9
 800677a:	d123      	bne.n	80067c4 <_scanf_float+0x3c0>
 800677c:	2200      	movs	r2, #0
 800677e:	4659      	mov	r1, fp
 8006780:	4640      	mov	r0, r8
 8006782:	f000 fe79 	bl	8007478 <_strtod_r>
 8006786:	6822      	ldr	r2, [r4, #0]
 8006788:	9b03      	ldr	r3, [sp, #12]
 800678a:	f012 0f02 	tst.w	r2, #2
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4606      	mov	r6, r0
 8006792:	460f      	mov	r7, r1
 8006794:	d021      	beq.n	80067da <_scanf_float+0x3d6>
 8006796:	1d1a      	adds	r2, r3, #4
 8006798:	9903      	ldr	r1, [sp, #12]
 800679a:	600a      	str	r2, [r1, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	e9c3 6700 	strd	r6, r7, [r3]
 80067a2:	68e3      	ldr	r3, [r4, #12]
 80067a4:	3301      	adds	r3, #1
 80067a6:	60e3      	str	r3, [r4, #12]
 80067a8:	e66d      	b.n	8006486 <_scanf_float+0x82>
 80067aa:	9b04      	ldr	r3, [sp, #16]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d0e5      	beq.n	800677c <_scanf_float+0x378>
 80067b0:	9905      	ldr	r1, [sp, #20]
 80067b2:	230a      	movs	r3, #10
 80067b4:	462a      	mov	r2, r5
 80067b6:	3101      	adds	r1, #1
 80067b8:	4640      	mov	r0, r8
 80067ba:	f000 fedf 	bl	800757c <_strtol_r>
 80067be:	9b04      	ldr	r3, [sp, #16]
 80067c0:	9e05      	ldr	r6, [sp, #20]
 80067c2:	1ac2      	subs	r2, r0, r3
 80067c4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80067c8:	429e      	cmp	r6, r3
 80067ca:	bf28      	it	cs
 80067cc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80067d0:	4910      	ldr	r1, [pc, #64]	; (8006814 <_scanf_float+0x410>)
 80067d2:	4630      	mov	r0, r6
 80067d4:	f000 f826 	bl	8006824 <siprintf>
 80067d8:	e7d0      	b.n	800677c <_scanf_float+0x378>
 80067da:	f012 0f04 	tst.w	r2, #4
 80067de:	f103 0204 	add.w	r2, r3, #4
 80067e2:	d1d9      	bne.n	8006798 <_scanf_float+0x394>
 80067e4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80067e8:	f8cc 2000 	str.w	r2, [ip]
 80067ec:	f8d3 8000 	ldr.w	r8, [r3]
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	f7fa f972 	bl	8000adc <__aeabi_dcmpun>
 80067f8:	b128      	cbz	r0, 8006806 <_scanf_float+0x402>
 80067fa:	4807      	ldr	r0, [pc, #28]	; (8006818 <_scanf_float+0x414>)
 80067fc:	f000 f80e 	bl	800681c <nanf>
 8006800:	f8c8 0000 	str.w	r0, [r8]
 8006804:	e7cd      	b.n	80067a2 <_scanf_float+0x39e>
 8006806:	4630      	mov	r0, r6
 8006808:	4639      	mov	r1, r7
 800680a:	f7fa f9c5 	bl	8000b98 <__aeabi_d2f>
 800680e:	e7f7      	b.n	8006800 <_scanf_float+0x3fc>
 8006810:	2500      	movs	r5, #0
 8006812:	e638      	b.n	8006486 <_scanf_float+0x82>
 8006814:	0800a4ac 	.word	0x0800a4ac
 8006818:	0800a8b8 	.word	0x0800a8b8

0800681c <nanf>:
 800681c:	4800      	ldr	r0, [pc, #0]	; (8006820 <nanf+0x4>)
 800681e:	4770      	bx	lr
 8006820:	7fc00000 	.word	0x7fc00000

08006824 <siprintf>:
 8006824:	b40e      	push	{r1, r2, r3}
 8006826:	b500      	push	{lr}
 8006828:	b09c      	sub	sp, #112	; 0x70
 800682a:	ab1d      	add	r3, sp, #116	; 0x74
 800682c:	9002      	str	r0, [sp, #8]
 800682e:	9006      	str	r0, [sp, #24]
 8006830:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006834:	4809      	ldr	r0, [pc, #36]	; (800685c <siprintf+0x38>)
 8006836:	9107      	str	r1, [sp, #28]
 8006838:	9104      	str	r1, [sp, #16]
 800683a:	4909      	ldr	r1, [pc, #36]	; (8006860 <siprintf+0x3c>)
 800683c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006840:	9105      	str	r1, [sp, #20]
 8006842:	6800      	ldr	r0, [r0, #0]
 8006844:	9301      	str	r3, [sp, #4]
 8006846:	a902      	add	r1, sp, #8
 8006848:	f002 fea4 	bl	8009594 <_svfiprintf_r>
 800684c:	9b02      	ldr	r3, [sp, #8]
 800684e:	2200      	movs	r2, #0
 8006850:	701a      	strb	r2, [r3, #0]
 8006852:	b01c      	add	sp, #112	; 0x70
 8006854:	f85d eb04 	ldr.w	lr, [sp], #4
 8006858:	b003      	add	sp, #12
 800685a:	4770      	bx	lr
 800685c:	2000000c 	.word	0x2000000c
 8006860:	ffff0208 	.word	0xffff0208

08006864 <sulp>:
 8006864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006868:	460f      	mov	r7, r1
 800686a:	4690      	mov	r8, r2
 800686c:	f002 fbfc 	bl	8009068 <__ulp>
 8006870:	4604      	mov	r4, r0
 8006872:	460d      	mov	r5, r1
 8006874:	f1b8 0f00 	cmp.w	r8, #0
 8006878:	d011      	beq.n	800689e <sulp+0x3a>
 800687a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800687e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006882:	2b00      	cmp	r3, #0
 8006884:	dd0b      	ble.n	800689e <sulp+0x3a>
 8006886:	051b      	lsls	r3, r3, #20
 8006888:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800688c:	2400      	movs	r4, #0
 800688e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006892:	4622      	mov	r2, r4
 8006894:	462b      	mov	r3, r5
 8006896:	f7f9 fe87 	bl	80005a8 <__aeabi_dmul>
 800689a:	4604      	mov	r4, r0
 800689c:	460d      	mov	r5, r1
 800689e:	4620      	mov	r0, r4
 80068a0:	4629      	mov	r1, r5
 80068a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080068a8 <_strtod_l>:
 80068a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ac:	b09f      	sub	sp, #124	; 0x7c
 80068ae:	469b      	mov	fp, r3
 80068b0:	2300      	movs	r3, #0
 80068b2:	931a      	str	r3, [sp, #104]	; 0x68
 80068b4:	4b9e      	ldr	r3, [pc, #632]	; (8006b30 <_strtod_l+0x288>)
 80068b6:	9215      	str	r2, [sp, #84]	; 0x54
 80068b8:	681f      	ldr	r7, [r3, #0]
 80068ba:	4682      	mov	sl, r0
 80068bc:	4638      	mov	r0, r7
 80068be:	460e      	mov	r6, r1
 80068c0:	f7f9 fc5e 	bl	8000180 <strlen>
 80068c4:	f04f 0800 	mov.w	r8, #0
 80068c8:	4604      	mov	r4, r0
 80068ca:	f04f 0900 	mov.w	r9, #0
 80068ce:	9619      	str	r6, [sp, #100]	; 0x64
 80068d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068d2:	781a      	ldrb	r2, [r3, #0]
 80068d4:	2a2b      	cmp	r2, #43	; 0x2b
 80068d6:	d04c      	beq.n	8006972 <_strtod_l+0xca>
 80068d8:	d83a      	bhi.n	8006950 <_strtod_l+0xa8>
 80068da:	2a0d      	cmp	r2, #13
 80068dc:	d833      	bhi.n	8006946 <_strtod_l+0x9e>
 80068de:	2a08      	cmp	r2, #8
 80068e0:	d833      	bhi.n	800694a <_strtod_l+0xa2>
 80068e2:	2a00      	cmp	r2, #0
 80068e4:	d03d      	beq.n	8006962 <_strtod_l+0xba>
 80068e6:	2300      	movs	r3, #0
 80068e8:	930a      	str	r3, [sp, #40]	; 0x28
 80068ea:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80068ec:	782b      	ldrb	r3, [r5, #0]
 80068ee:	2b30      	cmp	r3, #48	; 0x30
 80068f0:	f040 80aa 	bne.w	8006a48 <_strtod_l+0x1a0>
 80068f4:	786b      	ldrb	r3, [r5, #1]
 80068f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80068fa:	2b58      	cmp	r3, #88	; 0x58
 80068fc:	d166      	bne.n	80069cc <_strtod_l+0x124>
 80068fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006900:	9301      	str	r3, [sp, #4]
 8006902:	ab1a      	add	r3, sp, #104	; 0x68
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	4a8b      	ldr	r2, [pc, #556]	; (8006b34 <_strtod_l+0x28c>)
 8006908:	f8cd b008 	str.w	fp, [sp, #8]
 800690c:	ab1b      	add	r3, sp, #108	; 0x6c
 800690e:	a919      	add	r1, sp, #100	; 0x64
 8006910:	4650      	mov	r0, sl
 8006912:	f001 fd13 	bl	800833c <__gethex>
 8006916:	f010 0607 	ands.w	r6, r0, #7
 800691a:	4604      	mov	r4, r0
 800691c:	d005      	beq.n	800692a <_strtod_l+0x82>
 800691e:	2e06      	cmp	r6, #6
 8006920:	d129      	bne.n	8006976 <_strtod_l+0xce>
 8006922:	3501      	adds	r5, #1
 8006924:	2300      	movs	r3, #0
 8006926:	9519      	str	r5, [sp, #100]	; 0x64
 8006928:	930a      	str	r3, [sp, #40]	; 0x28
 800692a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800692c:	2b00      	cmp	r3, #0
 800692e:	f040 858a 	bne.w	8007446 <_strtod_l+0xb9e>
 8006932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006934:	b1d3      	cbz	r3, 800696c <_strtod_l+0xc4>
 8006936:	4642      	mov	r2, r8
 8006938:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800693c:	4610      	mov	r0, r2
 800693e:	4619      	mov	r1, r3
 8006940:	b01f      	add	sp, #124	; 0x7c
 8006942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006946:	2a20      	cmp	r2, #32
 8006948:	d1cd      	bne.n	80068e6 <_strtod_l+0x3e>
 800694a:	3301      	adds	r3, #1
 800694c:	9319      	str	r3, [sp, #100]	; 0x64
 800694e:	e7bf      	b.n	80068d0 <_strtod_l+0x28>
 8006950:	2a2d      	cmp	r2, #45	; 0x2d
 8006952:	d1c8      	bne.n	80068e6 <_strtod_l+0x3e>
 8006954:	2201      	movs	r2, #1
 8006956:	920a      	str	r2, [sp, #40]	; 0x28
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	9219      	str	r2, [sp, #100]	; 0x64
 800695c:	785b      	ldrb	r3, [r3, #1]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1c3      	bne.n	80068ea <_strtod_l+0x42>
 8006962:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006964:	9619      	str	r6, [sp, #100]	; 0x64
 8006966:	2b00      	cmp	r3, #0
 8006968:	f040 856b 	bne.w	8007442 <_strtod_l+0xb9a>
 800696c:	4642      	mov	r2, r8
 800696e:	464b      	mov	r3, r9
 8006970:	e7e4      	b.n	800693c <_strtod_l+0x94>
 8006972:	2200      	movs	r2, #0
 8006974:	e7ef      	b.n	8006956 <_strtod_l+0xae>
 8006976:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006978:	b13a      	cbz	r2, 800698a <_strtod_l+0xe2>
 800697a:	2135      	movs	r1, #53	; 0x35
 800697c:	a81c      	add	r0, sp, #112	; 0x70
 800697e:	f002 fc77 	bl	8009270 <__copybits>
 8006982:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006984:	4650      	mov	r0, sl
 8006986:	f002 f843 	bl	8008a10 <_Bfree>
 800698a:	3e01      	subs	r6, #1
 800698c:	2e04      	cmp	r6, #4
 800698e:	d806      	bhi.n	800699e <_strtod_l+0xf6>
 8006990:	e8df f006 	tbb	[pc, r6]
 8006994:	1714030a 	.word	0x1714030a
 8006998:	0a          	.byte	0x0a
 8006999:	00          	.byte	0x00
 800699a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800699e:	0721      	lsls	r1, r4, #28
 80069a0:	d5c3      	bpl.n	800692a <_strtod_l+0x82>
 80069a2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80069a6:	e7c0      	b.n	800692a <_strtod_l+0x82>
 80069a8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80069ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80069ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80069b2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80069b6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80069ba:	e7f0      	b.n	800699e <_strtod_l+0xf6>
 80069bc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006b38 <_strtod_l+0x290>
 80069c0:	e7ed      	b.n	800699e <_strtod_l+0xf6>
 80069c2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80069c6:	f04f 38ff 	mov.w	r8, #4294967295
 80069ca:	e7e8      	b.n	800699e <_strtod_l+0xf6>
 80069cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	9219      	str	r2, [sp, #100]	; 0x64
 80069d2:	785b      	ldrb	r3, [r3, #1]
 80069d4:	2b30      	cmp	r3, #48	; 0x30
 80069d6:	d0f9      	beq.n	80069cc <_strtod_l+0x124>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d0a6      	beq.n	800692a <_strtod_l+0x82>
 80069dc:	2301      	movs	r3, #1
 80069de:	9307      	str	r3, [sp, #28]
 80069e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80069e2:	9308      	str	r3, [sp, #32]
 80069e4:	2300      	movs	r3, #0
 80069e6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80069ea:	469b      	mov	fp, r3
 80069ec:	220a      	movs	r2, #10
 80069ee:	9819      	ldr	r0, [sp, #100]	; 0x64
 80069f0:	7805      	ldrb	r5, [r0, #0]
 80069f2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80069f6:	b2d9      	uxtb	r1, r3
 80069f8:	2909      	cmp	r1, #9
 80069fa:	d927      	bls.n	8006a4c <_strtod_l+0x1a4>
 80069fc:	4622      	mov	r2, r4
 80069fe:	4639      	mov	r1, r7
 8006a00:	f002 fede 	bl	80097c0 <strncmp>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d033      	beq.n	8006a70 <_strtod_l+0x1c8>
 8006a08:	2000      	movs	r0, #0
 8006a0a:	462a      	mov	r2, r5
 8006a0c:	465c      	mov	r4, fp
 8006a0e:	9004      	str	r0, [sp, #16]
 8006a10:	4603      	mov	r3, r0
 8006a12:	2a65      	cmp	r2, #101	; 0x65
 8006a14:	d001      	beq.n	8006a1a <_strtod_l+0x172>
 8006a16:	2a45      	cmp	r2, #69	; 0x45
 8006a18:	d114      	bne.n	8006a44 <_strtod_l+0x19c>
 8006a1a:	b91c      	cbnz	r4, 8006a24 <_strtod_l+0x17c>
 8006a1c:	9a07      	ldr	r2, [sp, #28]
 8006a1e:	4302      	orrs	r2, r0
 8006a20:	d09f      	beq.n	8006962 <_strtod_l+0xba>
 8006a22:	2400      	movs	r4, #0
 8006a24:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006a26:	1c72      	adds	r2, r6, #1
 8006a28:	9219      	str	r2, [sp, #100]	; 0x64
 8006a2a:	7872      	ldrb	r2, [r6, #1]
 8006a2c:	2a2b      	cmp	r2, #43	; 0x2b
 8006a2e:	d079      	beq.n	8006b24 <_strtod_l+0x27c>
 8006a30:	2a2d      	cmp	r2, #45	; 0x2d
 8006a32:	f000 8083 	beq.w	8006b3c <_strtod_l+0x294>
 8006a36:	2700      	movs	r7, #0
 8006a38:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006a3c:	2909      	cmp	r1, #9
 8006a3e:	f240 8083 	bls.w	8006b48 <_strtod_l+0x2a0>
 8006a42:	9619      	str	r6, [sp, #100]	; 0x64
 8006a44:	2500      	movs	r5, #0
 8006a46:	e09f      	b.n	8006b88 <_strtod_l+0x2e0>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	e7c8      	b.n	80069de <_strtod_l+0x136>
 8006a4c:	f1bb 0f08 	cmp.w	fp, #8
 8006a50:	bfd5      	itete	le
 8006a52:	9906      	ldrle	r1, [sp, #24]
 8006a54:	9905      	ldrgt	r1, [sp, #20]
 8006a56:	fb02 3301 	mlale	r3, r2, r1, r3
 8006a5a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006a5e:	f100 0001 	add.w	r0, r0, #1
 8006a62:	bfd4      	ite	le
 8006a64:	9306      	strle	r3, [sp, #24]
 8006a66:	9305      	strgt	r3, [sp, #20]
 8006a68:	f10b 0b01 	add.w	fp, fp, #1
 8006a6c:	9019      	str	r0, [sp, #100]	; 0x64
 8006a6e:	e7be      	b.n	80069ee <_strtod_l+0x146>
 8006a70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a72:	191a      	adds	r2, r3, r4
 8006a74:	9219      	str	r2, [sp, #100]	; 0x64
 8006a76:	5d1a      	ldrb	r2, [r3, r4]
 8006a78:	f1bb 0f00 	cmp.w	fp, #0
 8006a7c:	d036      	beq.n	8006aec <_strtod_l+0x244>
 8006a7e:	9004      	str	r0, [sp, #16]
 8006a80:	465c      	mov	r4, fp
 8006a82:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006a86:	2b09      	cmp	r3, #9
 8006a88:	d912      	bls.n	8006ab0 <_strtod_l+0x208>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e7c1      	b.n	8006a12 <_strtod_l+0x16a>
 8006a8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	9219      	str	r2, [sp, #100]	; 0x64
 8006a94:	785a      	ldrb	r2, [r3, #1]
 8006a96:	3001      	adds	r0, #1
 8006a98:	2a30      	cmp	r2, #48	; 0x30
 8006a9a:	d0f8      	beq.n	8006a8e <_strtod_l+0x1e6>
 8006a9c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006aa0:	2b08      	cmp	r3, #8
 8006aa2:	f200 84d5 	bhi.w	8007450 <_strtod_l+0xba8>
 8006aa6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006aa8:	9004      	str	r0, [sp, #16]
 8006aaa:	2000      	movs	r0, #0
 8006aac:	9308      	str	r3, [sp, #32]
 8006aae:	4604      	mov	r4, r0
 8006ab0:	3a30      	subs	r2, #48	; 0x30
 8006ab2:	f100 0301 	add.w	r3, r0, #1
 8006ab6:	d013      	beq.n	8006ae0 <_strtod_l+0x238>
 8006ab8:	9904      	ldr	r1, [sp, #16]
 8006aba:	4419      	add	r1, r3
 8006abc:	9104      	str	r1, [sp, #16]
 8006abe:	4623      	mov	r3, r4
 8006ac0:	1905      	adds	r5, r0, r4
 8006ac2:	210a      	movs	r1, #10
 8006ac4:	42ab      	cmp	r3, r5
 8006ac6:	d113      	bne.n	8006af0 <_strtod_l+0x248>
 8006ac8:	1823      	adds	r3, r4, r0
 8006aca:	2b08      	cmp	r3, #8
 8006acc:	f104 0401 	add.w	r4, r4, #1
 8006ad0:	4404      	add	r4, r0
 8006ad2:	dc1b      	bgt.n	8006b0c <_strtod_l+0x264>
 8006ad4:	9906      	ldr	r1, [sp, #24]
 8006ad6:	230a      	movs	r3, #10
 8006ad8:	fb03 2301 	mla	r3, r3, r1, r2
 8006adc:	9306      	str	r3, [sp, #24]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006ae2:	1c51      	adds	r1, r2, #1
 8006ae4:	9119      	str	r1, [sp, #100]	; 0x64
 8006ae6:	7852      	ldrb	r2, [r2, #1]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	e7ca      	b.n	8006a82 <_strtod_l+0x1da>
 8006aec:	4658      	mov	r0, fp
 8006aee:	e7d3      	b.n	8006a98 <_strtod_l+0x1f0>
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	dc04      	bgt.n	8006afe <_strtod_l+0x256>
 8006af4:	9f06      	ldr	r7, [sp, #24]
 8006af6:	434f      	muls	r7, r1
 8006af8:	9706      	str	r7, [sp, #24]
 8006afa:	3301      	adds	r3, #1
 8006afc:	e7e2      	b.n	8006ac4 <_strtod_l+0x21c>
 8006afe:	1c5f      	adds	r7, r3, #1
 8006b00:	2f10      	cmp	r7, #16
 8006b02:	bfde      	ittt	le
 8006b04:	9f05      	ldrle	r7, [sp, #20]
 8006b06:	434f      	mulle	r7, r1
 8006b08:	9705      	strle	r7, [sp, #20]
 8006b0a:	e7f6      	b.n	8006afa <_strtod_l+0x252>
 8006b0c:	2c10      	cmp	r4, #16
 8006b0e:	bfdf      	itttt	le
 8006b10:	9905      	ldrle	r1, [sp, #20]
 8006b12:	230a      	movle	r3, #10
 8006b14:	fb03 2301 	mlale	r3, r3, r1, r2
 8006b18:	9305      	strle	r3, [sp, #20]
 8006b1a:	e7e0      	b.n	8006ade <_strtod_l+0x236>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	9304      	str	r3, [sp, #16]
 8006b20:	2301      	movs	r3, #1
 8006b22:	e77b      	b.n	8006a1c <_strtod_l+0x174>
 8006b24:	2700      	movs	r7, #0
 8006b26:	1cb2      	adds	r2, r6, #2
 8006b28:	9219      	str	r2, [sp, #100]	; 0x64
 8006b2a:	78b2      	ldrb	r2, [r6, #2]
 8006b2c:	e784      	b.n	8006a38 <_strtod_l+0x190>
 8006b2e:	bf00      	nop
 8006b30:	0800a700 	.word	0x0800a700
 8006b34:	0800a4b4 	.word	0x0800a4b4
 8006b38:	7ff00000 	.word	0x7ff00000
 8006b3c:	2701      	movs	r7, #1
 8006b3e:	e7f2      	b.n	8006b26 <_strtod_l+0x27e>
 8006b40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b42:	1c51      	adds	r1, r2, #1
 8006b44:	9119      	str	r1, [sp, #100]	; 0x64
 8006b46:	7852      	ldrb	r2, [r2, #1]
 8006b48:	2a30      	cmp	r2, #48	; 0x30
 8006b4a:	d0f9      	beq.n	8006b40 <_strtod_l+0x298>
 8006b4c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006b50:	2908      	cmp	r1, #8
 8006b52:	f63f af77 	bhi.w	8006a44 <_strtod_l+0x19c>
 8006b56:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006b5a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b5c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b5e:	f04f 0e0a 	mov.w	lr, #10
 8006b62:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b64:	1c51      	adds	r1, r2, #1
 8006b66:	9119      	str	r1, [sp, #100]	; 0x64
 8006b68:	7852      	ldrb	r2, [r2, #1]
 8006b6a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006b6e:	2d09      	cmp	r5, #9
 8006b70:	d935      	bls.n	8006bde <_strtod_l+0x336>
 8006b72:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006b74:	1b49      	subs	r1, r1, r5
 8006b76:	2908      	cmp	r1, #8
 8006b78:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006b7c:	dc02      	bgt.n	8006b84 <_strtod_l+0x2dc>
 8006b7e:	4565      	cmp	r5, ip
 8006b80:	bfa8      	it	ge
 8006b82:	4665      	movge	r5, ip
 8006b84:	b107      	cbz	r7, 8006b88 <_strtod_l+0x2e0>
 8006b86:	426d      	negs	r5, r5
 8006b88:	2c00      	cmp	r4, #0
 8006b8a:	d14c      	bne.n	8006c26 <_strtod_l+0x37e>
 8006b8c:	9907      	ldr	r1, [sp, #28]
 8006b8e:	4301      	orrs	r1, r0
 8006b90:	f47f aecb 	bne.w	800692a <_strtod_l+0x82>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f47f aee4 	bne.w	8006962 <_strtod_l+0xba>
 8006b9a:	2a69      	cmp	r2, #105	; 0x69
 8006b9c:	d026      	beq.n	8006bec <_strtod_l+0x344>
 8006b9e:	dc23      	bgt.n	8006be8 <_strtod_l+0x340>
 8006ba0:	2a49      	cmp	r2, #73	; 0x49
 8006ba2:	d023      	beq.n	8006bec <_strtod_l+0x344>
 8006ba4:	2a4e      	cmp	r2, #78	; 0x4e
 8006ba6:	f47f aedc 	bne.w	8006962 <_strtod_l+0xba>
 8006baa:	499d      	ldr	r1, [pc, #628]	; (8006e20 <_strtod_l+0x578>)
 8006bac:	a819      	add	r0, sp, #100	; 0x64
 8006bae:	f001 fe13 	bl	80087d8 <__match>
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	f43f aed5 	beq.w	8006962 <_strtod_l+0xba>
 8006bb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b28      	cmp	r3, #40	; 0x28
 8006bbe:	d12c      	bne.n	8006c1a <_strtod_l+0x372>
 8006bc0:	4998      	ldr	r1, [pc, #608]	; (8006e24 <_strtod_l+0x57c>)
 8006bc2:	aa1c      	add	r2, sp, #112	; 0x70
 8006bc4:	a819      	add	r0, sp, #100	; 0x64
 8006bc6:	f001 fe1b 	bl	8008800 <__hexnan>
 8006bca:	2805      	cmp	r0, #5
 8006bcc:	d125      	bne.n	8006c1a <_strtod_l+0x372>
 8006bce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006bd0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006bd4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006bd8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006bdc:	e6a5      	b.n	800692a <_strtod_l+0x82>
 8006bde:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8006be2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006be6:	e7bc      	b.n	8006b62 <_strtod_l+0x2ba>
 8006be8:	2a6e      	cmp	r2, #110	; 0x6e
 8006bea:	e7dc      	b.n	8006ba6 <_strtod_l+0x2fe>
 8006bec:	498e      	ldr	r1, [pc, #568]	; (8006e28 <_strtod_l+0x580>)
 8006bee:	a819      	add	r0, sp, #100	; 0x64
 8006bf0:	f001 fdf2 	bl	80087d8 <__match>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	f43f aeb4 	beq.w	8006962 <_strtod_l+0xba>
 8006bfa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006bfc:	498b      	ldr	r1, [pc, #556]	; (8006e2c <_strtod_l+0x584>)
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	a819      	add	r0, sp, #100	; 0x64
 8006c02:	9319      	str	r3, [sp, #100]	; 0x64
 8006c04:	f001 fde8 	bl	80087d8 <__match>
 8006c08:	b910      	cbnz	r0, 8006c10 <_strtod_l+0x368>
 8006c0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	9319      	str	r3, [sp, #100]	; 0x64
 8006c10:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8006e30 <_strtod_l+0x588>
 8006c14:	f04f 0800 	mov.w	r8, #0
 8006c18:	e687      	b.n	800692a <_strtod_l+0x82>
 8006c1a:	4886      	ldr	r0, [pc, #536]	; (8006e34 <_strtod_l+0x58c>)
 8006c1c:	f002 fdba 	bl	8009794 <nan>
 8006c20:	4680      	mov	r8, r0
 8006c22:	4689      	mov	r9, r1
 8006c24:	e681      	b.n	800692a <_strtod_l+0x82>
 8006c26:	9b04      	ldr	r3, [sp, #16]
 8006c28:	9806      	ldr	r0, [sp, #24]
 8006c2a:	1aeb      	subs	r3, r5, r3
 8006c2c:	f1bb 0f00 	cmp.w	fp, #0
 8006c30:	bf08      	it	eq
 8006c32:	46a3      	moveq	fp, r4
 8006c34:	2c10      	cmp	r4, #16
 8006c36:	9307      	str	r3, [sp, #28]
 8006c38:	4626      	mov	r6, r4
 8006c3a:	bfa8      	it	ge
 8006c3c:	2610      	movge	r6, #16
 8006c3e:	f7f9 fc39 	bl	80004b4 <__aeabi_ui2d>
 8006c42:	2c09      	cmp	r4, #9
 8006c44:	4680      	mov	r8, r0
 8006c46:	4689      	mov	r9, r1
 8006c48:	dd13      	ble.n	8006c72 <_strtod_l+0x3ca>
 8006c4a:	4b7b      	ldr	r3, [pc, #492]	; (8006e38 <_strtod_l+0x590>)
 8006c4c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c50:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006c54:	f7f9 fca8 	bl	80005a8 <__aeabi_dmul>
 8006c58:	4680      	mov	r8, r0
 8006c5a:	9805      	ldr	r0, [sp, #20]
 8006c5c:	4689      	mov	r9, r1
 8006c5e:	f7f9 fc29 	bl	80004b4 <__aeabi_ui2d>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	4640      	mov	r0, r8
 8006c68:	4649      	mov	r1, r9
 8006c6a:	f7f9 fae7 	bl	800023c <__adddf3>
 8006c6e:	4680      	mov	r8, r0
 8006c70:	4689      	mov	r9, r1
 8006c72:	2c0f      	cmp	r4, #15
 8006c74:	dc36      	bgt.n	8006ce4 <_strtod_l+0x43c>
 8006c76:	9b07      	ldr	r3, [sp, #28]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f43f ae56 	beq.w	800692a <_strtod_l+0x82>
 8006c7e:	dd22      	ble.n	8006cc6 <_strtod_l+0x41e>
 8006c80:	2b16      	cmp	r3, #22
 8006c82:	dc09      	bgt.n	8006c98 <_strtod_l+0x3f0>
 8006c84:	496c      	ldr	r1, [pc, #432]	; (8006e38 <_strtod_l+0x590>)
 8006c86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c8e:	4642      	mov	r2, r8
 8006c90:	464b      	mov	r3, r9
 8006c92:	f7f9 fc89 	bl	80005a8 <__aeabi_dmul>
 8006c96:	e7c3      	b.n	8006c20 <_strtod_l+0x378>
 8006c98:	9a07      	ldr	r2, [sp, #28]
 8006c9a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	db20      	blt.n	8006ce4 <_strtod_l+0x43c>
 8006ca2:	4d65      	ldr	r5, [pc, #404]	; (8006e38 <_strtod_l+0x590>)
 8006ca4:	f1c4 040f 	rsb	r4, r4, #15
 8006ca8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006cac:	4642      	mov	r2, r8
 8006cae:	464b      	mov	r3, r9
 8006cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cb4:	f7f9 fc78 	bl	80005a8 <__aeabi_dmul>
 8006cb8:	9b07      	ldr	r3, [sp, #28]
 8006cba:	1b1c      	subs	r4, r3, r4
 8006cbc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006cc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006cc4:	e7e5      	b.n	8006c92 <_strtod_l+0x3ea>
 8006cc6:	9b07      	ldr	r3, [sp, #28]
 8006cc8:	3316      	adds	r3, #22
 8006cca:	db0b      	blt.n	8006ce4 <_strtod_l+0x43c>
 8006ccc:	9b04      	ldr	r3, [sp, #16]
 8006cce:	1b5d      	subs	r5, r3, r5
 8006cd0:	4b59      	ldr	r3, [pc, #356]	; (8006e38 <_strtod_l+0x590>)
 8006cd2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006cd6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006cda:	4640      	mov	r0, r8
 8006cdc:	4649      	mov	r1, r9
 8006cde:	f7f9 fd8d 	bl	80007fc <__aeabi_ddiv>
 8006ce2:	e79d      	b.n	8006c20 <_strtod_l+0x378>
 8006ce4:	9b07      	ldr	r3, [sp, #28]
 8006ce6:	1ba6      	subs	r6, r4, r6
 8006ce8:	441e      	add	r6, r3
 8006cea:	2e00      	cmp	r6, #0
 8006cec:	dd74      	ble.n	8006dd8 <_strtod_l+0x530>
 8006cee:	f016 030f 	ands.w	r3, r6, #15
 8006cf2:	d00a      	beq.n	8006d0a <_strtod_l+0x462>
 8006cf4:	4950      	ldr	r1, [pc, #320]	; (8006e38 <_strtod_l+0x590>)
 8006cf6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006cfa:	4642      	mov	r2, r8
 8006cfc:	464b      	mov	r3, r9
 8006cfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d02:	f7f9 fc51 	bl	80005a8 <__aeabi_dmul>
 8006d06:	4680      	mov	r8, r0
 8006d08:	4689      	mov	r9, r1
 8006d0a:	f036 060f 	bics.w	r6, r6, #15
 8006d0e:	d052      	beq.n	8006db6 <_strtod_l+0x50e>
 8006d10:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006d14:	dd27      	ble.n	8006d66 <_strtod_l+0x4be>
 8006d16:	f04f 0b00 	mov.w	fp, #0
 8006d1a:	f8cd b010 	str.w	fp, [sp, #16]
 8006d1e:	f8cd b020 	str.w	fp, [sp, #32]
 8006d22:	f8cd b018 	str.w	fp, [sp, #24]
 8006d26:	2322      	movs	r3, #34	; 0x22
 8006d28:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8006e30 <_strtod_l+0x588>
 8006d2c:	f8ca 3000 	str.w	r3, [sl]
 8006d30:	f04f 0800 	mov.w	r8, #0
 8006d34:	9b08      	ldr	r3, [sp, #32]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f43f adf7 	beq.w	800692a <_strtod_l+0x82>
 8006d3c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d3e:	4650      	mov	r0, sl
 8006d40:	f001 fe66 	bl	8008a10 <_Bfree>
 8006d44:	9906      	ldr	r1, [sp, #24]
 8006d46:	4650      	mov	r0, sl
 8006d48:	f001 fe62 	bl	8008a10 <_Bfree>
 8006d4c:	9904      	ldr	r1, [sp, #16]
 8006d4e:	4650      	mov	r0, sl
 8006d50:	f001 fe5e 	bl	8008a10 <_Bfree>
 8006d54:	9908      	ldr	r1, [sp, #32]
 8006d56:	4650      	mov	r0, sl
 8006d58:	f001 fe5a 	bl	8008a10 <_Bfree>
 8006d5c:	4659      	mov	r1, fp
 8006d5e:	4650      	mov	r0, sl
 8006d60:	f001 fe56 	bl	8008a10 <_Bfree>
 8006d64:	e5e1      	b.n	800692a <_strtod_l+0x82>
 8006d66:	4b35      	ldr	r3, [pc, #212]	; (8006e3c <_strtod_l+0x594>)
 8006d68:	9305      	str	r3, [sp, #20]
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	1136      	asrs	r6, r6, #4
 8006d6e:	4640      	mov	r0, r8
 8006d70:	4649      	mov	r1, r9
 8006d72:	461f      	mov	r7, r3
 8006d74:	2e01      	cmp	r6, #1
 8006d76:	dc21      	bgt.n	8006dbc <_strtod_l+0x514>
 8006d78:	b10b      	cbz	r3, 8006d7e <_strtod_l+0x4d6>
 8006d7a:	4680      	mov	r8, r0
 8006d7c:	4689      	mov	r9, r1
 8006d7e:	4b2f      	ldr	r3, [pc, #188]	; (8006e3c <_strtod_l+0x594>)
 8006d80:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006d84:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006d88:	4642      	mov	r2, r8
 8006d8a:	464b      	mov	r3, r9
 8006d8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d90:	f7f9 fc0a 	bl	80005a8 <__aeabi_dmul>
 8006d94:	4b26      	ldr	r3, [pc, #152]	; (8006e30 <_strtod_l+0x588>)
 8006d96:	460a      	mov	r2, r1
 8006d98:	400b      	ands	r3, r1
 8006d9a:	4929      	ldr	r1, [pc, #164]	; (8006e40 <_strtod_l+0x598>)
 8006d9c:	428b      	cmp	r3, r1
 8006d9e:	4680      	mov	r8, r0
 8006da0:	d8b9      	bhi.n	8006d16 <_strtod_l+0x46e>
 8006da2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006da6:	428b      	cmp	r3, r1
 8006da8:	bf86      	itte	hi
 8006daa:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 8006e44 <_strtod_l+0x59c>
 8006dae:	f04f 38ff 	movhi.w	r8, #4294967295
 8006db2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006db6:	2300      	movs	r3, #0
 8006db8:	9305      	str	r3, [sp, #20]
 8006dba:	e07f      	b.n	8006ebc <_strtod_l+0x614>
 8006dbc:	07f2      	lsls	r2, r6, #31
 8006dbe:	d505      	bpl.n	8006dcc <_strtod_l+0x524>
 8006dc0:	9b05      	ldr	r3, [sp, #20]
 8006dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc6:	f7f9 fbef 	bl	80005a8 <__aeabi_dmul>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	9a05      	ldr	r2, [sp, #20]
 8006dce:	3208      	adds	r2, #8
 8006dd0:	3701      	adds	r7, #1
 8006dd2:	1076      	asrs	r6, r6, #1
 8006dd4:	9205      	str	r2, [sp, #20]
 8006dd6:	e7cd      	b.n	8006d74 <_strtod_l+0x4cc>
 8006dd8:	d0ed      	beq.n	8006db6 <_strtod_l+0x50e>
 8006dda:	4276      	negs	r6, r6
 8006ddc:	f016 020f 	ands.w	r2, r6, #15
 8006de0:	d00a      	beq.n	8006df8 <_strtod_l+0x550>
 8006de2:	4b15      	ldr	r3, [pc, #84]	; (8006e38 <_strtod_l+0x590>)
 8006de4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006de8:	4640      	mov	r0, r8
 8006dea:	4649      	mov	r1, r9
 8006dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df0:	f7f9 fd04 	bl	80007fc <__aeabi_ddiv>
 8006df4:	4680      	mov	r8, r0
 8006df6:	4689      	mov	r9, r1
 8006df8:	1136      	asrs	r6, r6, #4
 8006dfa:	d0dc      	beq.n	8006db6 <_strtod_l+0x50e>
 8006dfc:	2e1f      	cmp	r6, #31
 8006dfe:	dd23      	ble.n	8006e48 <_strtod_l+0x5a0>
 8006e00:	f04f 0b00 	mov.w	fp, #0
 8006e04:	f8cd b010 	str.w	fp, [sp, #16]
 8006e08:	f8cd b020 	str.w	fp, [sp, #32]
 8006e0c:	f8cd b018 	str.w	fp, [sp, #24]
 8006e10:	2322      	movs	r3, #34	; 0x22
 8006e12:	f04f 0800 	mov.w	r8, #0
 8006e16:	f04f 0900 	mov.w	r9, #0
 8006e1a:	f8ca 3000 	str.w	r3, [sl]
 8006e1e:	e789      	b.n	8006d34 <_strtod_l+0x48c>
 8006e20:	0800a485 	.word	0x0800a485
 8006e24:	0800a4c8 	.word	0x0800a4c8
 8006e28:	0800a47d 	.word	0x0800a47d
 8006e2c:	0800a60c 	.word	0x0800a60c
 8006e30:	7ff00000 	.word	0x7ff00000
 8006e34:	0800a8b8 	.word	0x0800a8b8
 8006e38:	0800a798 	.word	0x0800a798
 8006e3c:	0800a770 	.word	0x0800a770
 8006e40:	7ca00000 	.word	0x7ca00000
 8006e44:	7fefffff 	.word	0x7fefffff
 8006e48:	f016 0310 	ands.w	r3, r6, #16
 8006e4c:	bf18      	it	ne
 8006e4e:	236a      	movne	r3, #106	; 0x6a
 8006e50:	4fb1      	ldr	r7, [pc, #708]	; (8007118 <_strtod_l+0x870>)
 8006e52:	9305      	str	r3, [sp, #20]
 8006e54:	4640      	mov	r0, r8
 8006e56:	4649      	mov	r1, r9
 8006e58:	2300      	movs	r3, #0
 8006e5a:	07f2      	lsls	r2, r6, #31
 8006e5c:	d504      	bpl.n	8006e68 <_strtod_l+0x5c0>
 8006e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e62:	f7f9 fba1 	bl	80005a8 <__aeabi_dmul>
 8006e66:	2301      	movs	r3, #1
 8006e68:	1076      	asrs	r6, r6, #1
 8006e6a:	f107 0708 	add.w	r7, r7, #8
 8006e6e:	d1f4      	bne.n	8006e5a <_strtod_l+0x5b2>
 8006e70:	b10b      	cbz	r3, 8006e76 <_strtod_l+0x5ce>
 8006e72:	4680      	mov	r8, r0
 8006e74:	4689      	mov	r9, r1
 8006e76:	9b05      	ldr	r3, [sp, #20]
 8006e78:	b1c3      	cbz	r3, 8006eac <_strtod_l+0x604>
 8006e7a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006e7e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	4649      	mov	r1, r9
 8006e86:	dd11      	ble.n	8006eac <_strtod_l+0x604>
 8006e88:	2b1f      	cmp	r3, #31
 8006e8a:	f340 8124 	ble.w	80070d6 <_strtod_l+0x82e>
 8006e8e:	2b34      	cmp	r3, #52	; 0x34
 8006e90:	bfde      	ittt	le
 8006e92:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006e96:	f04f 33ff 	movle.w	r3, #4294967295
 8006e9a:	fa03 f202 	lslle.w	r2, r3, r2
 8006e9e:	f04f 0800 	mov.w	r8, #0
 8006ea2:	bfcc      	ite	gt
 8006ea4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006ea8:	ea02 0901 	andle.w	r9, r2, r1
 8006eac:	2200      	movs	r2, #0
 8006eae:	2300      	movs	r3, #0
 8006eb0:	4640      	mov	r0, r8
 8006eb2:	4649      	mov	r1, r9
 8006eb4:	f7f9 fde0 	bl	8000a78 <__aeabi_dcmpeq>
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	d1a1      	bne.n	8006e00 <_strtod_l+0x558>
 8006ebc:	9b06      	ldr	r3, [sp, #24]
 8006ebe:	9300      	str	r3, [sp, #0]
 8006ec0:	9908      	ldr	r1, [sp, #32]
 8006ec2:	4623      	mov	r3, r4
 8006ec4:	465a      	mov	r2, fp
 8006ec6:	4650      	mov	r0, sl
 8006ec8:	f001 fe0a 	bl	8008ae0 <__s2b>
 8006ecc:	9008      	str	r0, [sp, #32]
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	f43f af21 	beq.w	8006d16 <_strtod_l+0x46e>
 8006ed4:	9b04      	ldr	r3, [sp, #16]
 8006ed6:	1b5d      	subs	r5, r3, r5
 8006ed8:	9b07      	ldr	r3, [sp, #28]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	bfb4      	ite	lt
 8006ede:	462b      	movlt	r3, r5
 8006ee0:	2300      	movge	r3, #0
 8006ee2:	930e      	str	r3, [sp, #56]	; 0x38
 8006ee4:	9b07      	ldr	r3, [sp, #28]
 8006ee6:	f04f 0b00 	mov.w	fp, #0
 8006eea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006eee:	9314      	str	r3, [sp, #80]	; 0x50
 8006ef0:	f8cd b010 	str.w	fp, [sp, #16]
 8006ef4:	9b08      	ldr	r3, [sp, #32]
 8006ef6:	4650      	mov	r0, sl
 8006ef8:	6859      	ldr	r1, [r3, #4]
 8006efa:	f001 fd49 	bl	8008990 <_Balloc>
 8006efe:	9006      	str	r0, [sp, #24]
 8006f00:	2800      	cmp	r0, #0
 8006f02:	f43f af10 	beq.w	8006d26 <_strtod_l+0x47e>
 8006f06:	9b08      	ldr	r3, [sp, #32]
 8006f08:	691a      	ldr	r2, [r3, #16]
 8006f0a:	3202      	adds	r2, #2
 8006f0c:	f103 010c 	add.w	r1, r3, #12
 8006f10:	0092      	lsls	r2, r2, #2
 8006f12:	300c      	adds	r0, #12
 8006f14:	f001 fd2e 	bl	8008974 <memcpy>
 8006f18:	ab1c      	add	r3, sp, #112	; 0x70
 8006f1a:	9301      	str	r3, [sp, #4]
 8006f1c:	ab1b      	add	r3, sp, #108	; 0x6c
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	4642      	mov	r2, r8
 8006f22:	464b      	mov	r3, r9
 8006f24:	4650      	mov	r0, sl
 8006f26:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8006f2a:	f002 f917 	bl	800915c <__d2b>
 8006f2e:	901a      	str	r0, [sp, #104]	; 0x68
 8006f30:	2800      	cmp	r0, #0
 8006f32:	f43f aef8 	beq.w	8006d26 <_strtod_l+0x47e>
 8006f36:	2101      	movs	r1, #1
 8006f38:	4650      	mov	r0, sl
 8006f3a:	f001 fe69 	bl	8008c10 <__i2b>
 8006f3e:	9004      	str	r0, [sp, #16]
 8006f40:	4603      	mov	r3, r0
 8006f42:	2800      	cmp	r0, #0
 8006f44:	f43f aeef 	beq.w	8006d26 <_strtod_l+0x47e>
 8006f48:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006f4a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006f4c:	2d00      	cmp	r5, #0
 8006f4e:	bfab      	itete	ge
 8006f50:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006f52:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8006f54:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8006f56:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006f58:	bfac      	ite	ge
 8006f5a:	18ee      	addge	r6, r5, r3
 8006f5c:	1b5c      	sublt	r4, r3, r5
 8006f5e:	9b05      	ldr	r3, [sp, #20]
 8006f60:	1aed      	subs	r5, r5, r3
 8006f62:	4415      	add	r5, r2
 8006f64:	4b6d      	ldr	r3, [pc, #436]	; (800711c <_strtod_l+0x874>)
 8006f66:	3d01      	subs	r5, #1
 8006f68:	429d      	cmp	r5, r3
 8006f6a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006f6e:	f280 80c4 	bge.w	80070fa <_strtod_l+0x852>
 8006f72:	1b5b      	subs	r3, r3, r5
 8006f74:	2b1f      	cmp	r3, #31
 8006f76:	eba2 0203 	sub.w	r2, r2, r3
 8006f7a:	f04f 0701 	mov.w	r7, #1
 8006f7e:	f300 80b1 	bgt.w	80070e4 <_strtod_l+0x83c>
 8006f82:	fa07 f303 	lsl.w	r3, r7, r3
 8006f86:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f88:	2500      	movs	r5, #0
 8006f8a:	18b7      	adds	r7, r6, r2
 8006f8c:	9b05      	ldr	r3, [sp, #20]
 8006f8e:	42be      	cmp	r6, r7
 8006f90:	4414      	add	r4, r2
 8006f92:	441c      	add	r4, r3
 8006f94:	4633      	mov	r3, r6
 8006f96:	bfa8      	it	ge
 8006f98:	463b      	movge	r3, r7
 8006f9a:	42a3      	cmp	r3, r4
 8006f9c:	bfa8      	it	ge
 8006f9e:	4623      	movge	r3, r4
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	bfc2      	ittt	gt
 8006fa4:	1aff      	subgt	r7, r7, r3
 8006fa6:	1ae4      	subgt	r4, r4, r3
 8006fa8:	1af6      	subgt	r6, r6, r3
 8006faa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	dd17      	ble.n	8006fe0 <_strtod_l+0x738>
 8006fb0:	9904      	ldr	r1, [sp, #16]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	4650      	mov	r0, sl
 8006fb6:	f001 fee9 	bl	8008d8c <__pow5mult>
 8006fba:	9004      	str	r0, [sp, #16]
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	f43f aeb2 	beq.w	8006d26 <_strtod_l+0x47e>
 8006fc2:	4601      	mov	r1, r0
 8006fc4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006fc6:	4650      	mov	r0, sl
 8006fc8:	f001 fe38 	bl	8008c3c <__multiply>
 8006fcc:	9009      	str	r0, [sp, #36]	; 0x24
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	f43f aea9 	beq.w	8006d26 <_strtod_l+0x47e>
 8006fd4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006fd6:	4650      	mov	r0, sl
 8006fd8:	f001 fd1a 	bl	8008a10 <_Bfree>
 8006fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fde:	931a      	str	r3, [sp, #104]	; 0x68
 8006fe0:	2f00      	cmp	r7, #0
 8006fe2:	f300 808e 	bgt.w	8007102 <_strtod_l+0x85a>
 8006fe6:	9b07      	ldr	r3, [sp, #28]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	dd08      	ble.n	8006ffe <_strtod_l+0x756>
 8006fec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006fee:	9906      	ldr	r1, [sp, #24]
 8006ff0:	4650      	mov	r0, sl
 8006ff2:	f001 fecb 	bl	8008d8c <__pow5mult>
 8006ff6:	9006      	str	r0, [sp, #24]
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	f43f ae94 	beq.w	8006d26 <_strtod_l+0x47e>
 8006ffe:	2c00      	cmp	r4, #0
 8007000:	dd08      	ble.n	8007014 <_strtod_l+0x76c>
 8007002:	9906      	ldr	r1, [sp, #24]
 8007004:	4622      	mov	r2, r4
 8007006:	4650      	mov	r0, sl
 8007008:	f001 ff1a 	bl	8008e40 <__lshift>
 800700c:	9006      	str	r0, [sp, #24]
 800700e:	2800      	cmp	r0, #0
 8007010:	f43f ae89 	beq.w	8006d26 <_strtod_l+0x47e>
 8007014:	2e00      	cmp	r6, #0
 8007016:	dd08      	ble.n	800702a <_strtod_l+0x782>
 8007018:	9904      	ldr	r1, [sp, #16]
 800701a:	4632      	mov	r2, r6
 800701c:	4650      	mov	r0, sl
 800701e:	f001 ff0f 	bl	8008e40 <__lshift>
 8007022:	9004      	str	r0, [sp, #16]
 8007024:	2800      	cmp	r0, #0
 8007026:	f43f ae7e 	beq.w	8006d26 <_strtod_l+0x47e>
 800702a:	9a06      	ldr	r2, [sp, #24]
 800702c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800702e:	4650      	mov	r0, sl
 8007030:	f001 ff92 	bl	8008f58 <__mdiff>
 8007034:	4683      	mov	fp, r0
 8007036:	2800      	cmp	r0, #0
 8007038:	f43f ae75 	beq.w	8006d26 <_strtod_l+0x47e>
 800703c:	2400      	movs	r4, #0
 800703e:	68c3      	ldr	r3, [r0, #12]
 8007040:	9904      	ldr	r1, [sp, #16]
 8007042:	60c4      	str	r4, [r0, #12]
 8007044:	930b      	str	r3, [sp, #44]	; 0x2c
 8007046:	f001 ff6b 	bl	8008f20 <__mcmp>
 800704a:	42a0      	cmp	r0, r4
 800704c:	da6c      	bge.n	8007128 <_strtod_l+0x880>
 800704e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007050:	ea53 0308 	orrs.w	r3, r3, r8
 8007054:	f040 8092 	bne.w	800717c <_strtod_l+0x8d4>
 8007058:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800705c:	2b00      	cmp	r3, #0
 800705e:	f040 808d 	bne.w	800717c <_strtod_l+0x8d4>
 8007062:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007066:	0d1b      	lsrs	r3, r3, #20
 8007068:	051b      	lsls	r3, r3, #20
 800706a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800706e:	f240 8085 	bls.w	800717c <_strtod_l+0x8d4>
 8007072:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007076:	b91b      	cbnz	r3, 8007080 <_strtod_l+0x7d8>
 8007078:	f8db 3010 	ldr.w	r3, [fp, #16]
 800707c:	2b01      	cmp	r3, #1
 800707e:	dd7d      	ble.n	800717c <_strtod_l+0x8d4>
 8007080:	4659      	mov	r1, fp
 8007082:	2201      	movs	r2, #1
 8007084:	4650      	mov	r0, sl
 8007086:	f001 fedb 	bl	8008e40 <__lshift>
 800708a:	9904      	ldr	r1, [sp, #16]
 800708c:	4683      	mov	fp, r0
 800708e:	f001 ff47 	bl	8008f20 <__mcmp>
 8007092:	2800      	cmp	r0, #0
 8007094:	dd72      	ble.n	800717c <_strtod_l+0x8d4>
 8007096:	9905      	ldr	r1, [sp, #20]
 8007098:	4a21      	ldr	r2, [pc, #132]	; (8007120 <_strtod_l+0x878>)
 800709a:	464b      	mov	r3, r9
 800709c:	2900      	cmp	r1, #0
 800709e:	f000 808d 	beq.w	80071bc <_strtod_l+0x914>
 80070a2:	ea02 0109 	and.w	r1, r2, r9
 80070a6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80070aa:	f300 8087 	bgt.w	80071bc <_strtod_l+0x914>
 80070ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80070b2:	f77f aead 	ble.w	8006e10 <_strtod_l+0x568>
 80070b6:	4b1b      	ldr	r3, [pc, #108]	; (8007124 <_strtod_l+0x87c>)
 80070b8:	4640      	mov	r0, r8
 80070ba:	4649      	mov	r1, r9
 80070bc:	2200      	movs	r2, #0
 80070be:	f7f9 fa73 	bl	80005a8 <__aeabi_dmul>
 80070c2:	460b      	mov	r3, r1
 80070c4:	4303      	orrs	r3, r0
 80070c6:	bf08      	it	eq
 80070c8:	2322      	moveq	r3, #34	; 0x22
 80070ca:	4680      	mov	r8, r0
 80070cc:	4689      	mov	r9, r1
 80070ce:	bf08      	it	eq
 80070d0:	f8ca 3000 	streq.w	r3, [sl]
 80070d4:	e632      	b.n	8006d3c <_strtod_l+0x494>
 80070d6:	f04f 32ff 	mov.w	r2, #4294967295
 80070da:	fa02 f303 	lsl.w	r3, r2, r3
 80070de:	ea03 0808 	and.w	r8, r3, r8
 80070e2:	e6e3      	b.n	8006eac <_strtod_l+0x604>
 80070e4:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80070e8:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80070ec:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80070f0:	35e2      	adds	r5, #226	; 0xe2
 80070f2:	fa07 f505 	lsl.w	r5, r7, r5
 80070f6:	970f      	str	r7, [sp, #60]	; 0x3c
 80070f8:	e747      	b.n	8006f8a <_strtod_l+0x6e2>
 80070fa:	2301      	movs	r3, #1
 80070fc:	2500      	movs	r5, #0
 80070fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007100:	e743      	b.n	8006f8a <_strtod_l+0x6e2>
 8007102:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007104:	463a      	mov	r2, r7
 8007106:	4650      	mov	r0, sl
 8007108:	f001 fe9a 	bl	8008e40 <__lshift>
 800710c:	901a      	str	r0, [sp, #104]	; 0x68
 800710e:	2800      	cmp	r0, #0
 8007110:	f47f af69 	bne.w	8006fe6 <_strtod_l+0x73e>
 8007114:	e607      	b.n	8006d26 <_strtod_l+0x47e>
 8007116:	bf00      	nop
 8007118:	0800a4e0 	.word	0x0800a4e0
 800711c:	fffffc02 	.word	0xfffffc02
 8007120:	7ff00000 	.word	0x7ff00000
 8007124:	39500000 	.word	0x39500000
 8007128:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800712c:	d165      	bne.n	80071fa <_strtod_l+0x952>
 800712e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007130:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007134:	b35a      	cbz	r2, 800718e <_strtod_l+0x8e6>
 8007136:	4a9a      	ldr	r2, [pc, #616]	; (80073a0 <_strtod_l+0xaf8>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d12b      	bne.n	8007194 <_strtod_l+0x8ec>
 800713c:	9b05      	ldr	r3, [sp, #20]
 800713e:	4641      	mov	r1, r8
 8007140:	b303      	cbz	r3, 8007184 <_strtod_l+0x8dc>
 8007142:	4b98      	ldr	r3, [pc, #608]	; (80073a4 <_strtod_l+0xafc>)
 8007144:	464a      	mov	r2, r9
 8007146:	4013      	ands	r3, r2
 8007148:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800714c:	f04f 32ff 	mov.w	r2, #4294967295
 8007150:	d81b      	bhi.n	800718a <_strtod_l+0x8e2>
 8007152:	0d1b      	lsrs	r3, r3, #20
 8007154:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007158:	fa02 f303 	lsl.w	r3, r2, r3
 800715c:	4299      	cmp	r1, r3
 800715e:	d119      	bne.n	8007194 <_strtod_l+0x8ec>
 8007160:	4b91      	ldr	r3, [pc, #580]	; (80073a8 <_strtod_l+0xb00>)
 8007162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007164:	429a      	cmp	r2, r3
 8007166:	d102      	bne.n	800716e <_strtod_l+0x8c6>
 8007168:	3101      	adds	r1, #1
 800716a:	f43f addc 	beq.w	8006d26 <_strtod_l+0x47e>
 800716e:	4b8d      	ldr	r3, [pc, #564]	; (80073a4 <_strtod_l+0xafc>)
 8007170:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007172:	401a      	ands	r2, r3
 8007174:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007178:	f04f 0800 	mov.w	r8, #0
 800717c:	9b05      	ldr	r3, [sp, #20]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d199      	bne.n	80070b6 <_strtod_l+0x80e>
 8007182:	e5db      	b.n	8006d3c <_strtod_l+0x494>
 8007184:	f04f 33ff 	mov.w	r3, #4294967295
 8007188:	e7e8      	b.n	800715c <_strtod_l+0x8b4>
 800718a:	4613      	mov	r3, r2
 800718c:	e7e6      	b.n	800715c <_strtod_l+0x8b4>
 800718e:	ea53 0308 	orrs.w	r3, r3, r8
 8007192:	d080      	beq.n	8007096 <_strtod_l+0x7ee>
 8007194:	b1e5      	cbz	r5, 80071d0 <_strtod_l+0x928>
 8007196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007198:	421d      	tst	r5, r3
 800719a:	d0ef      	beq.n	800717c <_strtod_l+0x8d4>
 800719c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800719e:	9a05      	ldr	r2, [sp, #20]
 80071a0:	4640      	mov	r0, r8
 80071a2:	4649      	mov	r1, r9
 80071a4:	b1c3      	cbz	r3, 80071d8 <_strtod_l+0x930>
 80071a6:	f7ff fb5d 	bl	8006864 <sulp>
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071b2:	f7f9 f843 	bl	800023c <__adddf3>
 80071b6:	4680      	mov	r8, r0
 80071b8:	4689      	mov	r9, r1
 80071ba:	e7df      	b.n	800717c <_strtod_l+0x8d4>
 80071bc:	4013      	ands	r3, r2
 80071be:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80071c2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80071c6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80071ca:	f04f 38ff 	mov.w	r8, #4294967295
 80071ce:	e7d5      	b.n	800717c <_strtod_l+0x8d4>
 80071d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071d2:	ea13 0f08 	tst.w	r3, r8
 80071d6:	e7e0      	b.n	800719a <_strtod_l+0x8f2>
 80071d8:	f7ff fb44 	bl	8006864 <sulp>
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071e4:	f7f9 f828 	bl	8000238 <__aeabi_dsub>
 80071e8:	2200      	movs	r2, #0
 80071ea:	2300      	movs	r3, #0
 80071ec:	4680      	mov	r8, r0
 80071ee:	4689      	mov	r9, r1
 80071f0:	f7f9 fc42 	bl	8000a78 <__aeabi_dcmpeq>
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d0c1      	beq.n	800717c <_strtod_l+0x8d4>
 80071f8:	e60a      	b.n	8006e10 <_strtod_l+0x568>
 80071fa:	9904      	ldr	r1, [sp, #16]
 80071fc:	4658      	mov	r0, fp
 80071fe:	f002 f809 	bl	8009214 <__ratio>
 8007202:	2200      	movs	r2, #0
 8007204:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007208:	4606      	mov	r6, r0
 800720a:	460f      	mov	r7, r1
 800720c:	f7f9 fc48 	bl	8000aa0 <__aeabi_dcmple>
 8007210:	2800      	cmp	r0, #0
 8007212:	d070      	beq.n	80072f6 <_strtod_l+0xa4e>
 8007214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007216:	2b00      	cmp	r3, #0
 8007218:	d042      	beq.n	80072a0 <_strtod_l+0x9f8>
 800721a:	4f64      	ldr	r7, [pc, #400]	; (80073ac <_strtod_l+0xb04>)
 800721c:	2600      	movs	r6, #0
 800721e:	4d63      	ldr	r5, [pc, #396]	; (80073ac <_strtod_l+0xb04>)
 8007220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007222:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007226:	0d1b      	lsrs	r3, r3, #20
 8007228:	051b      	lsls	r3, r3, #20
 800722a:	930f      	str	r3, [sp, #60]	; 0x3c
 800722c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800722e:	4b60      	ldr	r3, [pc, #384]	; (80073b0 <_strtod_l+0xb08>)
 8007230:	429a      	cmp	r2, r3
 8007232:	f040 80c5 	bne.w	80073c0 <_strtod_l+0xb18>
 8007236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007238:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800723c:	4640      	mov	r0, r8
 800723e:	4649      	mov	r1, r9
 8007240:	f001 ff12 	bl	8009068 <__ulp>
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	4630      	mov	r0, r6
 800724a:	4639      	mov	r1, r7
 800724c:	f7f9 f9ac 	bl	80005a8 <__aeabi_dmul>
 8007250:	4642      	mov	r2, r8
 8007252:	464b      	mov	r3, r9
 8007254:	f7f8 fff2 	bl	800023c <__adddf3>
 8007258:	460b      	mov	r3, r1
 800725a:	4952      	ldr	r1, [pc, #328]	; (80073a4 <_strtod_l+0xafc>)
 800725c:	4a55      	ldr	r2, [pc, #340]	; (80073b4 <_strtod_l+0xb0c>)
 800725e:	4019      	ands	r1, r3
 8007260:	4291      	cmp	r1, r2
 8007262:	4680      	mov	r8, r0
 8007264:	d95d      	bls.n	8007322 <_strtod_l+0xa7a>
 8007266:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007268:	4b4f      	ldr	r3, [pc, #316]	; (80073a8 <_strtod_l+0xb00>)
 800726a:	429a      	cmp	r2, r3
 800726c:	d103      	bne.n	8007276 <_strtod_l+0x9ce>
 800726e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007270:	3301      	adds	r3, #1
 8007272:	f43f ad58 	beq.w	8006d26 <_strtod_l+0x47e>
 8007276:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80073a8 <_strtod_l+0xb00>
 800727a:	f04f 38ff 	mov.w	r8, #4294967295
 800727e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007280:	4650      	mov	r0, sl
 8007282:	f001 fbc5 	bl	8008a10 <_Bfree>
 8007286:	9906      	ldr	r1, [sp, #24]
 8007288:	4650      	mov	r0, sl
 800728a:	f001 fbc1 	bl	8008a10 <_Bfree>
 800728e:	9904      	ldr	r1, [sp, #16]
 8007290:	4650      	mov	r0, sl
 8007292:	f001 fbbd 	bl	8008a10 <_Bfree>
 8007296:	4659      	mov	r1, fp
 8007298:	4650      	mov	r0, sl
 800729a:	f001 fbb9 	bl	8008a10 <_Bfree>
 800729e:	e629      	b.n	8006ef4 <_strtod_l+0x64c>
 80072a0:	f1b8 0f00 	cmp.w	r8, #0
 80072a4:	d119      	bne.n	80072da <_strtod_l+0xa32>
 80072a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072ac:	b9e3      	cbnz	r3, 80072e8 <_strtod_l+0xa40>
 80072ae:	4b3f      	ldr	r3, [pc, #252]	; (80073ac <_strtod_l+0xb04>)
 80072b0:	2200      	movs	r2, #0
 80072b2:	4630      	mov	r0, r6
 80072b4:	4639      	mov	r1, r7
 80072b6:	f7f9 fbe9 	bl	8000a8c <__aeabi_dcmplt>
 80072ba:	b9c8      	cbnz	r0, 80072f0 <_strtod_l+0xa48>
 80072bc:	4b3e      	ldr	r3, [pc, #248]	; (80073b8 <_strtod_l+0xb10>)
 80072be:	2200      	movs	r2, #0
 80072c0:	4630      	mov	r0, r6
 80072c2:	4639      	mov	r1, r7
 80072c4:	f7f9 f970 	bl	80005a8 <__aeabi_dmul>
 80072c8:	4604      	mov	r4, r0
 80072ca:	460d      	mov	r5, r1
 80072cc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80072d0:	9416      	str	r4, [sp, #88]	; 0x58
 80072d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80072d4:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80072d8:	e7a2      	b.n	8007220 <_strtod_l+0x978>
 80072da:	f1b8 0f01 	cmp.w	r8, #1
 80072de:	d103      	bne.n	80072e8 <_strtod_l+0xa40>
 80072e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f43f ad94 	beq.w	8006e10 <_strtod_l+0x568>
 80072e8:	4f34      	ldr	r7, [pc, #208]	; (80073bc <_strtod_l+0xb14>)
 80072ea:	2600      	movs	r6, #0
 80072ec:	2400      	movs	r4, #0
 80072ee:	e796      	b.n	800721e <_strtod_l+0x976>
 80072f0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80072f2:	4d31      	ldr	r5, [pc, #196]	; (80073b8 <_strtod_l+0xb10>)
 80072f4:	e7ea      	b.n	80072cc <_strtod_l+0xa24>
 80072f6:	4b30      	ldr	r3, [pc, #192]	; (80073b8 <_strtod_l+0xb10>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	4630      	mov	r0, r6
 80072fc:	4639      	mov	r1, r7
 80072fe:	f7f9 f953 	bl	80005a8 <__aeabi_dmul>
 8007302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007304:	4604      	mov	r4, r0
 8007306:	460d      	mov	r5, r1
 8007308:	b933      	cbnz	r3, 8007318 <_strtod_l+0xa70>
 800730a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800730e:	9010      	str	r0, [sp, #64]	; 0x40
 8007310:	9311      	str	r3, [sp, #68]	; 0x44
 8007312:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007316:	e783      	b.n	8007220 <_strtod_l+0x978>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007320:	e7f7      	b.n	8007312 <_strtod_l+0xa6a>
 8007322:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007326:	9b05      	ldr	r3, [sp, #20]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1a8      	bne.n	800727e <_strtod_l+0x9d6>
 800732c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007330:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007332:	0d1b      	lsrs	r3, r3, #20
 8007334:	051b      	lsls	r3, r3, #20
 8007336:	429a      	cmp	r2, r3
 8007338:	d1a1      	bne.n	800727e <_strtod_l+0x9d6>
 800733a:	4620      	mov	r0, r4
 800733c:	4629      	mov	r1, r5
 800733e:	f7f9 fce3 	bl	8000d08 <__aeabi_d2lz>
 8007342:	f7f9 f903 	bl	800054c <__aeabi_l2d>
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	4620      	mov	r0, r4
 800734c:	4629      	mov	r1, r5
 800734e:	f7f8 ff73 	bl	8000238 <__aeabi_dsub>
 8007352:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007354:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007358:	ea43 0308 	orr.w	r3, r3, r8
 800735c:	4313      	orrs	r3, r2
 800735e:	4604      	mov	r4, r0
 8007360:	460d      	mov	r5, r1
 8007362:	d068      	beq.n	8007436 <_strtod_l+0xb8e>
 8007364:	a30a      	add	r3, pc, #40	; (adr r3, 8007390 <_strtod_l+0xae8>)
 8007366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736a:	f7f9 fb8f 	bl	8000a8c <__aeabi_dcmplt>
 800736e:	2800      	cmp	r0, #0
 8007370:	f47f ace4 	bne.w	8006d3c <_strtod_l+0x494>
 8007374:	a308      	add	r3, pc, #32	; (adr r3, 8007398 <_strtod_l+0xaf0>)
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	4620      	mov	r0, r4
 800737c:	4629      	mov	r1, r5
 800737e:	f7f9 fba3 	bl	8000ac8 <__aeabi_dcmpgt>
 8007382:	2800      	cmp	r0, #0
 8007384:	f43f af7b 	beq.w	800727e <_strtod_l+0x9d6>
 8007388:	e4d8      	b.n	8006d3c <_strtod_l+0x494>
 800738a:	bf00      	nop
 800738c:	f3af 8000 	nop.w
 8007390:	94a03595 	.word	0x94a03595
 8007394:	3fdfffff 	.word	0x3fdfffff
 8007398:	35afe535 	.word	0x35afe535
 800739c:	3fe00000 	.word	0x3fe00000
 80073a0:	000fffff 	.word	0x000fffff
 80073a4:	7ff00000 	.word	0x7ff00000
 80073a8:	7fefffff 	.word	0x7fefffff
 80073ac:	3ff00000 	.word	0x3ff00000
 80073b0:	7fe00000 	.word	0x7fe00000
 80073b4:	7c9fffff 	.word	0x7c9fffff
 80073b8:	3fe00000 	.word	0x3fe00000
 80073bc:	bff00000 	.word	0xbff00000
 80073c0:	9b05      	ldr	r3, [sp, #20]
 80073c2:	b313      	cbz	r3, 800740a <_strtod_l+0xb62>
 80073c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80073ca:	d81e      	bhi.n	800740a <_strtod_l+0xb62>
 80073cc:	a326      	add	r3, pc, #152	; (adr r3, 8007468 <_strtod_l+0xbc0>)
 80073ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d2:	4620      	mov	r0, r4
 80073d4:	4629      	mov	r1, r5
 80073d6:	f7f9 fb63 	bl	8000aa0 <__aeabi_dcmple>
 80073da:	b190      	cbz	r0, 8007402 <_strtod_l+0xb5a>
 80073dc:	4629      	mov	r1, r5
 80073de:	4620      	mov	r0, r4
 80073e0:	f7f9 fbba 	bl	8000b58 <__aeabi_d2uiz>
 80073e4:	2801      	cmp	r0, #1
 80073e6:	bf38      	it	cc
 80073e8:	2001      	movcc	r0, #1
 80073ea:	f7f9 f863 	bl	80004b4 <__aeabi_ui2d>
 80073ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073f0:	4604      	mov	r4, r0
 80073f2:	460d      	mov	r5, r1
 80073f4:	b9d3      	cbnz	r3, 800742c <_strtod_l+0xb84>
 80073f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073fa:	9012      	str	r0, [sp, #72]	; 0x48
 80073fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80073fe:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007402:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007404:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007408:	1a9f      	subs	r7, r3, r2
 800740a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800740e:	f001 fe2b 	bl	8009068 <__ulp>
 8007412:	4602      	mov	r2, r0
 8007414:	460b      	mov	r3, r1
 8007416:	4630      	mov	r0, r6
 8007418:	4639      	mov	r1, r7
 800741a:	f7f9 f8c5 	bl	80005a8 <__aeabi_dmul>
 800741e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007422:	f7f8 ff0b 	bl	800023c <__adddf3>
 8007426:	4680      	mov	r8, r0
 8007428:	4689      	mov	r9, r1
 800742a:	e77c      	b.n	8007326 <_strtod_l+0xa7e>
 800742c:	4602      	mov	r2, r0
 800742e:	460b      	mov	r3, r1
 8007430:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007434:	e7e3      	b.n	80073fe <_strtod_l+0xb56>
 8007436:	a30e      	add	r3, pc, #56	; (adr r3, 8007470 <_strtod_l+0xbc8>)
 8007438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743c:	f7f9 fb26 	bl	8000a8c <__aeabi_dcmplt>
 8007440:	e79f      	b.n	8007382 <_strtod_l+0xada>
 8007442:	2300      	movs	r3, #0
 8007444:	930a      	str	r3, [sp, #40]	; 0x28
 8007446:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007448:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800744a:	6013      	str	r3, [r2, #0]
 800744c:	f7ff ba71 	b.w	8006932 <_strtod_l+0x8a>
 8007450:	2a65      	cmp	r2, #101	; 0x65
 8007452:	f43f ab63 	beq.w	8006b1c <_strtod_l+0x274>
 8007456:	2a45      	cmp	r2, #69	; 0x45
 8007458:	f43f ab60 	beq.w	8006b1c <_strtod_l+0x274>
 800745c:	2301      	movs	r3, #1
 800745e:	f7ff bb95 	b.w	8006b8c <_strtod_l+0x2e4>
 8007462:	bf00      	nop
 8007464:	f3af 8000 	nop.w
 8007468:	ffc00000 	.word	0xffc00000
 800746c:	41dfffff 	.word	0x41dfffff
 8007470:	94a03595 	.word	0x94a03595
 8007474:	3fcfffff 	.word	0x3fcfffff

08007478 <_strtod_r>:
 8007478:	4b01      	ldr	r3, [pc, #4]	; (8007480 <_strtod_r+0x8>)
 800747a:	f7ff ba15 	b.w	80068a8 <_strtod_l>
 800747e:	bf00      	nop
 8007480:	20000074 	.word	0x20000074

08007484 <_strtol_l.constprop.0>:
 8007484:	2b01      	cmp	r3, #1
 8007486:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800748a:	4680      	mov	r8, r0
 800748c:	d001      	beq.n	8007492 <_strtol_l.constprop.0+0xe>
 800748e:	2b24      	cmp	r3, #36	; 0x24
 8007490:	d906      	bls.n	80074a0 <_strtol_l.constprop.0+0x1c>
 8007492:	f7fe fb29 	bl	8005ae8 <__errno>
 8007496:	2316      	movs	r3, #22
 8007498:	6003      	str	r3, [r0, #0]
 800749a:	2000      	movs	r0, #0
 800749c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a0:	4f35      	ldr	r7, [pc, #212]	; (8007578 <_strtol_l.constprop.0+0xf4>)
 80074a2:	460d      	mov	r5, r1
 80074a4:	4628      	mov	r0, r5
 80074a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074aa:	5de6      	ldrb	r6, [r4, r7]
 80074ac:	f016 0608 	ands.w	r6, r6, #8
 80074b0:	d1f8      	bne.n	80074a4 <_strtol_l.constprop.0+0x20>
 80074b2:	2c2d      	cmp	r4, #45	; 0x2d
 80074b4:	d12f      	bne.n	8007516 <_strtol_l.constprop.0+0x92>
 80074b6:	782c      	ldrb	r4, [r5, #0]
 80074b8:	2601      	movs	r6, #1
 80074ba:	1c85      	adds	r5, r0, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d057      	beq.n	8007570 <_strtol_l.constprop.0+0xec>
 80074c0:	2b10      	cmp	r3, #16
 80074c2:	d109      	bne.n	80074d8 <_strtol_l.constprop.0+0x54>
 80074c4:	2c30      	cmp	r4, #48	; 0x30
 80074c6:	d107      	bne.n	80074d8 <_strtol_l.constprop.0+0x54>
 80074c8:	7828      	ldrb	r0, [r5, #0]
 80074ca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80074ce:	2858      	cmp	r0, #88	; 0x58
 80074d0:	d149      	bne.n	8007566 <_strtol_l.constprop.0+0xe2>
 80074d2:	786c      	ldrb	r4, [r5, #1]
 80074d4:	2310      	movs	r3, #16
 80074d6:	3502      	adds	r5, #2
 80074d8:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80074dc:	f10e 3eff 	add.w	lr, lr, #4294967295
 80074e0:	2700      	movs	r7, #0
 80074e2:	fbbe f9f3 	udiv	r9, lr, r3
 80074e6:	4638      	mov	r0, r7
 80074e8:	fb03 ea19 	mls	sl, r3, r9, lr
 80074ec:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80074f0:	f1bc 0f09 	cmp.w	ip, #9
 80074f4:	d814      	bhi.n	8007520 <_strtol_l.constprop.0+0x9c>
 80074f6:	4664      	mov	r4, ip
 80074f8:	42a3      	cmp	r3, r4
 80074fa:	dd22      	ble.n	8007542 <_strtol_l.constprop.0+0xbe>
 80074fc:	2f00      	cmp	r7, #0
 80074fe:	db1d      	blt.n	800753c <_strtol_l.constprop.0+0xb8>
 8007500:	4581      	cmp	r9, r0
 8007502:	d31b      	bcc.n	800753c <_strtol_l.constprop.0+0xb8>
 8007504:	d101      	bne.n	800750a <_strtol_l.constprop.0+0x86>
 8007506:	45a2      	cmp	sl, r4
 8007508:	db18      	blt.n	800753c <_strtol_l.constprop.0+0xb8>
 800750a:	fb00 4003 	mla	r0, r0, r3, r4
 800750e:	2701      	movs	r7, #1
 8007510:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007514:	e7ea      	b.n	80074ec <_strtol_l.constprop.0+0x68>
 8007516:	2c2b      	cmp	r4, #43	; 0x2b
 8007518:	bf04      	itt	eq
 800751a:	782c      	ldrbeq	r4, [r5, #0]
 800751c:	1c85      	addeq	r5, r0, #2
 800751e:	e7cd      	b.n	80074bc <_strtol_l.constprop.0+0x38>
 8007520:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007524:	f1bc 0f19 	cmp.w	ip, #25
 8007528:	d801      	bhi.n	800752e <_strtol_l.constprop.0+0xaa>
 800752a:	3c37      	subs	r4, #55	; 0x37
 800752c:	e7e4      	b.n	80074f8 <_strtol_l.constprop.0+0x74>
 800752e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007532:	f1bc 0f19 	cmp.w	ip, #25
 8007536:	d804      	bhi.n	8007542 <_strtol_l.constprop.0+0xbe>
 8007538:	3c57      	subs	r4, #87	; 0x57
 800753a:	e7dd      	b.n	80074f8 <_strtol_l.constprop.0+0x74>
 800753c:	f04f 37ff 	mov.w	r7, #4294967295
 8007540:	e7e6      	b.n	8007510 <_strtol_l.constprop.0+0x8c>
 8007542:	2f00      	cmp	r7, #0
 8007544:	da07      	bge.n	8007556 <_strtol_l.constprop.0+0xd2>
 8007546:	2322      	movs	r3, #34	; 0x22
 8007548:	f8c8 3000 	str.w	r3, [r8]
 800754c:	4670      	mov	r0, lr
 800754e:	2a00      	cmp	r2, #0
 8007550:	d0a4      	beq.n	800749c <_strtol_l.constprop.0+0x18>
 8007552:	1e69      	subs	r1, r5, #1
 8007554:	e005      	b.n	8007562 <_strtol_l.constprop.0+0xde>
 8007556:	b106      	cbz	r6, 800755a <_strtol_l.constprop.0+0xd6>
 8007558:	4240      	negs	r0, r0
 800755a:	2a00      	cmp	r2, #0
 800755c:	d09e      	beq.n	800749c <_strtol_l.constprop.0+0x18>
 800755e:	2f00      	cmp	r7, #0
 8007560:	d1f7      	bne.n	8007552 <_strtol_l.constprop.0+0xce>
 8007562:	6011      	str	r1, [r2, #0]
 8007564:	e79a      	b.n	800749c <_strtol_l.constprop.0+0x18>
 8007566:	2430      	movs	r4, #48	; 0x30
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1b5      	bne.n	80074d8 <_strtol_l.constprop.0+0x54>
 800756c:	2308      	movs	r3, #8
 800756e:	e7b3      	b.n	80074d8 <_strtol_l.constprop.0+0x54>
 8007570:	2c30      	cmp	r4, #48	; 0x30
 8007572:	d0a9      	beq.n	80074c8 <_strtol_l.constprop.0+0x44>
 8007574:	230a      	movs	r3, #10
 8007576:	e7af      	b.n	80074d8 <_strtol_l.constprop.0+0x54>
 8007578:	0800a509 	.word	0x0800a509

0800757c <_strtol_r>:
 800757c:	f7ff bf82 	b.w	8007484 <_strtol_l.constprop.0>

08007580 <quorem>:
 8007580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007584:	6903      	ldr	r3, [r0, #16]
 8007586:	690c      	ldr	r4, [r1, #16]
 8007588:	42a3      	cmp	r3, r4
 800758a:	4607      	mov	r7, r0
 800758c:	db7d      	blt.n	800768a <quorem+0x10a>
 800758e:	3c01      	subs	r4, #1
 8007590:	f101 0814 	add.w	r8, r1, #20
 8007594:	f100 0514 	add.w	r5, r0, #20
 8007598:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800759c:	9301      	str	r3, [sp, #4]
 800759e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075a6:	3301      	adds	r3, #1
 80075a8:	429a      	cmp	r2, r3
 80075aa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80075ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075b2:	fbb2 f6f3 	udiv	r6, r2, r3
 80075b6:	d32e      	bcc.n	8007616 <quorem+0x96>
 80075b8:	f04f 0e00 	mov.w	lr, #0
 80075bc:	4640      	mov	r0, r8
 80075be:	46ac      	mov	ip, r5
 80075c0:	46f2      	mov	sl, lr
 80075c2:	f850 2b04 	ldr.w	r2, [r0], #4
 80075c6:	b293      	uxth	r3, r2
 80075c8:	fb06 e303 	mla	r3, r6, r3, lr
 80075cc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80075d0:	0c12      	lsrs	r2, r2, #16
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	fb06 e202 	mla	r2, r6, r2, lr
 80075d8:	ebaa 0303 	sub.w	r3, sl, r3
 80075dc:	f8dc a000 	ldr.w	sl, [ip]
 80075e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075e4:	b292      	uxth	r2, r2
 80075e6:	fa13 f38a 	uxtah	r3, r3, sl
 80075ea:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80075ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075f8:	4581      	cmp	r9, r0
 80075fa:	f84c 3b04 	str.w	r3, [ip], #4
 80075fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007602:	d2de      	bcs.n	80075c2 <quorem+0x42>
 8007604:	f855 300b 	ldr.w	r3, [r5, fp]
 8007608:	b92b      	cbnz	r3, 8007616 <quorem+0x96>
 800760a:	9b01      	ldr	r3, [sp, #4]
 800760c:	3b04      	subs	r3, #4
 800760e:	429d      	cmp	r5, r3
 8007610:	461a      	mov	r2, r3
 8007612:	d32e      	bcc.n	8007672 <quorem+0xf2>
 8007614:	613c      	str	r4, [r7, #16]
 8007616:	4638      	mov	r0, r7
 8007618:	f001 fc82 	bl	8008f20 <__mcmp>
 800761c:	2800      	cmp	r0, #0
 800761e:	db24      	blt.n	800766a <quorem+0xea>
 8007620:	3601      	adds	r6, #1
 8007622:	4628      	mov	r0, r5
 8007624:	f04f 0c00 	mov.w	ip, #0
 8007628:	f858 2b04 	ldr.w	r2, [r8], #4
 800762c:	f8d0 e000 	ldr.w	lr, [r0]
 8007630:	b293      	uxth	r3, r2
 8007632:	ebac 0303 	sub.w	r3, ip, r3
 8007636:	0c12      	lsrs	r2, r2, #16
 8007638:	fa13 f38e 	uxtah	r3, r3, lr
 800763c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007640:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007644:	b29b      	uxth	r3, r3
 8007646:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800764a:	45c1      	cmp	r9, r8
 800764c:	f840 3b04 	str.w	r3, [r0], #4
 8007650:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007654:	d2e8      	bcs.n	8007628 <quorem+0xa8>
 8007656:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800765a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800765e:	b922      	cbnz	r2, 800766a <quorem+0xea>
 8007660:	3b04      	subs	r3, #4
 8007662:	429d      	cmp	r5, r3
 8007664:	461a      	mov	r2, r3
 8007666:	d30a      	bcc.n	800767e <quorem+0xfe>
 8007668:	613c      	str	r4, [r7, #16]
 800766a:	4630      	mov	r0, r6
 800766c:	b003      	add	sp, #12
 800766e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007672:	6812      	ldr	r2, [r2, #0]
 8007674:	3b04      	subs	r3, #4
 8007676:	2a00      	cmp	r2, #0
 8007678:	d1cc      	bne.n	8007614 <quorem+0x94>
 800767a:	3c01      	subs	r4, #1
 800767c:	e7c7      	b.n	800760e <quorem+0x8e>
 800767e:	6812      	ldr	r2, [r2, #0]
 8007680:	3b04      	subs	r3, #4
 8007682:	2a00      	cmp	r2, #0
 8007684:	d1f0      	bne.n	8007668 <quorem+0xe8>
 8007686:	3c01      	subs	r4, #1
 8007688:	e7eb      	b.n	8007662 <quorem+0xe2>
 800768a:	2000      	movs	r0, #0
 800768c:	e7ee      	b.n	800766c <quorem+0xec>
	...

08007690 <_dtoa_r>:
 8007690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007694:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007696:	b099      	sub	sp, #100	; 0x64
 8007698:	4616      	mov	r6, r2
 800769a:	461f      	mov	r7, r3
 800769c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80076a0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80076a4:	4605      	mov	r5, r0
 80076a6:	b974      	cbnz	r4, 80076c6 <_dtoa_r+0x36>
 80076a8:	2010      	movs	r0, #16
 80076aa:	f001 f949 	bl	8008940 <malloc>
 80076ae:	4602      	mov	r2, r0
 80076b0:	6268      	str	r0, [r5, #36]	; 0x24
 80076b2:	b920      	cbnz	r0, 80076be <_dtoa_r+0x2e>
 80076b4:	4ba8      	ldr	r3, [pc, #672]	; (8007958 <_dtoa_r+0x2c8>)
 80076b6:	21ea      	movs	r1, #234	; 0xea
 80076b8:	48a8      	ldr	r0, [pc, #672]	; (800795c <_dtoa_r+0x2cc>)
 80076ba:	f002 f8a3 	bl	8009804 <__assert_func>
 80076be:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076c2:	6004      	str	r4, [r0, #0]
 80076c4:	60c4      	str	r4, [r0, #12]
 80076c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80076c8:	6819      	ldr	r1, [r3, #0]
 80076ca:	b151      	cbz	r1, 80076e2 <_dtoa_r+0x52>
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	604a      	str	r2, [r1, #4]
 80076d0:	2301      	movs	r3, #1
 80076d2:	4093      	lsls	r3, r2
 80076d4:	608b      	str	r3, [r1, #8]
 80076d6:	4628      	mov	r0, r5
 80076d8:	f001 f99a 	bl	8008a10 <_Bfree>
 80076dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80076de:	2200      	movs	r2, #0
 80076e0:	601a      	str	r2, [r3, #0]
 80076e2:	1e3b      	subs	r3, r7, #0
 80076e4:	bfb9      	ittee	lt
 80076e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80076ea:	9305      	strlt	r3, [sp, #20]
 80076ec:	2300      	movge	r3, #0
 80076ee:	f8c8 3000 	strge.w	r3, [r8]
 80076f2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80076f6:	4b9a      	ldr	r3, [pc, #616]	; (8007960 <_dtoa_r+0x2d0>)
 80076f8:	bfbc      	itt	lt
 80076fa:	2201      	movlt	r2, #1
 80076fc:	f8c8 2000 	strlt.w	r2, [r8]
 8007700:	ea33 0309 	bics.w	r3, r3, r9
 8007704:	d119      	bne.n	800773a <_dtoa_r+0xaa>
 8007706:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007708:	f242 730f 	movw	r3, #9999	; 0x270f
 800770c:	6013      	str	r3, [r2, #0]
 800770e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007712:	4333      	orrs	r3, r6
 8007714:	f000 8580 	beq.w	8008218 <_dtoa_r+0xb88>
 8007718:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800771a:	b953      	cbnz	r3, 8007732 <_dtoa_r+0xa2>
 800771c:	4b91      	ldr	r3, [pc, #580]	; (8007964 <_dtoa_r+0x2d4>)
 800771e:	e022      	b.n	8007766 <_dtoa_r+0xd6>
 8007720:	4b91      	ldr	r3, [pc, #580]	; (8007968 <_dtoa_r+0x2d8>)
 8007722:	9303      	str	r3, [sp, #12]
 8007724:	3308      	adds	r3, #8
 8007726:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007728:	6013      	str	r3, [r2, #0]
 800772a:	9803      	ldr	r0, [sp, #12]
 800772c:	b019      	add	sp, #100	; 0x64
 800772e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007732:	4b8c      	ldr	r3, [pc, #560]	; (8007964 <_dtoa_r+0x2d4>)
 8007734:	9303      	str	r3, [sp, #12]
 8007736:	3303      	adds	r3, #3
 8007738:	e7f5      	b.n	8007726 <_dtoa_r+0x96>
 800773a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800773e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007742:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007746:	2200      	movs	r2, #0
 8007748:	2300      	movs	r3, #0
 800774a:	f7f9 f995 	bl	8000a78 <__aeabi_dcmpeq>
 800774e:	4680      	mov	r8, r0
 8007750:	b158      	cbz	r0, 800776a <_dtoa_r+0xda>
 8007752:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007754:	2301      	movs	r3, #1
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 8559 	beq.w	8008212 <_dtoa_r+0xb82>
 8007760:	4882      	ldr	r0, [pc, #520]	; (800796c <_dtoa_r+0x2dc>)
 8007762:	6018      	str	r0, [r3, #0]
 8007764:	1e43      	subs	r3, r0, #1
 8007766:	9303      	str	r3, [sp, #12]
 8007768:	e7df      	b.n	800772a <_dtoa_r+0x9a>
 800776a:	ab16      	add	r3, sp, #88	; 0x58
 800776c:	9301      	str	r3, [sp, #4]
 800776e:	ab17      	add	r3, sp, #92	; 0x5c
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	4628      	mov	r0, r5
 8007774:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007778:	f001 fcf0 	bl	800915c <__d2b>
 800777c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007780:	4683      	mov	fp, r0
 8007782:	2c00      	cmp	r4, #0
 8007784:	d07e      	beq.n	8007884 <_dtoa_r+0x1f4>
 8007786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007788:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800778c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007790:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007794:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007798:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800779c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80077a0:	4b73      	ldr	r3, [pc, #460]	; (8007970 <_dtoa_r+0x2e0>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	f7f8 fd48 	bl	8000238 <__aeabi_dsub>
 80077a8:	a365      	add	r3, pc, #404	; (adr r3, 8007940 <_dtoa_r+0x2b0>)
 80077aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ae:	f7f8 fefb 	bl	80005a8 <__aeabi_dmul>
 80077b2:	a365      	add	r3, pc, #404	; (adr r3, 8007948 <_dtoa_r+0x2b8>)
 80077b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b8:	f7f8 fd40 	bl	800023c <__adddf3>
 80077bc:	4606      	mov	r6, r0
 80077be:	4620      	mov	r0, r4
 80077c0:	460f      	mov	r7, r1
 80077c2:	f7f8 fe87 	bl	80004d4 <__aeabi_i2d>
 80077c6:	a362      	add	r3, pc, #392	; (adr r3, 8007950 <_dtoa_r+0x2c0>)
 80077c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077cc:	f7f8 feec 	bl	80005a8 <__aeabi_dmul>
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4630      	mov	r0, r6
 80077d6:	4639      	mov	r1, r7
 80077d8:	f7f8 fd30 	bl	800023c <__adddf3>
 80077dc:	4606      	mov	r6, r0
 80077de:	460f      	mov	r7, r1
 80077e0:	f7f9 f992 	bl	8000b08 <__aeabi_d2iz>
 80077e4:	2200      	movs	r2, #0
 80077e6:	4682      	mov	sl, r0
 80077e8:	2300      	movs	r3, #0
 80077ea:	4630      	mov	r0, r6
 80077ec:	4639      	mov	r1, r7
 80077ee:	f7f9 f94d 	bl	8000a8c <__aeabi_dcmplt>
 80077f2:	b148      	cbz	r0, 8007808 <_dtoa_r+0x178>
 80077f4:	4650      	mov	r0, sl
 80077f6:	f7f8 fe6d 	bl	80004d4 <__aeabi_i2d>
 80077fa:	4632      	mov	r2, r6
 80077fc:	463b      	mov	r3, r7
 80077fe:	f7f9 f93b 	bl	8000a78 <__aeabi_dcmpeq>
 8007802:	b908      	cbnz	r0, 8007808 <_dtoa_r+0x178>
 8007804:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007808:	f1ba 0f16 	cmp.w	sl, #22
 800780c:	d857      	bhi.n	80078be <_dtoa_r+0x22e>
 800780e:	4b59      	ldr	r3, [pc, #356]	; (8007974 <_dtoa_r+0x2e4>)
 8007810:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800781c:	f7f9 f936 	bl	8000a8c <__aeabi_dcmplt>
 8007820:	2800      	cmp	r0, #0
 8007822:	d04e      	beq.n	80078c2 <_dtoa_r+0x232>
 8007824:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007828:	2300      	movs	r3, #0
 800782a:	930f      	str	r3, [sp, #60]	; 0x3c
 800782c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800782e:	1b1c      	subs	r4, r3, r4
 8007830:	1e63      	subs	r3, r4, #1
 8007832:	9309      	str	r3, [sp, #36]	; 0x24
 8007834:	bf45      	ittet	mi
 8007836:	f1c4 0301 	rsbmi	r3, r4, #1
 800783a:	9306      	strmi	r3, [sp, #24]
 800783c:	2300      	movpl	r3, #0
 800783e:	2300      	movmi	r3, #0
 8007840:	bf4c      	ite	mi
 8007842:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007844:	9306      	strpl	r3, [sp, #24]
 8007846:	f1ba 0f00 	cmp.w	sl, #0
 800784a:	db3c      	blt.n	80078c6 <_dtoa_r+0x236>
 800784c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800784e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007852:	4453      	add	r3, sl
 8007854:	9309      	str	r3, [sp, #36]	; 0x24
 8007856:	2300      	movs	r3, #0
 8007858:	930a      	str	r3, [sp, #40]	; 0x28
 800785a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800785c:	2b09      	cmp	r3, #9
 800785e:	f200 808d 	bhi.w	800797c <_dtoa_r+0x2ec>
 8007862:	2b05      	cmp	r3, #5
 8007864:	bfc4      	itt	gt
 8007866:	3b04      	subgt	r3, #4
 8007868:	9322      	strgt	r3, [sp, #136]	; 0x88
 800786a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800786c:	f1a3 0302 	sub.w	r3, r3, #2
 8007870:	bfcc      	ite	gt
 8007872:	2400      	movgt	r4, #0
 8007874:	2401      	movle	r4, #1
 8007876:	2b03      	cmp	r3, #3
 8007878:	f200 808c 	bhi.w	8007994 <_dtoa_r+0x304>
 800787c:	e8df f003 	tbb	[pc, r3]
 8007880:	5b4d4f2d 	.word	0x5b4d4f2d
 8007884:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007888:	441c      	add	r4, r3
 800788a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800788e:	2b20      	cmp	r3, #32
 8007890:	bfc3      	ittte	gt
 8007892:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007896:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800789a:	fa09 f303 	lslgt.w	r3, r9, r3
 800789e:	f1c3 0320 	rsble	r3, r3, #32
 80078a2:	bfc6      	itte	gt
 80078a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80078a8:	4318      	orrgt	r0, r3
 80078aa:	fa06 f003 	lslle.w	r0, r6, r3
 80078ae:	f7f8 fe01 	bl	80004b4 <__aeabi_ui2d>
 80078b2:	2301      	movs	r3, #1
 80078b4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80078b8:	3c01      	subs	r4, #1
 80078ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80078bc:	e770      	b.n	80077a0 <_dtoa_r+0x110>
 80078be:	2301      	movs	r3, #1
 80078c0:	e7b3      	b.n	800782a <_dtoa_r+0x19a>
 80078c2:	900f      	str	r0, [sp, #60]	; 0x3c
 80078c4:	e7b2      	b.n	800782c <_dtoa_r+0x19c>
 80078c6:	9b06      	ldr	r3, [sp, #24]
 80078c8:	eba3 030a 	sub.w	r3, r3, sl
 80078cc:	9306      	str	r3, [sp, #24]
 80078ce:	f1ca 0300 	rsb	r3, sl, #0
 80078d2:	930a      	str	r3, [sp, #40]	; 0x28
 80078d4:	2300      	movs	r3, #0
 80078d6:	930e      	str	r3, [sp, #56]	; 0x38
 80078d8:	e7bf      	b.n	800785a <_dtoa_r+0x1ca>
 80078da:	2300      	movs	r3, #0
 80078dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80078de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	dc5a      	bgt.n	800799a <_dtoa_r+0x30a>
 80078e4:	f04f 0901 	mov.w	r9, #1
 80078e8:	f8cd 9020 	str.w	r9, [sp, #32]
 80078ec:	464b      	mov	r3, r9
 80078ee:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80078f2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80078f4:	2200      	movs	r2, #0
 80078f6:	6042      	str	r2, [r0, #4]
 80078f8:	2204      	movs	r2, #4
 80078fa:	f102 0614 	add.w	r6, r2, #20
 80078fe:	429e      	cmp	r6, r3
 8007900:	6841      	ldr	r1, [r0, #4]
 8007902:	d950      	bls.n	80079a6 <_dtoa_r+0x316>
 8007904:	4628      	mov	r0, r5
 8007906:	f001 f843 	bl	8008990 <_Balloc>
 800790a:	9003      	str	r0, [sp, #12]
 800790c:	2800      	cmp	r0, #0
 800790e:	d14e      	bne.n	80079ae <_dtoa_r+0x31e>
 8007910:	4b19      	ldr	r3, [pc, #100]	; (8007978 <_dtoa_r+0x2e8>)
 8007912:	4602      	mov	r2, r0
 8007914:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007918:	e6ce      	b.n	80076b8 <_dtoa_r+0x28>
 800791a:	2301      	movs	r3, #1
 800791c:	e7de      	b.n	80078dc <_dtoa_r+0x24c>
 800791e:	2300      	movs	r3, #0
 8007920:	930b      	str	r3, [sp, #44]	; 0x2c
 8007922:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007924:	eb0a 0903 	add.w	r9, sl, r3
 8007928:	f109 0301 	add.w	r3, r9, #1
 800792c:	2b01      	cmp	r3, #1
 800792e:	9308      	str	r3, [sp, #32]
 8007930:	bfb8      	it	lt
 8007932:	2301      	movlt	r3, #1
 8007934:	e7dd      	b.n	80078f2 <_dtoa_r+0x262>
 8007936:	2301      	movs	r3, #1
 8007938:	e7f2      	b.n	8007920 <_dtoa_r+0x290>
 800793a:	bf00      	nop
 800793c:	f3af 8000 	nop.w
 8007940:	636f4361 	.word	0x636f4361
 8007944:	3fd287a7 	.word	0x3fd287a7
 8007948:	8b60c8b3 	.word	0x8b60c8b3
 800794c:	3fc68a28 	.word	0x3fc68a28
 8007950:	509f79fb 	.word	0x509f79fb
 8007954:	3fd34413 	.word	0x3fd34413
 8007958:	0800a616 	.word	0x0800a616
 800795c:	0800a62d 	.word	0x0800a62d
 8007960:	7ff00000 	.word	0x7ff00000
 8007964:	0800a612 	.word	0x0800a612
 8007968:	0800a609 	.word	0x0800a609
 800796c:	0800a489 	.word	0x0800a489
 8007970:	3ff80000 	.word	0x3ff80000
 8007974:	0800a798 	.word	0x0800a798
 8007978:	0800a688 	.word	0x0800a688
 800797c:	2401      	movs	r4, #1
 800797e:	2300      	movs	r3, #0
 8007980:	9322      	str	r3, [sp, #136]	; 0x88
 8007982:	940b      	str	r4, [sp, #44]	; 0x2c
 8007984:	f04f 39ff 	mov.w	r9, #4294967295
 8007988:	2200      	movs	r2, #0
 800798a:	f8cd 9020 	str.w	r9, [sp, #32]
 800798e:	2312      	movs	r3, #18
 8007990:	9223      	str	r2, [sp, #140]	; 0x8c
 8007992:	e7ae      	b.n	80078f2 <_dtoa_r+0x262>
 8007994:	2301      	movs	r3, #1
 8007996:	930b      	str	r3, [sp, #44]	; 0x2c
 8007998:	e7f4      	b.n	8007984 <_dtoa_r+0x2f4>
 800799a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800799e:	f8cd 9020 	str.w	r9, [sp, #32]
 80079a2:	464b      	mov	r3, r9
 80079a4:	e7a5      	b.n	80078f2 <_dtoa_r+0x262>
 80079a6:	3101      	adds	r1, #1
 80079a8:	6041      	str	r1, [r0, #4]
 80079aa:	0052      	lsls	r2, r2, #1
 80079ac:	e7a5      	b.n	80078fa <_dtoa_r+0x26a>
 80079ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80079b0:	9a03      	ldr	r2, [sp, #12]
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	9b08      	ldr	r3, [sp, #32]
 80079b6:	2b0e      	cmp	r3, #14
 80079b8:	f200 80a8 	bhi.w	8007b0c <_dtoa_r+0x47c>
 80079bc:	2c00      	cmp	r4, #0
 80079be:	f000 80a5 	beq.w	8007b0c <_dtoa_r+0x47c>
 80079c2:	f1ba 0f00 	cmp.w	sl, #0
 80079c6:	dd34      	ble.n	8007a32 <_dtoa_r+0x3a2>
 80079c8:	4a9a      	ldr	r2, [pc, #616]	; (8007c34 <_dtoa_r+0x5a4>)
 80079ca:	f00a 030f 	and.w	r3, sl, #15
 80079ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80079d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80079d6:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80079da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80079de:	ea4f 142a 	mov.w	r4, sl, asr #4
 80079e2:	d016      	beq.n	8007a12 <_dtoa_r+0x382>
 80079e4:	4b94      	ldr	r3, [pc, #592]	; (8007c38 <_dtoa_r+0x5a8>)
 80079e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80079ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079ee:	f7f8 ff05 	bl	80007fc <__aeabi_ddiv>
 80079f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079f6:	f004 040f 	and.w	r4, r4, #15
 80079fa:	2703      	movs	r7, #3
 80079fc:	4e8e      	ldr	r6, [pc, #568]	; (8007c38 <_dtoa_r+0x5a8>)
 80079fe:	b954      	cbnz	r4, 8007a16 <_dtoa_r+0x386>
 8007a00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a08:	f7f8 fef8 	bl	80007fc <__aeabi_ddiv>
 8007a0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a10:	e029      	b.n	8007a66 <_dtoa_r+0x3d6>
 8007a12:	2702      	movs	r7, #2
 8007a14:	e7f2      	b.n	80079fc <_dtoa_r+0x36c>
 8007a16:	07e1      	lsls	r1, r4, #31
 8007a18:	d508      	bpl.n	8007a2c <_dtoa_r+0x39c>
 8007a1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a1e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a22:	f7f8 fdc1 	bl	80005a8 <__aeabi_dmul>
 8007a26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a2a:	3701      	adds	r7, #1
 8007a2c:	1064      	asrs	r4, r4, #1
 8007a2e:	3608      	adds	r6, #8
 8007a30:	e7e5      	b.n	80079fe <_dtoa_r+0x36e>
 8007a32:	f000 80a5 	beq.w	8007b80 <_dtoa_r+0x4f0>
 8007a36:	f1ca 0400 	rsb	r4, sl, #0
 8007a3a:	4b7e      	ldr	r3, [pc, #504]	; (8007c34 <_dtoa_r+0x5a4>)
 8007a3c:	4e7e      	ldr	r6, [pc, #504]	; (8007c38 <_dtoa_r+0x5a8>)
 8007a3e:	f004 020f 	and.w	r2, r4, #15
 8007a42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a4e:	f7f8 fdab 	bl	80005a8 <__aeabi_dmul>
 8007a52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a56:	1124      	asrs	r4, r4, #4
 8007a58:	2300      	movs	r3, #0
 8007a5a:	2702      	movs	r7, #2
 8007a5c:	2c00      	cmp	r4, #0
 8007a5e:	f040 8084 	bne.w	8007b6a <_dtoa_r+0x4da>
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1d2      	bne.n	8007a0c <_dtoa_r+0x37c>
 8007a66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 808b 	beq.w	8007b84 <_dtoa_r+0x4f4>
 8007a6e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007a72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007a76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a7a:	4b70      	ldr	r3, [pc, #448]	; (8007c3c <_dtoa_r+0x5ac>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f7f9 f805 	bl	8000a8c <__aeabi_dcmplt>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	d07e      	beq.n	8007b84 <_dtoa_r+0x4f4>
 8007a86:	9b08      	ldr	r3, [sp, #32]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d07b      	beq.n	8007b84 <_dtoa_r+0x4f4>
 8007a8c:	f1b9 0f00 	cmp.w	r9, #0
 8007a90:	dd38      	ble.n	8007b04 <_dtoa_r+0x474>
 8007a92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a96:	4b6a      	ldr	r3, [pc, #424]	; (8007c40 <_dtoa_r+0x5b0>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f7f8 fd85 	bl	80005a8 <__aeabi_dmul>
 8007a9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007aa2:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007aa6:	3701      	adds	r7, #1
 8007aa8:	464c      	mov	r4, r9
 8007aaa:	4638      	mov	r0, r7
 8007aac:	f7f8 fd12 	bl	80004d4 <__aeabi_i2d>
 8007ab0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ab4:	f7f8 fd78 	bl	80005a8 <__aeabi_dmul>
 8007ab8:	4b62      	ldr	r3, [pc, #392]	; (8007c44 <_dtoa_r+0x5b4>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	f7f8 fbbe 	bl	800023c <__adddf3>
 8007ac0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007ac4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ac8:	9611      	str	r6, [sp, #68]	; 0x44
 8007aca:	2c00      	cmp	r4, #0
 8007acc:	d15d      	bne.n	8007b8a <_dtoa_r+0x4fa>
 8007ace:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ad2:	4b5d      	ldr	r3, [pc, #372]	; (8007c48 <_dtoa_r+0x5b8>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f7f8 fbaf 	bl	8000238 <__aeabi_dsub>
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007ae2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ae4:	4633      	mov	r3, r6
 8007ae6:	f7f8 ffef 	bl	8000ac8 <__aeabi_dcmpgt>
 8007aea:	2800      	cmp	r0, #0
 8007aec:	f040 829c 	bne.w	8008028 <_dtoa_r+0x998>
 8007af0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007af4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007af6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007afa:	f7f8 ffc7 	bl	8000a8c <__aeabi_dcmplt>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	f040 8290 	bne.w	8008024 <_dtoa_r+0x994>
 8007b04:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007b08:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007b0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f2c0 8152 	blt.w	8007db8 <_dtoa_r+0x728>
 8007b14:	f1ba 0f0e 	cmp.w	sl, #14
 8007b18:	f300 814e 	bgt.w	8007db8 <_dtoa_r+0x728>
 8007b1c:	4b45      	ldr	r3, [pc, #276]	; (8007c34 <_dtoa_r+0x5a4>)
 8007b1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b22:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b26:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007b2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f280 80db 	bge.w	8007ce8 <_dtoa_r+0x658>
 8007b32:	9b08      	ldr	r3, [sp, #32]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f300 80d7 	bgt.w	8007ce8 <_dtoa_r+0x658>
 8007b3a:	f040 8272 	bne.w	8008022 <_dtoa_r+0x992>
 8007b3e:	4b42      	ldr	r3, [pc, #264]	; (8007c48 <_dtoa_r+0x5b8>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b46:	f7f8 fd2f 	bl	80005a8 <__aeabi_dmul>
 8007b4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b4e:	f7f8 ffb1 	bl	8000ab4 <__aeabi_dcmpge>
 8007b52:	9c08      	ldr	r4, [sp, #32]
 8007b54:	4626      	mov	r6, r4
 8007b56:	2800      	cmp	r0, #0
 8007b58:	f040 8248 	bne.w	8007fec <_dtoa_r+0x95c>
 8007b5c:	9f03      	ldr	r7, [sp, #12]
 8007b5e:	2331      	movs	r3, #49	; 0x31
 8007b60:	f807 3b01 	strb.w	r3, [r7], #1
 8007b64:	f10a 0a01 	add.w	sl, sl, #1
 8007b68:	e244      	b.n	8007ff4 <_dtoa_r+0x964>
 8007b6a:	07e2      	lsls	r2, r4, #31
 8007b6c:	d505      	bpl.n	8007b7a <_dtoa_r+0x4ea>
 8007b6e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b72:	f7f8 fd19 	bl	80005a8 <__aeabi_dmul>
 8007b76:	3701      	adds	r7, #1
 8007b78:	2301      	movs	r3, #1
 8007b7a:	1064      	asrs	r4, r4, #1
 8007b7c:	3608      	adds	r6, #8
 8007b7e:	e76d      	b.n	8007a5c <_dtoa_r+0x3cc>
 8007b80:	2702      	movs	r7, #2
 8007b82:	e770      	b.n	8007a66 <_dtoa_r+0x3d6>
 8007b84:	9c08      	ldr	r4, [sp, #32]
 8007b86:	46d0      	mov	r8, sl
 8007b88:	e78f      	b.n	8007aaa <_dtoa_r+0x41a>
 8007b8a:	9903      	ldr	r1, [sp, #12]
 8007b8c:	4b29      	ldr	r3, [pc, #164]	; (8007c34 <_dtoa_r+0x5a4>)
 8007b8e:	4421      	add	r1, r4
 8007b90:	9112      	str	r1, [sp, #72]	; 0x48
 8007b92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b98:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007b9c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ba0:	2900      	cmp	r1, #0
 8007ba2:	d055      	beq.n	8007c50 <_dtoa_r+0x5c0>
 8007ba4:	4929      	ldr	r1, [pc, #164]	; (8007c4c <_dtoa_r+0x5bc>)
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	f7f8 fe28 	bl	80007fc <__aeabi_ddiv>
 8007bac:	463b      	mov	r3, r7
 8007bae:	4632      	mov	r2, r6
 8007bb0:	f7f8 fb42 	bl	8000238 <__aeabi_dsub>
 8007bb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007bb8:	9f03      	ldr	r7, [sp, #12]
 8007bba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bbe:	f7f8 ffa3 	bl	8000b08 <__aeabi_d2iz>
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	f7f8 fc86 	bl	80004d4 <__aeabi_i2d>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	460b      	mov	r3, r1
 8007bcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bd0:	f7f8 fb32 	bl	8000238 <__aeabi_dsub>
 8007bd4:	3430      	adds	r4, #48	; 0x30
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	460b      	mov	r3, r1
 8007bda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007bde:	f807 4b01 	strb.w	r4, [r7], #1
 8007be2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007be6:	f7f8 ff51 	bl	8000a8c <__aeabi_dcmplt>
 8007bea:	2800      	cmp	r0, #0
 8007bec:	d174      	bne.n	8007cd8 <_dtoa_r+0x648>
 8007bee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bf2:	4912      	ldr	r1, [pc, #72]	; (8007c3c <_dtoa_r+0x5ac>)
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	f7f8 fb1f 	bl	8000238 <__aeabi_dsub>
 8007bfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007bfe:	f7f8 ff45 	bl	8000a8c <__aeabi_dcmplt>
 8007c02:	2800      	cmp	r0, #0
 8007c04:	f040 80b7 	bne.w	8007d76 <_dtoa_r+0x6e6>
 8007c08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c0a:	429f      	cmp	r7, r3
 8007c0c:	f43f af7a 	beq.w	8007b04 <_dtoa_r+0x474>
 8007c10:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c14:	4b0a      	ldr	r3, [pc, #40]	; (8007c40 <_dtoa_r+0x5b0>)
 8007c16:	2200      	movs	r2, #0
 8007c18:	f7f8 fcc6 	bl	80005a8 <__aeabi_dmul>
 8007c1c:	4b08      	ldr	r3, [pc, #32]	; (8007c40 <_dtoa_r+0x5b0>)
 8007c1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c22:	2200      	movs	r2, #0
 8007c24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c28:	f7f8 fcbe 	bl	80005a8 <__aeabi_dmul>
 8007c2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c30:	e7c3      	b.n	8007bba <_dtoa_r+0x52a>
 8007c32:	bf00      	nop
 8007c34:	0800a798 	.word	0x0800a798
 8007c38:	0800a770 	.word	0x0800a770
 8007c3c:	3ff00000 	.word	0x3ff00000
 8007c40:	40240000 	.word	0x40240000
 8007c44:	401c0000 	.word	0x401c0000
 8007c48:	40140000 	.word	0x40140000
 8007c4c:	3fe00000 	.word	0x3fe00000
 8007c50:	4630      	mov	r0, r6
 8007c52:	4639      	mov	r1, r7
 8007c54:	f7f8 fca8 	bl	80005a8 <__aeabi_dmul>
 8007c58:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c5e:	9c03      	ldr	r4, [sp, #12]
 8007c60:	9314      	str	r3, [sp, #80]	; 0x50
 8007c62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c66:	f7f8 ff4f 	bl	8000b08 <__aeabi_d2iz>
 8007c6a:	9015      	str	r0, [sp, #84]	; 0x54
 8007c6c:	f7f8 fc32 	bl	80004d4 <__aeabi_i2d>
 8007c70:	4602      	mov	r2, r0
 8007c72:	460b      	mov	r3, r1
 8007c74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c78:	f7f8 fade 	bl	8000238 <__aeabi_dsub>
 8007c7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c7e:	3330      	adds	r3, #48	; 0x30
 8007c80:	f804 3b01 	strb.w	r3, [r4], #1
 8007c84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c86:	429c      	cmp	r4, r3
 8007c88:	4606      	mov	r6, r0
 8007c8a:	460f      	mov	r7, r1
 8007c8c:	f04f 0200 	mov.w	r2, #0
 8007c90:	d124      	bne.n	8007cdc <_dtoa_r+0x64c>
 8007c92:	4ba4      	ldr	r3, [pc, #656]	; (8007f24 <_dtoa_r+0x894>)
 8007c94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c98:	f7f8 fad0 	bl	800023c <__adddf3>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	4639      	mov	r1, r7
 8007ca4:	f7f8 ff10 	bl	8000ac8 <__aeabi_dcmpgt>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d163      	bne.n	8007d74 <_dtoa_r+0x6e4>
 8007cac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007cb0:	499c      	ldr	r1, [pc, #624]	; (8007f24 <_dtoa_r+0x894>)
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	f7f8 fac0 	bl	8000238 <__aeabi_dsub>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	4639      	mov	r1, r7
 8007cc0:	f7f8 fee4 	bl	8000a8c <__aeabi_dcmplt>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	f43f af1d 	beq.w	8007b04 <_dtoa_r+0x474>
 8007cca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007ccc:	1e7b      	subs	r3, r7, #1
 8007cce:	9314      	str	r3, [sp, #80]	; 0x50
 8007cd0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007cd4:	2b30      	cmp	r3, #48	; 0x30
 8007cd6:	d0f8      	beq.n	8007cca <_dtoa_r+0x63a>
 8007cd8:	46c2      	mov	sl, r8
 8007cda:	e03b      	b.n	8007d54 <_dtoa_r+0x6c4>
 8007cdc:	4b92      	ldr	r3, [pc, #584]	; (8007f28 <_dtoa_r+0x898>)
 8007cde:	f7f8 fc63 	bl	80005a8 <__aeabi_dmul>
 8007ce2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ce6:	e7bc      	b.n	8007c62 <_dtoa_r+0x5d2>
 8007ce8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007cec:	9f03      	ldr	r7, [sp, #12]
 8007cee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	f7f8 fd81 	bl	80007fc <__aeabi_ddiv>
 8007cfa:	f7f8 ff05 	bl	8000b08 <__aeabi_d2iz>
 8007cfe:	4604      	mov	r4, r0
 8007d00:	f7f8 fbe8 	bl	80004d4 <__aeabi_i2d>
 8007d04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d08:	f7f8 fc4e 	bl	80005a8 <__aeabi_dmul>
 8007d0c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007d10:	4602      	mov	r2, r0
 8007d12:	460b      	mov	r3, r1
 8007d14:	4640      	mov	r0, r8
 8007d16:	4649      	mov	r1, r9
 8007d18:	f7f8 fa8e 	bl	8000238 <__aeabi_dsub>
 8007d1c:	f807 6b01 	strb.w	r6, [r7], #1
 8007d20:	9e03      	ldr	r6, [sp, #12]
 8007d22:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007d26:	1bbe      	subs	r6, r7, r6
 8007d28:	45b4      	cmp	ip, r6
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	d136      	bne.n	8007d9e <_dtoa_r+0x70e>
 8007d30:	f7f8 fa84 	bl	800023c <__adddf3>
 8007d34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d38:	4680      	mov	r8, r0
 8007d3a:	4689      	mov	r9, r1
 8007d3c:	f7f8 fec4 	bl	8000ac8 <__aeabi_dcmpgt>
 8007d40:	bb58      	cbnz	r0, 8007d9a <_dtoa_r+0x70a>
 8007d42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d46:	4640      	mov	r0, r8
 8007d48:	4649      	mov	r1, r9
 8007d4a:	f7f8 fe95 	bl	8000a78 <__aeabi_dcmpeq>
 8007d4e:	b108      	cbz	r0, 8007d54 <_dtoa_r+0x6c4>
 8007d50:	07e1      	lsls	r1, r4, #31
 8007d52:	d422      	bmi.n	8007d9a <_dtoa_r+0x70a>
 8007d54:	4628      	mov	r0, r5
 8007d56:	4659      	mov	r1, fp
 8007d58:	f000 fe5a 	bl	8008a10 <_Bfree>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	703b      	strb	r3, [r7, #0]
 8007d60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007d62:	f10a 0001 	add.w	r0, sl, #1
 8007d66:	6018      	str	r0, [r3, #0]
 8007d68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f43f acdd 	beq.w	800772a <_dtoa_r+0x9a>
 8007d70:	601f      	str	r7, [r3, #0]
 8007d72:	e4da      	b.n	800772a <_dtoa_r+0x9a>
 8007d74:	4627      	mov	r7, r4
 8007d76:	463b      	mov	r3, r7
 8007d78:	461f      	mov	r7, r3
 8007d7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d7e:	2a39      	cmp	r2, #57	; 0x39
 8007d80:	d107      	bne.n	8007d92 <_dtoa_r+0x702>
 8007d82:	9a03      	ldr	r2, [sp, #12]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d1f7      	bne.n	8007d78 <_dtoa_r+0x6e8>
 8007d88:	9903      	ldr	r1, [sp, #12]
 8007d8a:	2230      	movs	r2, #48	; 0x30
 8007d8c:	f108 0801 	add.w	r8, r8, #1
 8007d90:	700a      	strb	r2, [r1, #0]
 8007d92:	781a      	ldrb	r2, [r3, #0]
 8007d94:	3201      	adds	r2, #1
 8007d96:	701a      	strb	r2, [r3, #0]
 8007d98:	e79e      	b.n	8007cd8 <_dtoa_r+0x648>
 8007d9a:	46d0      	mov	r8, sl
 8007d9c:	e7eb      	b.n	8007d76 <_dtoa_r+0x6e6>
 8007d9e:	4b62      	ldr	r3, [pc, #392]	; (8007f28 <_dtoa_r+0x898>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	f7f8 fc01 	bl	80005a8 <__aeabi_dmul>
 8007da6:	2200      	movs	r2, #0
 8007da8:	2300      	movs	r3, #0
 8007daa:	4680      	mov	r8, r0
 8007dac:	4689      	mov	r9, r1
 8007dae:	f7f8 fe63 	bl	8000a78 <__aeabi_dcmpeq>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d09b      	beq.n	8007cee <_dtoa_r+0x65e>
 8007db6:	e7cd      	b.n	8007d54 <_dtoa_r+0x6c4>
 8007db8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007dba:	2a00      	cmp	r2, #0
 8007dbc:	f000 80d0 	beq.w	8007f60 <_dtoa_r+0x8d0>
 8007dc0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007dc2:	2a01      	cmp	r2, #1
 8007dc4:	f300 80b2 	bgt.w	8007f2c <_dtoa_r+0x89c>
 8007dc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007dca:	2a00      	cmp	r2, #0
 8007dcc:	f000 80a6 	beq.w	8007f1c <_dtoa_r+0x88c>
 8007dd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007dd4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007dd6:	9f06      	ldr	r7, [sp, #24]
 8007dd8:	9a06      	ldr	r2, [sp, #24]
 8007dda:	441a      	add	r2, r3
 8007ddc:	9206      	str	r2, [sp, #24]
 8007dde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007de0:	2101      	movs	r1, #1
 8007de2:	441a      	add	r2, r3
 8007de4:	4628      	mov	r0, r5
 8007de6:	9209      	str	r2, [sp, #36]	; 0x24
 8007de8:	f000 ff12 	bl	8008c10 <__i2b>
 8007dec:	4606      	mov	r6, r0
 8007dee:	2f00      	cmp	r7, #0
 8007df0:	dd0c      	ble.n	8007e0c <_dtoa_r+0x77c>
 8007df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	dd09      	ble.n	8007e0c <_dtoa_r+0x77c>
 8007df8:	42bb      	cmp	r3, r7
 8007dfa:	9a06      	ldr	r2, [sp, #24]
 8007dfc:	bfa8      	it	ge
 8007dfe:	463b      	movge	r3, r7
 8007e00:	1ad2      	subs	r2, r2, r3
 8007e02:	9206      	str	r2, [sp, #24]
 8007e04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e06:	1aff      	subs	r7, r7, r3
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e0e:	b1f3      	cbz	r3, 8007e4e <_dtoa_r+0x7be>
 8007e10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f000 80a8 	beq.w	8007f68 <_dtoa_r+0x8d8>
 8007e18:	2c00      	cmp	r4, #0
 8007e1a:	dd10      	ble.n	8007e3e <_dtoa_r+0x7ae>
 8007e1c:	4631      	mov	r1, r6
 8007e1e:	4622      	mov	r2, r4
 8007e20:	4628      	mov	r0, r5
 8007e22:	f000 ffb3 	bl	8008d8c <__pow5mult>
 8007e26:	465a      	mov	r2, fp
 8007e28:	4601      	mov	r1, r0
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	f000 ff05 	bl	8008c3c <__multiply>
 8007e32:	4659      	mov	r1, fp
 8007e34:	4680      	mov	r8, r0
 8007e36:	4628      	mov	r0, r5
 8007e38:	f000 fdea 	bl	8008a10 <_Bfree>
 8007e3c:	46c3      	mov	fp, r8
 8007e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e40:	1b1a      	subs	r2, r3, r4
 8007e42:	d004      	beq.n	8007e4e <_dtoa_r+0x7be>
 8007e44:	4659      	mov	r1, fp
 8007e46:	4628      	mov	r0, r5
 8007e48:	f000 ffa0 	bl	8008d8c <__pow5mult>
 8007e4c:	4683      	mov	fp, r0
 8007e4e:	2101      	movs	r1, #1
 8007e50:	4628      	mov	r0, r5
 8007e52:	f000 fedd 	bl	8008c10 <__i2b>
 8007e56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	f340 8086 	ble.w	8007f6c <_dtoa_r+0x8dc>
 8007e60:	461a      	mov	r2, r3
 8007e62:	4601      	mov	r1, r0
 8007e64:	4628      	mov	r0, r5
 8007e66:	f000 ff91 	bl	8008d8c <__pow5mult>
 8007e6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	4604      	mov	r4, r0
 8007e70:	dd7f      	ble.n	8007f72 <_dtoa_r+0x8e2>
 8007e72:	f04f 0800 	mov.w	r8, #0
 8007e76:	6923      	ldr	r3, [r4, #16]
 8007e78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e7c:	6918      	ldr	r0, [r3, #16]
 8007e7e:	f000 fe79 	bl	8008b74 <__hi0bits>
 8007e82:	f1c0 0020 	rsb	r0, r0, #32
 8007e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e88:	4418      	add	r0, r3
 8007e8a:	f010 001f 	ands.w	r0, r0, #31
 8007e8e:	f000 8092 	beq.w	8007fb6 <_dtoa_r+0x926>
 8007e92:	f1c0 0320 	rsb	r3, r0, #32
 8007e96:	2b04      	cmp	r3, #4
 8007e98:	f340 808a 	ble.w	8007fb0 <_dtoa_r+0x920>
 8007e9c:	f1c0 001c 	rsb	r0, r0, #28
 8007ea0:	9b06      	ldr	r3, [sp, #24]
 8007ea2:	4403      	add	r3, r0
 8007ea4:	9306      	str	r3, [sp, #24]
 8007ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea8:	4403      	add	r3, r0
 8007eaa:	4407      	add	r7, r0
 8007eac:	9309      	str	r3, [sp, #36]	; 0x24
 8007eae:	9b06      	ldr	r3, [sp, #24]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	dd05      	ble.n	8007ec0 <_dtoa_r+0x830>
 8007eb4:	4659      	mov	r1, fp
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	4628      	mov	r0, r5
 8007eba:	f000 ffc1 	bl	8008e40 <__lshift>
 8007ebe:	4683      	mov	fp, r0
 8007ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	dd05      	ble.n	8007ed2 <_dtoa_r+0x842>
 8007ec6:	4621      	mov	r1, r4
 8007ec8:	461a      	mov	r2, r3
 8007eca:	4628      	mov	r0, r5
 8007ecc:	f000 ffb8 	bl	8008e40 <__lshift>
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d070      	beq.n	8007fba <_dtoa_r+0x92a>
 8007ed8:	4621      	mov	r1, r4
 8007eda:	4658      	mov	r0, fp
 8007edc:	f001 f820 	bl	8008f20 <__mcmp>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	da6a      	bge.n	8007fba <_dtoa_r+0x92a>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	4659      	mov	r1, fp
 8007ee8:	220a      	movs	r2, #10
 8007eea:	4628      	mov	r0, r5
 8007eec:	f000 fdb2 	bl	8008a54 <__multadd>
 8007ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ef2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ef6:	4683      	mov	fp, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f000 8194 	beq.w	8008226 <_dtoa_r+0xb96>
 8007efe:	4631      	mov	r1, r6
 8007f00:	2300      	movs	r3, #0
 8007f02:	220a      	movs	r2, #10
 8007f04:	4628      	mov	r0, r5
 8007f06:	f000 fda5 	bl	8008a54 <__multadd>
 8007f0a:	f1b9 0f00 	cmp.w	r9, #0
 8007f0e:	4606      	mov	r6, r0
 8007f10:	f300 8093 	bgt.w	800803a <_dtoa_r+0x9aa>
 8007f14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	dc57      	bgt.n	8007fca <_dtoa_r+0x93a>
 8007f1a:	e08e      	b.n	800803a <_dtoa_r+0x9aa>
 8007f1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007f1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f22:	e757      	b.n	8007dd4 <_dtoa_r+0x744>
 8007f24:	3fe00000 	.word	0x3fe00000
 8007f28:	40240000 	.word	0x40240000
 8007f2c:	9b08      	ldr	r3, [sp, #32]
 8007f2e:	1e5c      	subs	r4, r3, #1
 8007f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f32:	42a3      	cmp	r3, r4
 8007f34:	bfbf      	itttt	lt
 8007f36:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007f38:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007f3a:	1ae2      	sublt	r2, r4, r3
 8007f3c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007f3e:	bfb6      	itet	lt
 8007f40:	189b      	addlt	r3, r3, r2
 8007f42:	1b1c      	subge	r4, r3, r4
 8007f44:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007f46:	9b08      	ldr	r3, [sp, #32]
 8007f48:	bfb8      	it	lt
 8007f4a:	2400      	movlt	r4, #0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	bfb9      	ittee	lt
 8007f50:	9b06      	ldrlt	r3, [sp, #24]
 8007f52:	9a08      	ldrlt	r2, [sp, #32]
 8007f54:	9f06      	ldrge	r7, [sp, #24]
 8007f56:	9b08      	ldrge	r3, [sp, #32]
 8007f58:	bfbc      	itt	lt
 8007f5a:	1a9f      	sublt	r7, r3, r2
 8007f5c:	2300      	movlt	r3, #0
 8007f5e:	e73b      	b.n	8007dd8 <_dtoa_r+0x748>
 8007f60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007f62:	9f06      	ldr	r7, [sp, #24]
 8007f64:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007f66:	e742      	b.n	8007dee <_dtoa_r+0x75e>
 8007f68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f6a:	e76b      	b.n	8007e44 <_dtoa_r+0x7b4>
 8007f6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	dc19      	bgt.n	8007fa6 <_dtoa_r+0x916>
 8007f72:	9b04      	ldr	r3, [sp, #16]
 8007f74:	b9bb      	cbnz	r3, 8007fa6 <_dtoa_r+0x916>
 8007f76:	9b05      	ldr	r3, [sp, #20]
 8007f78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f7c:	b99b      	cbnz	r3, 8007fa6 <_dtoa_r+0x916>
 8007f7e:	9b05      	ldr	r3, [sp, #20]
 8007f80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f84:	0d1b      	lsrs	r3, r3, #20
 8007f86:	051b      	lsls	r3, r3, #20
 8007f88:	b183      	cbz	r3, 8007fac <_dtoa_r+0x91c>
 8007f8a:	9b06      	ldr	r3, [sp, #24]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	9306      	str	r3, [sp, #24]
 8007f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f92:	3301      	adds	r3, #1
 8007f94:	9309      	str	r3, [sp, #36]	; 0x24
 8007f96:	f04f 0801 	mov.w	r8, #1
 8007f9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f47f af6a 	bne.w	8007e76 <_dtoa_r+0x7e6>
 8007fa2:	2001      	movs	r0, #1
 8007fa4:	e76f      	b.n	8007e86 <_dtoa_r+0x7f6>
 8007fa6:	f04f 0800 	mov.w	r8, #0
 8007faa:	e7f6      	b.n	8007f9a <_dtoa_r+0x90a>
 8007fac:	4698      	mov	r8, r3
 8007fae:	e7f4      	b.n	8007f9a <_dtoa_r+0x90a>
 8007fb0:	f43f af7d 	beq.w	8007eae <_dtoa_r+0x81e>
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	301c      	adds	r0, #28
 8007fb8:	e772      	b.n	8007ea0 <_dtoa_r+0x810>
 8007fba:	9b08      	ldr	r3, [sp, #32]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	dc36      	bgt.n	800802e <_dtoa_r+0x99e>
 8007fc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	dd33      	ble.n	800802e <_dtoa_r+0x99e>
 8007fc6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007fca:	f1b9 0f00 	cmp.w	r9, #0
 8007fce:	d10d      	bne.n	8007fec <_dtoa_r+0x95c>
 8007fd0:	4621      	mov	r1, r4
 8007fd2:	464b      	mov	r3, r9
 8007fd4:	2205      	movs	r2, #5
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	f000 fd3c 	bl	8008a54 <__multadd>
 8007fdc:	4601      	mov	r1, r0
 8007fde:	4604      	mov	r4, r0
 8007fe0:	4658      	mov	r0, fp
 8007fe2:	f000 ff9d 	bl	8008f20 <__mcmp>
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	f73f adb8 	bgt.w	8007b5c <_dtoa_r+0x4cc>
 8007fec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007fee:	9f03      	ldr	r7, [sp, #12]
 8007ff0:	ea6f 0a03 	mvn.w	sl, r3
 8007ff4:	f04f 0800 	mov.w	r8, #0
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	f000 fd08 	bl	8008a10 <_Bfree>
 8008000:	2e00      	cmp	r6, #0
 8008002:	f43f aea7 	beq.w	8007d54 <_dtoa_r+0x6c4>
 8008006:	f1b8 0f00 	cmp.w	r8, #0
 800800a:	d005      	beq.n	8008018 <_dtoa_r+0x988>
 800800c:	45b0      	cmp	r8, r6
 800800e:	d003      	beq.n	8008018 <_dtoa_r+0x988>
 8008010:	4641      	mov	r1, r8
 8008012:	4628      	mov	r0, r5
 8008014:	f000 fcfc 	bl	8008a10 <_Bfree>
 8008018:	4631      	mov	r1, r6
 800801a:	4628      	mov	r0, r5
 800801c:	f000 fcf8 	bl	8008a10 <_Bfree>
 8008020:	e698      	b.n	8007d54 <_dtoa_r+0x6c4>
 8008022:	2400      	movs	r4, #0
 8008024:	4626      	mov	r6, r4
 8008026:	e7e1      	b.n	8007fec <_dtoa_r+0x95c>
 8008028:	46c2      	mov	sl, r8
 800802a:	4626      	mov	r6, r4
 800802c:	e596      	b.n	8007b5c <_dtoa_r+0x4cc>
 800802e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008030:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 80fd 	beq.w	8008234 <_dtoa_r+0xba4>
 800803a:	2f00      	cmp	r7, #0
 800803c:	dd05      	ble.n	800804a <_dtoa_r+0x9ba>
 800803e:	4631      	mov	r1, r6
 8008040:	463a      	mov	r2, r7
 8008042:	4628      	mov	r0, r5
 8008044:	f000 fefc 	bl	8008e40 <__lshift>
 8008048:	4606      	mov	r6, r0
 800804a:	f1b8 0f00 	cmp.w	r8, #0
 800804e:	d05c      	beq.n	800810a <_dtoa_r+0xa7a>
 8008050:	6871      	ldr	r1, [r6, #4]
 8008052:	4628      	mov	r0, r5
 8008054:	f000 fc9c 	bl	8008990 <_Balloc>
 8008058:	4607      	mov	r7, r0
 800805a:	b928      	cbnz	r0, 8008068 <_dtoa_r+0x9d8>
 800805c:	4b80      	ldr	r3, [pc, #512]	; (8008260 <_dtoa_r+0xbd0>)
 800805e:	4602      	mov	r2, r0
 8008060:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008064:	f7ff bb28 	b.w	80076b8 <_dtoa_r+0x28>
 8008068:	6932      	ldr	r2, [r6, #16]
 800806a:	3202      	adds	r2, #2
 800806c:	0092      	lsls	r2, r2, #2
 800806e:	f106 010c 	add.w	r1, r6, #12
 8008072:	300c      	adds	r0, #12
 8008074:	f000 fc7e 	bl	8008974 <memcpy>
 8008078:	2201      	movs	r2, #1
 800807a:	4639      	mov	r1, r7
 800807c:	4628      	mov	r0, r5
 800807e:	f000 fedf 	bl	8008e40 <__lshift>
 8008082:	9b03      	ldr	r3, [sp, #12]
 8008084:	3301      	adds	r3, #1
 8008086:	9308      	str	r3, [sp, #32]
 8008088:	9b03      	ldr	r3, [sp, #12]
 800808a:	444b      	add	r3, r9
 800808c:	930a      	str	r3, [sp, #40]	; 0x28
 800808e:	9b04      	ldr	r3, [sp, #16]
 8008090:	f003 0301 	and.w	r3, r3, #1
 8008094:	46b0      	mov	r8, r6
 8008096:	9309      	str	r3, [sp, #36]	; 0x24
 8008098:	4606      	mov	r6, r0
 800809a:	9b08      	ldr	r3, [sp, #32]
 800809c:	4621      	mov	r1, r4
 800809e:	3b01      	subs	r3, #1
 80080a0:	4658      	mov	r0, fp
 80080a2:	9304      	str	r3, [sp, #16]
 80080a4:	f7ff fa6c 	bl	8007580 <quorem>
 80080a8:	4603      	mov	r3, r0
 80080aa:	3330      	adds	r3, #48	; 0x30
 80080ac:	9006      	str	r0, [sp, #24]
 80080ae:	4641      	mov	r1, r8
 80080b0:	4658      	mov	r0, fp
 80080b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80080b4:	f000 ff34 	bl	8008f20 <__mcmp>
 80080b8:	4632      	mov	r2, r6
 80080ba:	4681      	mov	r9, r0
 80080bc:	4621      	mov	r1, r4
 80080be:	4628      	mov	r0, r5
 80080c0:	f000 ff4a 	bl	8008f58 <__mdiff>
 80080c4:	68c2      	ldr	r2, [r0, #12]
 80080c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080c8:	4607      	mov	r7, r0
 80080ca:	bb02      	cbnz	r2, 800810e <_dtoa_r+0xa7e>
 80080cc:	4601      	mov	r1, r0
 80080ce:	4658      	mov	r0, fp
 80080d0:	f000 ff26 	bl	8008f20 <__mcmp>
 80080d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080d6:	4602      	mov	r2, r0
 80080d8:	4639      	mov	r1, r7
 80080da:	4628      	mov	r0, r5
 80080dc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80080e0:	f000 fc96 	bl	8008a10 <_Bfree>
 80080e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080e8:	9f08      	ldr	r7, [sp, #32]
 80080ea:	ea43 0102 	orr.w	r1, r3, r2
 80080ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080f0:	430b      	orrs	r3, r1
 80080f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080f4:	d10d      	bne.n	8008112 <_dtoa_r+0xa82>
 80080f6:	2b39      	cmp	r3, #57	; 0x39
 80080f8:	d029      	beq.n	800814e <_dtoa_r+0xabe>
 80080fa:	f1b9 0f00 	cmp.w	r9, #0
 80080fe:	dd01      	ble.n	8008104 <_dtoa_r+0xa74>
 8008100:	9b06      	ldr	r3, [sp, #24]
 8008102:	3331      	adds	r3, #49	; 0x31
 8008104:	9a04      	ldr	r2, [sp, #16]
 8008106:	7013      	strb	r3, [r2, #0]
 8008108:	e776      	b.n	8007ff8 <_dtoa_r+0x968>
 800810a:	4630      	mov	r0, r6
 800810c:	e7b9      	b.n	8008082 <_dtoa_r+0x9f2>
 800810e:	2201      	movs	r2, #1
 8008110:	e7e2      	b.n	80080d8 <_dtoa_r+0xa48>
 8008112:	f1b9 0f00 	cmp.w	r9, #0
 8008116:	db06      	blt.n	8008126 <_dtoa_r+0xa96>
 8008118:	9922      	ldr	r1, [sp, #136]	; 0x88
 800811a:	ea41 0909 	orr.w	r9, r1, r9
 800811e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008120:	ea59 0101 	orrs.w	r1, r9, r1
 8008124:	d120      	bne.n	8008168 <_dtoa_r+0xad8>
 8008126:	2a00      	cmp	r2, #0
 8008128:	ddec      	ble.n	8008104 <_dtoa_r+0xa74>
 800812a:	4659      	mov	r1, fp
 800812c:	2201      	movs	r2, #1
 800812e:	4628      	mov	r0, r5
 8008130:	9308      	str	r3, [sp, #32]
 8008132:	f000 fe85 	bl	8008e40 <__lshift>
 8008136:	4621      	mov	r1, r4
 8008138:	4683      	mov	fp, r0
 800813a:	f000 fef1 	bl	8008f20 <__mcmp>
 800813e:	2800      	cmp	r0, #0
 8008140:	9b08      	ldr	r3, [sp, #32]
 8008142:	dc02      	bgt.n	800814a <_dtoa_r+0xaba>
 8008144:	d1de      	bne.n	8008104 <_dtoa_r+0xa74>
 8008146:	07da      	lsls	r2, r3, #31
 8008148:	d5dc      	bpl.n	8008104 <_dtoa_r+0xa74>
 800814a:	2b39      	cmp	r3, #57	; 0x39
 800814c:	d1d8      	bne.n	8008100 <_dtoa_r+0xa70>
 800814e:	9a04      	ldr	r2, [sp, #16]
 8008150:	2339      	movs	r3, #57	; 0x39
 8008152:	7013      	strb	r3, [r2, #0]
 8008154:	463b      	mov	r3, r7
 8008156:	461f      	mov	r7, r3
 8008158:	3b01      	subs	r3, #1
 800815a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800815e:	2a39      	cmp	r2, #57	; 0x39
 8008160:	d050      	beq.n	8008204 <_dtoa_r+0xb74>
 8008162:	3201      	adds	r2, #1
 8008164:	701a      	strb	r2, [r3, #0]
 8008166:	e747      	b.n	8007ff8 <_dtoa_r+0x968>
 8008168:	2a00      	cmp	r2, #0
 800816a:	dd03      	ble.n	8008174 <_dtoa_r+0xae4>
 800816c:	2b39      	cmp	r3, #57	; 0x39
 800816e:	d0ee      	beq.n	800814e <_dtoa_r+0xabe>
 8008170:	3301      	adds	r3, #1
 8008172:	e7c7      	b.n	8008104 <_dtoa_r+0xa74>
 8008174:	9a08      	ldr	r2, [sp, #32]
 8008176:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008178:	f802 3c01 	strb.w	r3, [r2, #-1]
 800817c:	428a      	cmp	r2, r1
 800817e:	d02a      	beq.n	80081d6 <_dtoa_r+0xb46>
 8008180:	4659      	mov	r1, fp
 8008182:	2300      	movs	r3, #0
 8008184:	220a      	movs	r2, #10
 8008186:	4628      	mov	r0, r5
 8008188:	f000 fc64 	bl	8008a54 <__multadd>
 800818c:	45b0      	cmp	r8, r6
 800818e:	4683      	mov	fp, r0
 8008190:	f04f 0300 	mov.w	r3, #0
 8008194:	f04f 020a 	mov.w	r2, #10
 8008198:	4641      	mov	r1, r8
 800819a:	4628      	mov	r0, r5
 800819c:	d107      	bne.n	80081ae <_dtoa_r+0xb1e>
 800819e:	f000 fc59 	bl	8008a54 <__multadd>
 80081a2:	4680      	mov	r8, r0
 80081a4:	4606      	mov	r6, r0
 80081a6:	9b08      	ldr	r3, [sp, #32]
 80081a8:	3301      	adds	r3, #1
 80081aa:	9308      	str	r3, [sp, #32]
 80081ac:	e775      	b.n	800809a <_dtoa_r+0xa0a>
 80081ae:	f000 fc51 	bl	8008a54 <__multadd>
 80081b2:	4631      	mov	r1, r6
 80081b4:	4680      	mov	r8, r0
 80081b6:	2300      	movs	r3, #0
 80081b8:	220a      	movs	r2, #10
 80081ba:	4628      	mov	r0, r5
 80081bc:	f000 fc4a 	bl	8008a54 <__multadd>
 80081c0:	4606      	mov	r6, r0
 80081c2:	e7f0      	b.n	80081a6 <_dtoa_r+0xb16>
 80081c4:	f1b9 0f00 	cmp.w	r9, #0
 80081c8:	9a03      	ldr	r2, [sp, #12]
 80081ca:	bfcc      	ite	gt
 80081cc:	464f      	movgt	r7, r9
 80081ce:	2701      	movle	r7, #1
 80081d0:	4417      	add	r7, r2
 80081d2:	f04f 0800 	mov.w	r8, #0
 80081d6:	4659      	mov	r1, fp
 80081d8:	2201      	movs	r2, #1
 80081da:	4628      	mov	r0, r5
 80081dc:	9308      	str	r3, [sp, #32]
 80081de:	f000 fe2f 	bl	8008e40 <__lshift>
 80081e2:	4621      	mov	r1, r4
 80081e4:	4683      	mov	fp, r0
 80081e6:	f000 fe9b 	bl	8008f20 <__mcmp>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	dcb2      	bgt.n	8008154 <_dtoa_r+0xac4>
 80081ee:	d102      	bne.n	80081f6 <_dtoa_r+0xb66>
 80081f0:	9b08      	ldr	r3, [sp, #32]
 80081f2:	07db      	lsls	r3, r3, #31
 80081f4:	d4ae      	bmi.n	8008154 <_dtoa_r+0xac4>
 80081f6:	463b      	mov	r3, r7
 80081f8:	461f      	mov	r7, r3
 80081fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081fe:	2a30      	cmp	r2, #48	; 0x30
 8008200:	d0fa      	beq.n	80081f8 <_dtoa_r+0xb68>
 8008202:	e6f9      	b.n	8007ff8 <_dtoa_r+0x968>
 8008204:	9a03      	ldr	r2, [sp, #12]
 8008206:	429a      	cmp	r2, r3
 8008208:	d1a5      	bne.n	8008156 <_dtoa_r+0xac6>
 800820a:	f10a 0a01 	add.w	sl, sl, #1
 800820e:	2331      	movs	r3, #49	; 0x31
 8008210:	e779      	b.n	8008106 <_dtoa_r+0xa76>
 8008212:	4b14      	ldr	r3, [pc, #80]	; (8008264 <_dtoa_r+0xbd4>)
 8008214:	f7ff baa7 	b.w	8007766 <_dtoa_r+0xd6>
 8008218:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800821a:	2b00      	cmp	r3, #0
 800821c:	f47f aa80 	bne.w	8007720 <_dtoa_r+0x90>
 8008220:	4b11      	ldr	r3, [pc, #68]	; (8008268 <_dtoa_r+0xbd8>)
 8008222:	f7ff baa0 	b.w	8007766 <_dtoa_r+0xd6>
 8008226:	f1b9 0f00 	cmp.w	r9, #0
 800822a:	dc03      	bgt.n	8008234 <_dtoa_r+0xba4>
 800822c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800822e:	2b02      	cmp	r3, #2
 8008230:	f73f aecb 	bgt.w	8007fca <_dtoa_r+0x93a>
 8008234:	9f03      	ldr	r7, [sp, #12]
 8008236:	4621      	mov	r1, r4
 8008238:	4658      	mov	r0, fp
 800823a:	f7ff f9a1 	bl	8007580 <quorem>
 800823e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008242:	f807 3b01 	strb.w	r3, [r7], #1
 8008246:	9a03      	ldr	r2, [sp, #12]
 8008248:	1aba      	subs	r2, r7, r2
 800824a:	4591      	cmp	r9, r2
 800824c:	ddba      	ble.n	80081c4 <_dtoa_r+0xb34>
 800824e:	4659      	mov	r1, fp
 8008250:	2300      	movs	r3, #0
 8008252:	220a      	movs	r2, #10
 8008254:	4628      	mov	r0, r5
 8008256:	f000 fbfd 	bl	8008a54 <__multadd>
 800825a:	4683      	mov	fp, r0
 800825c:	e7eb      	b.n	8008236 <_dtoa_r+0xba6>
 800825e:	bf00      	nop
 8008260:	0800a688 	.word	0x0800a688
 8008264:	0800a488 	.word	0x0800a488
 8008268:	0800a609 	.word	0x0800a609

0800826c <rshift>:
 800826c:	6903      	ldr	r3, [r0, #16]
 800826e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008272:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008276:	ea4f 1261 	mov.w	r2, r1, asr #5
 800827a:	f100 0414 	add.w	r4, r0, #20
 800827e:	dd45      	ble.n	800830c <rshift+0xa0>
 8008280:	f011 011f 	ands.w	r1, r1, #31
 8008284:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008288:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800828c:	d10c      	bne.n	80082a8 <rshift+0x3c>
 800828e:	f100 0710 	add.w	r7, r0, #16
 8008292:	4629      	mov	r1, r5
 8008294:	42b1      	cmp	r1, r6
 8008296:	d334      	bcc.n	8008302 <rshift+0x96>
 8008298:	1a9b      	subs	r3, r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	1eea      	subs	r2, r5, #3
 800829e:	4296      	cmp	r6, r2
 80082a0:	bf38      	it	cc
 80082a2:	2300      	movcc	r3, #0
 80082a4:	4423      	add	r3, r4
 80082a6:	e015      	b.n	80082d4 <rshift+0x68>
 80082a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80082ac:	f1c1 0820 	rsb	r8, r1, #32
 80082b0:	40cf      	lsrs	r7, r1
 80082b2:	f105 0e04 	add.w	lr, r5, #4
 80082b6:	46a1      	mov	r9, r4
 80082b8:	4576      	cmp	r6, lr
 80082ba:	46f4      	mov	ip, lr
 80082bc:	d815      	bhi.n	80082ea <rshift+0x7e>
 80082be:	1a9a      	subs	r2, r3, r2
 80082c0:	0092      	lsls	r2, r2, #2
 80082c2:	3a04      	subs	r2, #4
 80082c4:	3501      	adds	r5, #1
 80082c6:	42ae      	cmp	r6, r5
 80082c8:	bf38      	it	cc
 80082ca:	2200      	movcc	r2, #0
 80082cc:	18a3      	adds	r3, r4, r2
 80082ce:	50a7      	str	r7, [r4, r2]
 80082d0:	b107      	cbz	r7, 80082d4 <rshift+0x68>
 80082d2:	3304      	adds	r3, #4
 80082d4:	1b1a      	subs	r2, r3, r4
 80082d6:	42a3      	cmp	r3, r4
 80082d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80082dc:	bf08      	it	eq
 80082de:	2300      	moveq	r3, #0
 80082e0:	6102      	str	r2, [r0, #16]
 80082e2:	bf08      	it	eq
 80082e4:	6143      	streq	r3, [r0, #20]
 80082e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082ea:	f8dc c000 	ldr.w	ip, [ip]
 80082ee:	fa0c fc08 	lsl.w	ip, ip, r8
 80082f2:	ea4c 0707 	orr.w	r7, ip, r7
 80082f6:	f849 7b04 	str.w	r7, [r9], #4
 80082fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80082fe:	40cf      	lsrs	r7, r1
 8008300:	e7da      	b.n	80082b8 <rshift+0x4c>
 8008302:	f851 cb04 	ldr.w	ip, [r1], #4
 8008306:	f847 cf04 	str.w	ip, [r7, #4]!
 800830a:	e7c3      	b.n	8008294 <rshift+0x28>
 800830c:	4623      	mov	r3, r4
 800830e:	e7e1      	b.n	80082d4 <rshift+0x68>

08008310 <__hexdig_fun>:
 8008310:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008314:	2b09      	cmp	r3, #9
 8008316:	d802      	bhi.n	800831e <__hexdig_fun+0xe>
 8008318:	3820      	subs	r0, #32
 800831a:	b2c0      	uxtb	r0, r0
 800831c:	4770      	bx	lr
 800831e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008322:	2b05      	cmp	r3, #5
 8008324:	d801      	bhi.n	800832a <__hexdig_fun+0x1a>
 8008326:	3847      	subs	r0, #71	; 0x47
 8008328:	e7f7      	b.n	800831a <__hexdig_fun+0xa>
 800832a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800832e:	2b05      	cmp	r3, #5
 8008330:	d801      	bhi.n	8008336 <__hexdig_fun+0x26>
 8008332:	3827      	subs	r0, #39	; 0x27
 8008334:	e7f1      	b.n	800831a <__hexdig_fun+0xa>
 8008336:	2000      	movs	r0, #0
 8008338:	4770      	bx	lr
	...

0800833c <__gethex>:
 800833c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008340:	b08b      	sub	sp, #44	; 0x2c
 8008342:	468b      	mov	fp, r1
 8008344:	9305      	str	r3, [sp, #20]
 8008346:	4bb2      	ldr	r3, [pc, #712]	; (8008610 <__gethex+0x2d4>)
 8008348:	9002      	str	r0, [sp, #8]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	9303      	str	r3, [sp, #12]
 800834e:	4618      	mov	r0, r3
 8008350:	4690      	mov	r8, r2
 8008352:	f7f7 ff15 	bl	8000180 <strlen>
 8008356:	9b03      	ldr	r3, [sp, #12]
 8008358:	f8db 2000 	ldr.w	r2, [fp]
 800835c:	4403      	add	r3, r0
 800835e:	4682      	mov	sl, r0
 8008360:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008364:	9306      	str	r3, [sp, #24]
 8008366:	1c93      	adds	r3, r2, #2
 8008368:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800836c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008370:	32fe      	adds	r2, #254	; 0xfe
 8008372:	18d1      	adds	r1, r2, r3
 8008374:	461f      	mov	r7, r3
 8008376:	f813 0b01 	ldrb.w	r0, [r3], #1
 800837a:	9101      	str	r1, [sp, #4]
 800837c:	2830      	cmp	r0, #48	; 0x30
 800837e:	d0f8      	beq.n	8008372 <__gethex+0x36>
 8008380:	f7ff ffc6 	bl	8008310 <__hexdig_fun>
 8008384:	4604      	mov	r4, r0
 8008386:	2800      	cmp	r0, #0
 8008388:	d13a      	bne.n	8008400 <__gethex+0xc4>
 800838a:	9903      	ldr	r1, [sp, #12]
 800838c:	4652      	mov	r2, sl
 800838e:	4638      	mov	r0, r7
 8008390:	f001 fa16 	bl	80097c0 <strncmp>
 8008394:	4605      	mov	r5, r0
 8008396:	2800      	cmp	r0, #0
 8008398:	d166      	bne.n	8008468 <__gethex+0x12c>
 800839a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800839e:	eb07 060a 	add.w	r6, r7, sl
 80083a2:	f7ff ffb5 	bl	8008310 <__hexdig_fun>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	d060      	beq.n	800846c <__gethex+0x130>
 80083aa:	4633      	mov	r3, r6
 80083ac:	7818      	ldrb	r0, [r3, #0]
 80083ae:	2830      	cmp	r0, #48	; 0x30
 80083b0:	461f      	mov	r7, r3
 80083b2:	f103 0301 	add.w	r3, r3, #1
 80083b6:	d0f9      	beq.n	80083ac <__gethex+0x70>
 80083b8:	f7ff ffaa 	bl	8008310 <__hexdig_fun>
 80083bc:	2301      	movs	r3, #1
 80083be:	fab0 f480 	clz	r4, r0
 80083c2:	0964      	lsrs	r4, r4, #5
 80083c4:	4635      	mov	r5, r6
 80083c6:	9301      	str	r3, [sp, #4]
 80083c8:	463a      	mov	r2, r7
 80083ca:	4616      	mov	r6, r2
 80083cc:	3201      	adds	r2, #1
 80083ce:	7830      	ldrb	r0, [r6, #0]
 80083d0:	f7ff ff9e 	bl	8008310 <__hexdig_fun>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	d1f8      	bne.n	80083ca <__gethex+0x8e>
 80083d8:	9903      	ldr	r1, [sp, #12]
 80083da:	4652      	mov	r2, sl
 80083dc:	4630      	mov	r0, r6
 80083de:	f001 f9ef 	bl	80097c0 <strncmp>
 80083e2:	b980      	cbnz	r0, 8008406 <__gethex+0xca>
 80083e4:	b94d      	cbnz	r5, 80083fa <__gethex+0xbe>
 80083e6:	eb06 050a 	add.w	r5, r6, sl
 80083ea:	462a      	mov	r2, r5
 80083ec:	4616      	mov	r6, r2
 80083ee:	3201      	adds	r2, #1
 80083f0:	7830      	ldrb	r0, [r6, #0]
 80083f2:	f7ff ff8d 	bl	8008310 <__hexdig_fun>
 80083f6:	2800      	cmp	r0, #0
 80083f8:	d1f8      	bne.n	80083ec <__gethex+0xb0>
 80083fa:	1bad      	subs	r5, r5, r6
 80083fc:	00ad      	lsls	r5, r5, #2
 80083fe:	e004      	b.n	800840a <__gethex+0xce>
 8008400:	2400      	movs	r4, #0
 8008402:	4625      	mov	r5, r4
 8008404:	e7e0      	b.n	80083c8 <__gethex+0x8c>
 8008406:	2d00      	cmp	r5, #0
 8008408:	d1f7      	bne.n	80083fa <__gethex+0xbe>
 800840a:	7833      	ldrb	r3, [r6, #0]
 800840c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008410:	2b50      	cmp	r3, #80	; 0x50
 8008412:	d139      	bne.n	8008488 <__gethex+0x14c>
 8008414:	7873      	ldrb	r3, [r6, #1]
 8008416:	2b2b      	cmp	r3, #43	; 0x2b
 8008418:	d02a      	beq.n	8008470 <__gethex+0x134>
 800841a:	2b2d      	cmp	r3, #45	; 0x2d
 800841c:	d02c      	beq.n	8008478 <__gethex+0x13c>
 800841e:	1c71      	adds	r1, r6, #1
 8008420:	f04f 0900 	mov.w	r9, #0
 8008424:	7808      	ldrb	r0, [r1, #0]
 8008426:	f7ff ff73 	bl	8008310 <__hexdig_fun>
 800842a:	1e43      	subs	r3, r0, #1
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b18      	cmp	r3, #24
 8008430:	d82a      	bhi.n	8008488 <__gethex+0x14c>
 8008432:	f1a0 0210 	sub.w	r2, r0, #16
 8008436:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800843a:	f7ff ff69 	bl	8008310 <__hexdig_fun>
 800843e:	1e43      	subs	r3, r0, #1
 8008440:	b2db      	uxtb	r3, r3
 8008442:	2b18      	cmp	r3, #24
 8008444:	d91b      	bls.n	800847e <__gethex+0x142>
 8008446:	f1b9 0f00 	cmp.w	r9, #0
 800844a:	d000      	beq.n	800844e <__gethex+0x112>
 800844c:	4252      	negs	r2, r2
 800844e:	4415      	add	r5, r2
 8008450:	f8cb 1000 	str.w	r1, [fp]
 8008454:	b1d4      	cbz	r4, 800848c <__gethex+0x150>
 8008456:	9b01      	ldr	r3, [sp, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	bf14      	ite	ne
 800845c:	2700      	movne	r7, #0
 800845e:	2706      	moveq	r7, #6
 8008460:	4638      	mov	r0, r7
 8008462:	b00b      	add	sp, #44	; 0x2c
 8008464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008468:	463e      	mov	r6, r7
 800846a:	4625      	mov	r5, r4
 800846c:	2401      	movs	r4, #1
 800846e:	e7cc      	b.n	800840a <__gethex+0xce>
 8008470:	f04f 0900 	mov.w	r9, #0
 8008474:	1cb1      	adds	r1, r6, #2
 8008476:	e7d5      	b.n	8008424 <__gethex+0xe8>
 8008478:	f04f 0901 	mov.w	r9, #1
 800847c:	e7fa      	b.n	8008474 <__gethex+0x138>
 800847e:	230a      	movs	r3, #10
 8008480:	fb03 0202 	mla	r2, r3, r2, r0
 8008484:	3a10      	subs	r2, #16
 8008486:	e7d6      	b.n	8008436 <__gethex+0xfa>
 8008488:	4631      	mov	r1, r6
 800848a:	e7e1      	b.n	8008450 <__gethex+0x114>
 800848c:	1bf3      	subs	r3, r6, r7
 800848e:	3b01      	subs	r3, #1
 8008490:	4621      	mov	r1, r4
 8008492:	2b07      	cmp	r3, #7
 8008494:	dc0a      	bgt.n	80084ac <__gethex+0x170>
 8008496:	9802      	ldr	r0, [sp, #8]
 8008498:	f000 fa7a 	bl	8008990 <_Balloc>
 800849c:	4604      	mov	r4, r0
 800849e:	b940      	cbnz	r0, 80084b2 <__gethex+0x176>
 80084a0:	4b5c      	ldr	r3, [pc, #368]	; (8008614 <__gethex+0x2d8>)
 80084a2:	4602      	mov	r2, r0
 80084a4:	21de      	movs	r1, #222	; 0xde
 80084a6:	485c      	ldr	r0, [pc, #368]	; (8008618 <__gethex+0x2dc>)
 80084a8:	f001 f9ac 	bl	8009804 <__assert_func>
 80084ac:	3101      	adds	r1, #1
 80084ae:	105b      	asrs	r3, r3, #1
 80084b0:	e7ef      	b.n	8008492 <__gethex+0x156>
 80084b2:	f100 0914 	add.w	r9, r0, #20
 80084b6:	f04f 0b00 	mov.w	fp, #0
 80084ba:	f1ca 0301 	rsb	r3, sl, #1
 80084be:	f8cd 9010 	str.w	r9, [sp, #16]
 80084c2:	f8cd b004 	str.w	fp, [sp, #4]
 80084c6:	9308      	str	r3, [sp, #32]
 80084c8:	42b7      	cmp	r7, r6
 80084ca:	d33f      	bcc.n	800854c <__gethex+0x210>
 80084cc:	9f04      	ldr	r7, [sp, #16]
 80084ce:	9b01      	ldr	r3, [sp, #4]
 80084d0:	f847 3b04 	str.w	r3, [r7], #4
 80084d4:	eba7 0709 	sub.w	r7, r7, r9
 80084d8:	10bf      	asrs	r7, r7, #2
 80084da:	6127      	str	r7, [r4, #16]
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 fb49 	bl	8008b74 <__hi0bits>
 80084e2:	017f      	lsls	r7, r7, #5
 80084e4:	f8d8 6000 	ldr.w	r6, [r8]
 80084e8:	1a3f      	subs	r7, r7, r0
 80084ea:	42b7      	cmp	r7, r6
 80084ec:	dd62      	ble.n	80085b4 <__gethex+0x278>
 80084ee:	1bbf      	subs	r7, r7, r6
 80084f0:	4639      	mov	r1, r7
 80084f2:	4620      	mov	r0, r4
 80084f4:	f000 fedf 	bl	80092b6 <__any_on>
 80084f8:	4682      	mov	sl, r0
 80084fa:	b1a8      	cbz	r0, 8008528 <__gethex+0x1ec>
 80084fc:	1e7b      	subs	r3, r7, #1
 80084fe:	1159      	asrs	r1, r3, #5
 8008500:	f003 021f 	and.w	r2, r3, #31
 8008504:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008508:	f04f 0a01 	mov.w	sl, #1
 800850c:	fa0a f202 	lsl.w	r2, sl, r2
 8008510:	420a      	tst	r2, r1
 8008512:	d009      	beq.n	8008528 <__gethex+0x1ec>
 8008514:	4553      	cmp	r3, sl
 8008516:	dd05      	ble.n	8008524 <__gethex+0x1e8>
 8008518:	1eb9      	subs	r1, r7, #2
 800851a:	4620      	mov	r0, r4
 800851c:	f000 fecb 	bl	80092b6 <__any_on>
 8008520:	2800      	cmp	r0, #0
 8008522:	d144      	bne.n	80085ae <__gethex+0x272>
 8008524:	f04f 0a02 	mov.w	sl, #2
 8008528:	4639      	mov	r1, r7
 800852a:	4620      	mov	r0, r4
 800852c:	f7ff fe9e 	bl	800826c <rshift>
 8008530:	443d      	add	r5, r7
 8008532:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008536:	42ab      	cmp	r3, r5
 8008538:	da4a      	bge.n	80085d0 <__gethex+0x294>
 800853a:	9802      	ldr	r0, [sp, #8]
 800853c:	4621      	mov	r1, r4
 800853e:	f000 fa67 	bl	8008a10 <_Bfree>
 8008542:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008544:	2300      	movs	r3, #0
 8008546:	6013      	str	r3, [r2, #0]
 8008548:	27a3      	movs	r7, #163	; 0xa3
 800854a:	e789      	b.n	8008460 <__gethex+0x124>
 800854c:	1e73      	subs	r3, r6, #1
 800854e:	9a06      	ldr	r2, [sp, #24]
 8008550:	9307      	str	r3, [sp, #28]
 8008552:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008556:	4293      	cmp	r3, r2
 8008558:	d019      	beq.n	800858e <__gethex+0x252>
 800855a:	f1bb 0f20 	cmp.w	fp, #32
 800855e:	d107      	bne.n	8008570 <__gethex+0x234>
 8008560:	9b04      	ldr	r3, [sp, #16]
 8008562:	9a01      	ldr	r2, [sp, #4]
 8008564:	f843 2b04 	str.w	r2, [r3], #4
 8008568:	9304      	str	r3, [sp, #16]
 800856a:	2300      	movs	r3, #0
 800856c:	9301      	str	r3, [sp, #4]
 800856e:	469b      	mov	fp, r3
 8008570:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008574:	f7ff fecc 	bl	8008310 <__hexdig_fun>
 8008578:	9b01      	ldr	r3, [sp, #4]
 800857a:	f000 000f 	and.w	r0, r0, #15
 800857e:	fa00 f00b 	lsl.w	r0, r0, fp
 8008582:	4303      	orrs	r3, r0
 8008584:	9301      	str	r3, [sp, #4]
 8008586:	f10b 0b04 	add.w	fp, fp, #4
 800858a:	9b07      	ldr	r3, [sp, #28]
 800858c:	e00d      	b.n	80085aa <__gethex+0x26e>
 800858e:	9a08      	ldr	r2, [sp, #32]
 8008590:	1e73      	subs	r3, r6, #1
 8008592:	4413      	add	r3, r2
 8008594:	42bb      	cmp	r3, r7
 8008596:	d3e0      	bcc.n	800855a <__gethex+0x21e>
 8008598:	4618      	mov	r0, r3
 800859a:	9903      	ldr	r1, [sp, #12]
 800859c:	9309      	str	r3, [sp, #36]	; 0x24
 800859e:	4652      	mov	r2, sl
 80085a0:	f001 f90e 	bl	80097c0 <strncmp>
 80085a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d1d7      	bne.n	800855a <__gethex+0x21e>
 80085aa:	461e      	mov	r6, r3
 80085ac:	e78c      	b.n	80084c8 <__gethex+0x18c>
 80085ae:	f04f 0a03 	mov.w	sl, #3
 80085b2:	e7b9      	b.n	8008528 <__gethex+0x1ec>
 80085b4:	da09      	bge.n	80085ca <__gethex+0x28e>
 80085b6:	1bf7      	subs	r7, r6, r7
 80085b8:	4621      	mov	r1, r4
 80085ba:	9802      	ldr	r0, [sp, #8]
 80085bc:	463a      	mov	r2, r7
 80085be:	f000 fc3f 	bl	8008e40 <__lshift>
 80085c2:	1bed      	subs	r5, r5, r7
 80085c4:	4604      	mov	r4, r0
 80085c6:	f100 0914 	add.w	r9, r0, #20
 80085ca:	f04f 0a00 	mov.w	sl, #0
 80085ce:	e7b0      	b.n	8008532 <__gethex+0x1f6>
 80085d0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80085d4:	42a8      	cmp	r0, r5
 80085d6:	dd71      	ble.n	80086bc <__gethex+0x380>
 80085d8:	1b45      	subs	r5, r0, r5
 80085da:	42ae      	cmp	r6, r5
 80085dc:	dc35      	bgt.n	800864a <__gethex+0x30e>
 80085de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d029      	beq.n	800863a <__gethex+0x2fe>
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	d02b      	beq.n	8008642 <__gethex+0x306>
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d11c      	bne.n	8008628 <__gethex+0x2ec>
 80085ee:	42ae      	cmp	r6, r5
 80085f0:	d11a      	bne.n	8008628 <__gethex+0x2ec>
 80085f2:	2e01      	cmp	r6, #1
 80085f4:	d112      	bne.n	800861c <__gethex+0x2e0>
 80085f6:	9a05      	ldr	r2, [sp, #20]
 80085f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80085fc:	6013      	str	r3, [r2, #0]
 80085fe:	2301      	movs	r3, #1
 8008600:	6123      	str	r3, [r4, #16]
 8008602:	f8c9 3000 	str.w	r3, [r9]
 8008606:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008608:	2762      	movs	r7, #98	; 0x62
 800860a:	601c      	str	r4, [r3, #0]
 800860c:	e728      	b.n	8008460 <__gethex+0x124>
 800860e:	bf00      	nop
 8008610:	0800a700 	.word	0x0800a700
 8008614:	0800a688 	.word	0x0800a688
 8008618:	0800a699 	.word	0x0800a699
 800861c:	1e71      	subs	r1, r6, #1
 800861e:	4620      	mov	r0, r4
 8008620:	f000 fe49 	bl	80092b6 <__any_on>
 8008624:	2800      	cmp	r0, #0
 8008626:	d1e6      	bne.n	80085f6 <__gethex+0x2ba>
 8008628:	9802      	ldr	r0, [sp, #8]
 800862a:	4621      	mov	r1, r4
 800862c:	f000 f9f0 	bl	8008a10 <_Bfree>
 8008630:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008632:	2300      	movs	r3, #0
 8008634:	6013      	str	r3, [r2, #0]
 8008636:	2750      	movs	r7, #80	; 0x50
 8008638:	e712      	b.n	8008460 <__gethex+0x124>
 800863a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1f3      	bne.n	8008628 <__gethex+0x2ec>
 8008640:	e7d9      	b.n	80085f6 <__gethex+0x2ba>
 8008642:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1d6      	bne.n	80085f6 <__gethex+0x2ba>
 8008648:	e7ee      	b.n	8008628 <__gethex+0x2ec>
 800864a:	1e6f      	subs	r7, r5, #1
 800864c:	f1ba 0f00 	cmp.w	sl, #0
 8008650:	d131      	bne.n	80086b6 <__gethex+0x37a>
 8008652:	b127      	cbz	r7, 800865e <__gethex+0x322>
 8008654:	4639      	mov	r1, r7
 8008656:	4620      	mov	r0, r4
 8008658:	f000 fe2d 	bl	80092b6 <__any_on>
 800865c:	4682      	mov	sl, r0
 800865e:	117b      	asrs	r3, r7, #5
 8008660:	2101      	movs	r1, #1
 8008662:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008666:	f007 071f 	and.w	r7, r7, #31
 800866a:	fa01 f707 	lsl.w	r7, r1, r7
 800866e:	421f      	tst	r7, r3
 8008670:	4629      	mov	r1, r5
 8008672:	4620      	mov	r0, r4
 8008674:	bf18      	it	ne
 8008676:	f04a 0a02 	orrne.w	sl, sl, #2
 800867a:	1b76      	subs	r6, r6, r5
 800867c:	f7ff fdf6 	bl	800826c <rshift>
 8008680:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008684:	2702      	movs	r7, #2
 8008686:	f1ba 0f00 	cmp.w	sl, #0
 800868a:	d048      	beq.n	800871e <__gethex+0x3e2>
 800868c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008690:	2b02      	cmp	r3, #2
 8008692:	d015      	beq.n	80086c0 <__gethex+0x384>
 8008694:	2b03      	cmp	r3, #3
 8008696:	d017      	beq.n	80086c8 <__gethex+0x38c>
 8008698:	2b01      	cmp	r3, #1
 800869a:	d109      	bne.n	80086b0 <__gethex+0x374>
 800869c:	f01a 0f02 	tst.w	sl, #2
 80086a0:	d006      	beq.n	80086b0 <__gethex+0x374>
 80086a2:	f8d9 0000 	ldr.w	r0, [r9]
 80086a6:	ea4a 0a00 	orr.w	sl, sl, r0
 80086aa:	f01a 0f01 	tst.w	sl, #1
 80086ae:	d10e      	bne.n	80086ce <__gethex+0x392>
 80086b0:	f047 0710 	orr.w	r7, r7, #16
 80086b4:	e033      	b.n	800871e <__gethex+0x3e2>
 80086b6:	f04f 0a01 	mov.w	sl, #1
 80086ba:	e7d0      	b.n	800865e <__gethex+0x322>
 80086bc:	2701      	movs	r7, #1
 80086be:	e7e2      	b.n	8008686 <__gethex+0x34a>
 80086c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086c2:	f1c3 0301 	rsb	r3, r3, #1
 80086c6:	9315      	str	r3, [sp, #84]	; 0x54
 80086c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d0f0      	beq.n	80086b0 <__gethex+0x374>
 80086ce:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80086d2:	f104 0314 	add.w	r3, r4, #20
 80086d6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80086da:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80086de:	f04f 0c00 	mov.w	ip, #0
 80086e2:	4618      	mov	r0, r3
 80086e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80086e8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80086ec:	d01c      	beq.n	8008728 <__gethex+0x3ec>
 80086ee:	3201      	adds	r2, #1
 80086f0:	6002      	str	r2, [r0, #0]
 80086f2:	2f02      	cmp	r7, #2
 80086f4:	f104 0314 	add.w	r3, r4, #20
 80086f8:	d13d      	bne.n	8008776 <__gethex+0x43a>
 80086fa:	f8d8 2000 	ldr.w	r2, [r8]
 80086fe:	3a01      	subs	r2, #1
 8008700:	42b2      	cmp	r2, r6
 8008702:	d10a      	bne.n	800871a <__gethex+0x3de>
 8008704:	1171      	asrs	r1, r6, #5
 8008706:	2201      	movs	r2, #1
 8008708:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800870c:	f006 061f 	and.w	r6, r6, #31
 8008710:	fa02 f606 	lsl.w	r6, r2, r6
 8008714:	421e      	tst	r6, r3
 8008716:	bf18      	it	ne
 8008718:	4617      	movne	r7, r2
 800871a:	f047 0720 	orr.w	r7, r7, #32
 800871e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008720:	601c      	str	r4, [r3, #0]
 8008722:	9b05      	ldr	r3, [sp, #20]
 8008724:	601d      	str	r5, [r3, #0]
 8008726:	e69b      	b.n	8008460 <__gethex+0x124>
 8008728:	4299      	cmp	r1, r3
 800872a:	f843 cc04 	str.w	ip, [r3, #-4]
 800872e:	d8d8      	bhi.n	80086e2 <__gethex+0x3a6>
 8008730:	68a3      	ldr	r3, [r4, #8]
 8008732:	459b      	cmp	fp, r3
 8008734:	db17      	blt.n	8008766 <__gethex+0x42a>
 8008736:	6861      	ldr	r1, [r4, #4]
 8008738:	9802      	ldr	r0, [sp, #8]
 800873a:	3101      	adds	r1, #1
 800873c:	f000 f928 	bl	8008990 <_Balloc>
 8008740:	4681      	mov	r9, r0
 8008742:	b918      	cbnz	r0, 800874c <__gethex+0x410>
 8008744:	4b1a      	ldr	r3, [pc, #104]	; (80087b0 <__gethex+0x474>)
 8008746:	4602      	mov	r2, r0
 8008748:	2184      	movs	r1, #132	; 0x84
 800874a:	e6ac      	b.n	80084a6 <__gethex+0x16a>
 800874c:	6922      	ldr	r2, [r4, #16]
 800874e:	3202      	adds	r2, #2
 8008750:	f104 010c 	add.w	r1, r4, #12
 8008754:	0092      	lsls	r2, r2, #2
 8008756:	300c      	adds	r0, #12
 8008758:	f000 f90c 	bl	8008974 <memcpy>
 800875c:	4621      	mov	r1, r4
 800875e:	9802      	ldr	r0, [sp, #8]
 8008760:	f000 f956 	bl	8008a10 <_Bfree>
 8008764:	464c      	mov	r4, r9
 8008766:	6923      	ldr	r3, [r4, #16]
 8008768:	1c5a      	adds	r2, r3, #1
 800876a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800876e:	6122      	str	r2, [r4, #16]
 8008770:	2201      	movs	r2, #1
 8008772:	615a      	str	r2, [r3, #20]
 8008774:	e7bd      	b.n	80086f2 <__gethex+0x3b6>
 8008776:	6922      	ldr	r2, [r4, #16]
 8008778:	455a      	cmp	r2, fp
 800877a:	dd0b      	ble.n	8008794 <__gethex+0x458>
 800877c:	2101      	movs	r1, #1
 800877e:	4620      	mov	r0, r4
 8008780:	f7ff fd74 	bl	800826c <rshift>
 8008784:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008788:	3501      	adds	r5, #1
 800878a:	42ab      	cmp	r3, r5
 800878c:	f6ff aed5 	blt.w	800853a <__gethex+0x1fe>
 8008790:	2701      	movs	r7, #1
 8008792:	e7c2      	b.n	800871a <__gethex+0x3de>
 8008794:	f016 061f 	ands.w	r6, r6, #31
 8008798:	d0fa      	beq.n	8008790 <__gethex+0x454>
 800879a:	4453      	add	r3, sl
 800879c:	f1c6 0620 	rsb	r6, r6, #32
 80087a0:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80087a4:	f000 f9e6 	bl	8008b74 <__hi0bits>
 80087a8:	42b0      	cmp	r0, r6
 80087aa:	dbe7      	blt.n	800877c <__gethex+0x440>
 80087ac:	e7f0      	b.n	8008790 <__gethex+0x454>
 80087ae:	bf00      	nop
 80087b0:	0800a688 	.word	0x0800a688

080087b4 <L_shift>:
 80087b4:	f1c2 0208 	rsb	r2, r2, #8
 80087b8:	0092      	lsls	r2, r2, #2
 80087ba:	b570      	push	{r4, r5, r6, lr}
 80087bc:	f1c2 0620 	rsb	r6, r2, #32
 80087c0:	6843      	ldr	r3, [r0, #4]
 80087c2:	6804      	ldr	r4, [r0, #0]
 80087c4:	fa03 f506 	lsl.w	r5, r3, r6
 80087c8:	432c      	orrs	r4, r5
 80087ca:	40d3      	lsrs	r3, r2
 80087cc:	6004      	str	r4, [r0, #0]
 80087ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80087d2:	4288      	cmp	r0, r1
 80087d4:	d3f4      	bcc.n	80087c0 <L_shift+0xc>
 80087d6:	bd70      	pop	{r4, r5, r6, pc}

080087d8 <__match>:
 80087d8:	b530      	push	{r4, r5, lr}
 80087da:	6803      	ldr	r3, [r0, #0]
 80087dc:	3301      	adds	r3, #1
 80087de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087e2:	b914      	cbnz	r4, 80087ea <__match+0x12>
 80087e4:	6003      	str	r3, [r0, #0]
 80087e6:	2001      	movs	r0, #1
 80087e8:	bd30      	pop	{r4, r5, pc}
 80087ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80087f2:	2d19      	cmp	r5, #25
 80087f4:	bf98      	it	ls
 80087f6:	3220      	addls	r2, #32
 80087f8:	42a2      	cmp	r2, r4
 80087fa:	d0f0      	beq.n	80087de <__match+0x6>
 80087fc:	2000      	movs	r0, #0
 80087fe:	e7f3      	b.n	80087e8 <__match+0x10>

08008800 <__hexnan>:
 8008800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008804:	680b      	ldr	r3, [r1, #0]
 8008806:	115e      	asrs	r6, r3, #5
 8008808:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800880c:	f013 031f 	ands.w	r3, r3, #31
 8008810:	b087      	sub	sp, #28
 8008812:	bf18      	it	ne
 8008814:	3604      	addne	r6, #4
 8008816:	2500      	movs	r5, #0
 8008818:	1f37      	subs	r7, r6, #4
 800881a:	4690      	mov	r8, r2
 800881c:	6802      	ldr	r2, [r0, #0]
 800881e:	9301      	str	r3, [sp, #4]
 8008820:	4682      	mov	sl, r0
 8008822:	f846 5c04 	str.w	r5, [r6, #-4]
 8008826:	46b9      	mov	r9, r7
 8008828:	463c      	mov	r4, r7
 800882a:	9502      	str	r5, [sp, #8]
 800882c:	46ab      	mov	fp, r5
 800882e:	7851      	ldrb	r1, [r2, #1]
 8008830:	1c53      	adds	r3, r2, #1
 8008832:	9303      	str	r3, [sp, #12]
 8008834:	b341      	cbz	r1, 8008888 <__hexnan+0x88>
 8008836:	4608      	mov	r0, r1
 8008838:	9205      	str	r2, [sp, #20]
 800883a:	9104      	str	r1, [sp, #16]
 800883c:	f7ff fd68 	bl	8008310 <__hexdig_fun>
 8008840:	2800      	cmp	r0, #0
 8008842:	d14f      	bne.n	80088e4 <__hexnan+0xe4>
 8008844:	9904      	ldr	r1, [sp, #16]
 8008846:	9a05      	ldr	r2, [sp, #20]
 8008848:	2920      	cmp	r1, #32
 800884a:	d818      	bhi.n	800887e <__hexnan+0x7e>
 800884c:	9b02      	ldr	r3, [sp, #8]
 800884e:	459b      	cmp	fp, r3
 8008850:	dd13      	ble.n	800887a <__hexnan+0x7a>
 8008852:	454c      	cmp	r4, r9
 8008854:	d206      	bcs.n	8008864 <__hexnan+0x64>
 8008856:	2d07      	cmp	r5, #7
 8008858:	dc04      	bgt.n	8008864 <__hexnan+0x64>
 800885a:	462a      	mov	r2, r5
 800885c:	4649      	mov	r1, r9
 800885e:	4620      	mov	r0, r4
 8008860:	f7ff ffa8 	bl	80087b4 <L_shift>
 8008864:	4544      	cmp	r4, r8
 8008866:	d950      	bls.n	800890a <__hexnan+0x10a>
 8008868:	2300      	movs	r3, #0
 800886a:	f1a4 0904 	sub.w	r9, r4, #4
 800886e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008872:	f8cd b008 	str.w	fp, [sp, #8]
 8008876:	464c      	mov	r4, r9
 8008878:	461d      	mov	r5, r3
 800887a:	9a03      	ldr	r2, [sp, #12]
 800887c:	e7d7      	b.n	800882e <__hexnan+0x2e>
 800887e:	2929      	cmp	r1, #41	; 0x29
 8008880:	d156      	bne.n	8008930 <__hexnan+0x130>
 8008882:	3202      	adds	r2, #2
 8008884:	f8ca 2000 	str.w	r2, [sl]
 8008888:	f1bb 0f00 	cmp.w	fp, #0
 800888c:	d050      	beq.n	8008930 <__hexnan+0x130>
 800888e:	454c      	cmp	r4, r9
 8008890:	d206      	bcs.n	80088a0 <__hexnan+0xa0>
 8008892:	2d07      	cmp	r5, #7
 8008894:	dc04      	bgt.n	80088a0 <__hexnan+0xa0>
 8008896:	462a      	mov	r2, r5
 8008898:	4649      	mov	r1, r9
 800889a:	4620      	mov	r0, r4
 800889c:	f7ff ff8a 	bl	80087b4 <L_shift>
 80088a0:	4544      	cmp	r4, r8
 80088a2:	d934      	bls.n	800890e <__hexnan+0x10e>
 80088a4:	f1a8 0204 	sub.w	r2, r8, #4
 80088a8:	4623      	mov	r3, r4
 80088aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80088ae:	f842 1f04 	str.w	r1, [r2, #4]!
 80088b2:	429f      	cmp	r7, r3
 80088b4:	d2f9      	bcs.n	80088aa <__hexnan+0xaa>
 80088b6:	1b3b      	subs	r3, r7, r4
 80088b8:	f023 0303 	bic.w	r3, r3, #3
 80088bc:	3304      	adds	r3, #4
 80088be:	3401      	adds	r4, #1
 80088c0:	3e03      	subs	r6, #3
 80088c2:	42b4      	cmp	r4, r6
 80088c4:	bf88      	it	hi
 80088c6:	2304      	movhi	r3, #4
 80088c8:	4443      	add	r3, r8
 80088ca:	2200      	movs	r2, #0
 80088cc:	f843 2b04 	str.w	r2, [r3], #4
 80088d0:	429f      	cmp	r7, r3
 80088d2:	d2fb      	bcs.n	80088cc <__hexnan+0xcc>
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	b91b      	cbnz	r3, 80088e0 <__hexnan+0xe0>
 80088d8:	4547      	cmp	r7, r8
 80088da:	d127      	bne.n	800892c <__hexnan+0x12c>
 80088dc:	2301      	movs	r3, #1
 80088de:	603b      	str	r3, [r7, #0]
 80088e0:	2005      	movs	r0, #5
 80088e2:	e026      	b.n	8008932 <__hexnan+0x132>
 80088e4:	3501      	adds	r5, #1
 80088e6:	2d08      	cmp	r5, #8
 80088e8:	f10b 0b01 	add.w	fp, fp, #1
 80088ec:	dd06      	ble.n	80088fc <__hexnan+0xfc>
 80088ee:	4544      	cmp	r4, r8
 80088f0:	d9c3      	bls.n	800887a <__hexnan+0x7a>
 80088f2:	2300      	movs	r3, #0
 80088f4:	f844 3c04 	str.w	r3, [r4, #-4]
 80088f8:	2501      	movs	r5, #1
 80088fa:	3c04      	subs	r4, #4
 80088fc:	6822      	ldr	r2, [r4, #0]
 80088fe:	f000 000f 	and.w	r0, r0, #15
 8008902:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008906:	6022      	str	r2, [r4, #0]
 8008908:	e7b7      	b.n	800887a <__hexnan+0x7a>
 800890a:	2508      	movs	r5, #8
 800890c:	e7b5      	b.n	800887a <__hexnan+0x7a>
 800890e:	9b01      	ldr	r3, [sp, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d0df      	beq.n	80088d4 <__hexnan+0xd4>
 8008914:	f04f 32ff 	mov.w	r2, #4294967295
 8008918:	f1c3 0320 	rsb	r3, r3, #32
 800891c:	fa22 f303 	lsr.w	r3, r2, r3
 8008920:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008924:	401a      	ands	r2, r3
 8008926:	f846 2c04 	str.w	r2, [r6, #-4]
 800892a:	e7d3      	b.n	80088d4 <__hexnan+0xd4>
 800892c:	3f04      	subs	r7, #4
 800892e:	e7d1      	b.n	80088d4 <__hexnan+0xd4>
 8008930:	2004      	movs	r0, #4
 8008932:	b007      	add	sp, #28
 8008934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008938 <_localeconv_r>:
 8008938:	4800      	ldr	r0, [pc, #0]	; (800893c <_localeconv_r+0x4>)
 800893a:	4770      	bx	lr
 800893c:	20000164 	.word	0x20000164

08008940 <malloc>:
 8008940:	4b02      	ldr	r3, [pc, #8]	; (800894c <malloc+0xc>)
 8008942:	4601      	mov	r1, r0
 8008944:	6818      	ldr	r0, [r3, #0]
 8008946:	f000 bd55 	b.w	80093f4 <_malloc_r>
 800894a:	bf00      	nop
 800894c:	2000000c 	.word	0x2000000c

08008950 <__ascii_mbtowc>:
 8008950:	b082      	sub	sp, #8
 8008952:	b901      	cbnz	r1, 8008956 <__ascii_mbtowc+0x6>
 8008954:	a901      	add	r1, sp, #4
 8008956:	b142      	cbz	r2, 800896a <__ascii_mbtowc+0x1a>
 8008958:	b14b      	cbz	r3, 800896e <__ascii_mbtowc+0x1e>
 800895a:	7813      	ldrb	r3, [r2, #0]
 800895c:	600b      	str	r3, [r1, #0]
 800895e:	7812      	ldrb	r2, [r2, #0]
 8008960:	1e10      	subs	r0, r2, #0
 8008962:	bf18      	it	ne
 8008964:	2001      	movne	r0, #1
 8008966:	b002      	add	sp, #8
 8008968:	4770      	bx	lr
 800896a:	4610      	mov	r0, r2
 800896c:	e7fb      	b.n	8008966 <__ascii_mbtowc+0x16>
 800896e:	f06f 0001 	mvn.w	r0, #1
 8008972:	e7f8      	b.n	8008966 <__ascii_mbtowc+0x16>

08008974 <memcpy>:
 8008974:	440a      	add	r2, r1
 8008976:	4291      	cmp	r1, r2
 8008978:	f100 33ff 	add.w	r3, r0, #4294967295
 800897c:	d100      	bne.n	8008980 <memcpy+0xc>
 800897e:	4770      	bx	lr
 8008980:	b510      	push	{r4, lr}
 8008982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800898a:	4291      	cmp	r1, r2
 800898c:	d1f9      	bne.n	8008982 <memcpy+0xe>
 800898e:	bd10      	pop	{r4, pc}

08008990 <_Balloc>:
 8008990:	b570      	push	{r4, r5, r6, lr}
 8008992:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008994:	4604      	mov	r4, r0
 8008996:	460d      	mov	r5, r1
 8008998:	b976      	cbnz	r6, 80089b8 <_Balloc+0x28>
 800899a:	2010      	movs	r0, #16
 800899c:	f7ff ffd0 	bl	8008940 <malloc>
 80089a0:	4602      	mov	r2, r0
 80089a2:	6260      	str	r0, [r4, #36]	; 0x24
 80089a4:	b920      	cbnz	r0, 80089b0 <_Balloc+0x20>
 80089a6:	4b18      	ldr	r3, [pc, #96]	; (8008a08 <_Balloc+0x78>)
 80089a8:	4818      	ldr	r0, [pc, #96]	; (8008a0c <_Balloc+0x7c>)
 80089aa:	2166      	movs	r1, #102	; 0x66
 80089ac:	f000 ff2a 	bl	8009804 <__assert_func>
 80089b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089b4:	6006      	str	r6, [r0, #0]
 80089b6:	60c6      	str	r6, [r0, #12]
 80089b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80089ba:	68f3      	ldr	r3, [r6, #12]
 80089bc:	b183      	cbz	r3, 80089e0 <_Balloc+0x50>
 80089be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80089c6:	b9b8      	cbnz	r0, 80089f8 <_Balloc+0x68>
 80089c8:	2101      	movs	r1, #1
 80089ca:	fa01 f605 	lsl.w	r6, r1, r5
 80089ce:	1d72      	adds	r2, r6, #5
 80089d0:	0092      	lsls	r2, r2, #2
 80089d2:	4620      	mov	r0, r4
 80089d4:	f000 fc90 	bl	80092f8 <_calloc_r>
 80089d8:	b160      	cbz	r0, 80089f4 <_Balloc+0x64>
 80089da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80089de:	e00e      	b.n	80089fe <_Balloc+0x6e>
 80089e0:	2221      	movs	r2, #33	; 0x21
 80089e2:	2104      	movs	r1, #4
 80089e4:	4620      	mov	r0, r4
 80089e6:	f000 fc87 	bl	80092f8 <_calloc_r>
 80089ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089ec:	60f0      	str	r0, [r6, #12]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1e4      	bne.n	80089be <_Balloc+0x2e>
 80089f4:	2000      	movs	r0, #0
 80089f6:	bd70      	pop	{r4, r5, r6, pc}
 80089f8:	6802      	ldr	r2, [r0, #0]
 80089fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089fe:	2300      	movs	r3, #0
 8008a00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a04:	e7f7      	b.n	80089f6 <_Balloc+0x66>
 8008a06:	bf00      	nop
 8008a08:	0800a616 	.word	0x0800a616
 8008a0c:	0800a714 	.word	0x0800a714

08008a10 <_Bfree>:
 8008a10:	b570      	push	{r4, r5, r6, lr}
 8008a12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a14:	4605      	mov	r5, r0
 8008a16:	460c      	mov	r4, r1
 8008a18:	b976      	cbnz	r6, 8008a38 <_Bfree+0x28>
 8008a1a:	2010      	movs	r0, #16
 8008a1c:	f7ff ff90 	bl	8008940 <malloc>
 8008a20:	4602      	mov	r2, r0
 8008a22:	6268      	str	r0, [r5, #36]	; 0x24
 8008a24:	b920      	cbnz	r0, 8008a30 <_Bfree+0x20>
 8008a26:	4b09      	ldr	r3, [pc, #36]	; (8008a4c <_Bfree+0x3c>)
 8008a28:	4809      	ldr	r0, [pc, #36]	; (8008a50 <_Bfree+0x40>)
 8008a2a:	218a      	movs	r1, #138	; 0x8a
 8008a2c:	f000 feea 	bl	8009804 <__assert_func>
 8008a30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a34:	6006      	str	r6, [r0, #0]
 8008a36:	60c6      	str	r6, [r0, #12]
 8008a38:	b13c      	cbz	r4, 8008a4a <_Bfree+0x3a>
 8008a3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a3c:	6862      	ldr	r2, [r4, #4]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a44:	6021      	str	r1, [r4, #0]
 8008a46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a4a:	bd70      	pop	{r4, r5, r6, pc}
 8008a4c:	0800a616 	.word	0x0800a616
 8008a50:	0800a714 	.word	0x0800a714

08008a54 <__multadd>:
 8008a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a58:	690d      	ldr	r5, [r1, #16]
 8008a5a:	4607      	mov	r7, r0
 8008a5c:	460c      	mov	r4, r1
 8008a5e:	461e      	mov	r6, r3
 8008a60:	f101 0c14 	add.w	ip, r1, #20
 8008a64:	2000      	movs	r0, #0
 8008a66:	f8dc 3000 	ldr.w	r3, [ip]
 8008a6a:	b299      	uxth	r1, r3
 8008a6c:	fb02 6101 	mla	r1, r2, r1, r6
 8008a70:	0c1e      	lsrs	r6, r3, #16
 8008a72:	0c0b      	lsrs	r3, r1, #16
 8008a74:	fb02 3306 	mla	r3, r2, r6, r3
 8008a78:	b289      	uxth	r1, r1
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a80:	4285      	cmp	r5, r0
 8008a82:	f84c 1b04 	str.w	r1, [ip], #4
 8008a86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a8a:	dcec      	bgt.n	8008a66 <__multadd+0x12>
 8008a8c:	b30e      	cbz	r6, 8008ad2 <__multadd+0x7e>
 8008a8e:	68a3      	ldr	r3, [r4, #8]
 8008a90:	42ab      	cmp	r3, r5
 8008a92:	dc19      	bgt.n	8008ac8 <__multadd+0x74>
 8008a94:	6861      	ldr	r1, [r4, #4]
 8008a96:	4638      	mov	r0, r7
 8008a98:	3101      	adds	r1, #1
 8008a9a:	f7ff ff79 	bl	8008990 <_Balloc>
 8008a9e:	4680      	mov	r8, r0
 8008aa0:	b928      	cbnz	r0, 8008aae <__multadd+0x5a>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	4b0c      	ldr	r3, [pc, #48]	; (8008ad8 <__multadd+0x84>)
 8008aa6:	480d      	ldr	r0, [pc, #52]	; (8008adc <__multadd+0x88>)
 8008aa8:	21b5      	movs	r1, #181	; 0xb5
 8008aaa:	f000 feab 	bl	8009804 <__assert_func>
 8008aae:	6922      	ldr	r2, [r4, #16]
 8008ab0:	3202      	adds	r2, #2
 8008ab2:	f104 010c 	add.w	r1, r4, #12
 8008ab6:	0092      	lsls	r2, r2, #2
 8008ab8:	300c      	adds	r0, #12
 8008aba:	f7ff ff5b 	bl	8008974 <memcpy>
 8008abe:	4621      	mov	r1, r4
 8008ac0:	4638      	mov	r0, r7
 8008ac2:	f7ff ffa5 	bl	8008a10 <_Bfree>
 8008ac6:	4644      	mov	r4, r8
 8008ac8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008acc:	3501      	adds	r5, #1
 8008ace:	615e      	str	r6, [r3, #20]
 8008ad0:	6125      	str	r5, [r4, #16]
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ad8:	0800a688 	.word	0x0800a688
 8008adc:	0800a714 	.word	0x0800a714

08008ae0 <__s2b>:
 8008ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ae4:	460c      	mov	r4, r1
 8008ae6:	4615      	mov	r5, r2
 8008ae8:	461f      	mov	r7, r3
 8008aea:	2209      	movs	r2, #9
 8008aec:	3308      	adds	r3, #8
 8008aee:	4606      	mov	r6, r0
 8008af0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008af4:	2100      	movs	r1, #0
 8008af6:	2201      	movs	r2, #1
 8008af8:	429a      	cmp	r2, r3
 8008afa:	db09      	blt.n	8008b10 <__s2b+0x30>
 8008afc:	4630      	mov	r0, r6
 8008afe:	f7ff ff47 	bl	8008990 <_Balloc>
 8008b02:	b940      	cbnz	r0, 8008b16 <__s2b+0x36>
 8008b04:	4602      	mov	r2, r0
 8008b06:	4b19      	ldr	r3, [pc, #100]	; (8008b6c <__s2b+0x8c>)
 8008b08:	4819      	ldr	r0, [pc, #100]	; (8008b70 <__s2b+0x90>)
 8008b0a:	21ce      	movs	r1, #206	; 0xce
 8008b0c:	f000 fe7a 	bl	8009804 <__assert_func>
 8008b10:	0052      	lsls	r2, r2, #1
 8008b12:	3101      	adds	r1, #1
 8008b14:	e7f0      	b.n	8008af8 <__s2b+0x18>
 8008b16:	9b08      	ldr	r3, [sp, #32]
 8008b18:	6143      	str	r3, [r0, #20]
 8008b1a:	2d09      	cmp	r5, #9
 8008b1c:	f04f 0301 	mov.w	r3, #1
 8008b20:	6103      	str	r3, [r0, #16]
 8008b22:	dd16      	ble.n	8008b52 <__s2b+0x72>
 8008b24:	f104 0909 	add.w	r9, r4, #9
 8008b28:	46c8      	mov	r8, r9
 8008b2a:	442c      	add	r4, r5
 8008b2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008b30:	4601      	mov	r1, r0
 8008b32:	3b30      	subs	r3, #48	; 0x30
 8008b34:	220a      	movs	r2, #10
 8008b36:	4630      	mov	r0, r6
 8008b38:	f7ff ff8c 	bl	8008a54 <__multadd>
 8008b3c:	45a0      	cmp	r8, r4
 8008b3e:	d1f5      	bne.n	8008b2c <__s2b+0x4c>
 8008b40:	f1a5 0408 	sub.w	r4, r5, #8
 8008b44:	444c      	add	r4, r9
 8008b46:	1b2d      	subs	r5, r5, r4
 8008b48:	1963      	adds	r3, r4, r5
 8008b4a:	42bb      	cmp	r3, r7
 8008b4c:	db04      	blt.n	8008b58 <__s2b+0x78>
 8008b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b52:	340a      	adds	r4, #10
 8008b54:	2509      	movs	r5, #9
 8008b56:	e7f6      	b.n	8008b46 <__s2b+0x66>
 8008b58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b5c:	4601      	mov	r1, r0
 8008b5e:	3b30      	subs	r3, #48	; 0x30
 8008b60:	220a      	movs	r2, #10
 8008b62:	4630      	mov	r0, r6
 8008b64:	f7ff ff76 	bl	8008a54 <__multadd>
 8008b68:	e7ee      	b.n	8008b48 <__s2b+0x68>
 8008b6a:	bf00      	nop
 8008b6c:	0800a688 	.word	0x0800a688
 8008b70:	0800a714 	.word	0x0800a714

08008b74 <__hi0bits>:
 8008b74:	0c02      	lsrs	r2, r0, #16
 8008b76:	0412      	lsls	r2, r2, #16
 8008b78:	4603      	mov	r3, r0
 8008b7a:	b9ca      	cbnz	r2, 8008bb0 <__hi0bits+0x3c>
 8008b7c:	0403      	lsls	r3, r0, #16
 8008b7e:	2010      	movs	r0, #16
 8008b80:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008b84:	bf04      	itt	eq
 8008b86:	021b      	lsleq	r3, r3, #8
 8008b88:	3008      	addeq	r0, #8
 8008b8a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008b8e:	bf04      	itt	eq
 8008b90:	011b      	lsleq	r3, r3, #4
 8008b92:	3004      	addeq	r0, #4
 8008b94:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008b98:	bf04      	itt	eq
 8008b9a:	009b      	lsleq	r3, r3, #2
 8008b9c:	3002      	addeq	r0, #2
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	db05      	blt.n	8008bae <__hi0bits+0x3a>
 8008ba2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008ba6:	f100 0001 	add.w	r0, r0, #1
 8008baa:	bf08      	it	eq
 8008bac:	2020      	moveq	r0, #32
 8008bae:	4770      	bx	lr
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	e7e5      	b.n	8008b80 <__hi0bits+0xc>

08008bb4 <__lo0bits>:
 8008bb4:	6803      	ldr	r3, [r0, #0]
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	f013 0007 	ands.w	r0, r3, #7
 8008bbc:	d00b      	beq.n	8008bd6 <__lo0bits+0x22>
 8008bbe:	07d9      	lsls	r1, r3, #31
 8008bc0:	d421      	bmi.n	8008c06 <__lo0bits+0x52>
 8008bc2:	0798      	lsls	r0, r3, #30
 8008bc4:	bf49      	itett	mi
 8008bc6:	085b      	lsrmi	r3, r3, #1
 8008bc8:	089b      	lsrpl	r3, r3, #2
 8008bca:	2001      	movmi	r0, #1
 8008bcc:	6013      	strmi	r3, [r2, #0]
 8008bce:	bf5c      	itt	pl
 8008bd0:	6013      	strpl	r3, [r2, #0]
 8008bd2:	2002      	movpl	r0, #2
 8008bd4:	4770      	bx	lr
 8008bd6:	b299      	uxth	r1, r3
 8008bd8:	b909      	cbnz	r1, 8008bde <__lo0bits+0x2a>
 8008bda:	0c1b      	lsrs	r3, r3, #16
 8008bdc:	2010      	movs	r0, #16
 8008bde:	b2d9      	uxtb	r1, r3
 8008be0:	b909      	cbnz	r1, 8008be6 <__lo0bits+0x32>
 8008be2:	3008      	adds	r0, #8
 8008be4:	0a1b      	lsrs	r3, r3, #8
 8008be6:	0719      	lsls	r1, r3, #28
 8008be8:	bf04      	itt	eq
 8008bea:	091b      	lsreq	r3, r3, #4
 8008bec:	3004      	addeq	r0, #4
 8008bee:	0799      	lsls	r1, r3, #30
 8008bf0:	bf04      	itt	eq
 8008bf2:	089b      	lsreq	r3, r3, #2
 8008bf4:	3002      	addeq	r0, #2
 8008bf6:	07d9      	lsls	r1, r3, #31
 8008bf8:	d403      	bmi.n	8008c02 <__lo0bits+0x4e>
 8008bfa:	085b      	lsrs	r3, r3, #1
 8008bfc:	f100 0001 	add.w	r0, r0, #1
 8008c00:	d003      	beq.n	8008c0a <__lo0bits+0x56>
 8008c02:	6013      	str	r3, [r2, #0]
 8008c04:	4770      	bx	lr
 8008c06:	2000      	movs	r0, #0
 8008c08:	4770      	bx	lr
 8008c0a:	2020      	movs	r0, #32
 8008c0c:	4770      	bx	lr
	...

08008c10 <__i2b>:
 8008c10:	b510      	push	{r4, lr}
 8008c12:	460c      	mov	r4, r1
 8008c14:	2101      	movs	r1, #1
 8008c16:	f7ff febb 	bl	8008990 <_Balloc>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	b928      	cbnz	r0, 8008c2a <__i2b+0x1a>
 8008c1e:	4b05      	ldr	r3, [pc, #20]	; (8008c34 <__i2b+0x24>)
 8008c20:	4805      	ldr	r0, [pc, #20]	; (8008c38 <__i2b+0x28>)
 8008c22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008c26:	f000 fded 	bl	8009804 <__assert_func>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	6144      	str	r4, [r0, #20]
 8008c2e:	6103      	str	r3, [r0, #16]
 8008c30:	bd10      	pop	{r4, pc}
 8008c32:	bf00      	nop
 8008c34:	0800a688 	.word	0x0800a688
 8008c38:	0800a714 	.word	0x0800a714

08008c3c <__multiply>:
 8008c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c40:	4691      	mov	r9, r2
 8008c42:	690a      	ldr	r2, [r1, #16]
 8008c44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	bfb8      	it	lt
 8008c4c:	460b      	movlt	r3, r1
 8008c4e:	460c      	mov	r4, r1
 8008c50:	bfbc      	itt	lt
 8008c52:	464c      	movlt	r4, r9
 8008c54:	4699      	movlt	r9, r3
 8008c56:	6927      	ldr	r7, [r4, #16]
 8008c58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008c5c:	68a3      	ldr	r3, [r4, #8]
 8008c5e:	6861      	ldr	r1, [r4, #4]
 8008c60:	eb07 060a 	add.w	r6, r7, sl
 8008c64:	42b3      	cmp	r3, r6
 8008c66:	b085      	sub	sp, #20
 8008c68:	bfb8      	it	lt
 8008c6a:	3101      	addlt	r1, #1
 8008c6c:	f7ff fe90 	bl	8008990 <_Balloc>
 8008c70:	b930      	cbnz	r0, 8008c80 <__multiply+0x44>
 8008c72:	4602      	mov	r2, r0
 8008c74:	4b43      	ldr	r3, [pc, #268]	; (8008d84 <__multiply+0x148>)
 8008c76:	4844      	ldr	r0, [pc, #272]	; (8008d88 <__multiply+0x14c>)
 8008c78:	f240 115d 	movw	r1, #349	; 0x15d
 8008c7c:	f000 fdc2 	bl	8009804 <__assert_func>
 8008c80:	f100 0514 	add.w	r5, r0, #20
 8008c84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c88:	462b      	mov	r3, r5
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	4543      	cmp	r3, r8
 8008c8e:	d321      	bcc.n	8008cd4 <__multiply+0x98>
 8008c90:	f104 0314 	add.w	r3, r4, #20
 8008c94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008c98:	f109 0314 	add.w	r3, r9, #20
 8008c9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008ca0:	9202      	str	r2, [sp, #8]
 8008ca2:	1b3a      	subs	r2, r7, r4
 8008ca4:	3a15      	subs	r2, #21
 8008ca6:	f022 0203 	bic.w	r2, r2, #3
 8008caa:	3204      	adds	r2, #4
 8008cac:	f104 0115 	add.w	r1, r4, #21
 8008cb0:	428f      	cmp	r7, r1
 8008cb2:	bf38      	it	cc
 8008cb4:	2204      	movcc	r2, #4
 8008cb6:	9201      	str	r2, [sp, #4]
 8008cb8:	9a02      	ldr	r2, [sp, #8]
 8008cba:	9303      	str	r3, [sp, #12]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d80c      	bhi.n	8008cda <__multiply+0x9e>
 8008cc0:	2e00      	cmp	r6, #0
 8008cc2:	dd03      	ble.n	8008ccc <__multiply+0x90>
 8008cc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d059      	beq.n	8008d80 <__multiply+0x144>
 8008ccc:	6106      	str	r6, [r0, #16]
 8008cce:	b005      	add	sp, #20
 8008cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd4:	f843 2b04 	str.w	r2, [r3], #4
 8008cd8:	e7d8      	b.n	8008c8c <__multiply+0x50>
 8008cda:	f8b3 a000 	ldrh.w	sl, [r3]
 8008cde:	f1ba 0f00 	cmp.w	sl, #0
 8008ce2:	d023      	beq.n	8008d2c <__multiply+0xf0>
 8008ce4:	f104 0e14 	add.w	lr, r4, #20
 8008ce8:	46a9      	mov	r9, r5
 8008cea:	f04f 0c00 	mov.w	ip, #0
 8008cee:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008cf2:	f8d9 1000 	ldr.w	r1, [r9]
 8008cf6:	fa1f fb82 	uxth.w	fp, r2
 8008cfa:	b289      	uxth	r1, r1
 8008cfc:	fb0a 110b 	mla	r1, sl, fp, r1
 8008d00:	4461      	add	r1, ip
 8008d02:	f8d9 c000 	ldr.w	ip, [r9]
 8008d06:	0c12      	lsrs	r2, r2, #16
 8008d08:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008d0c:	fb0a c202 	mla	r2, sl, r2, ip
 8008d10:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008d14:	b289      	uxth	r1, r1
 8008d16:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d1a:	4577      	cmp	r7, lr
 8008d1c:	f849 1b04 	str.w	r1, [r9], #4
 8008d20:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d24:	d8e3      	bhi.n	8008cee <__multiply+0xb2>
 8008d26:	9a01      	ldr	r2, [sp, #4]
 8008d28:	f845 c002 	str.w	ip, [r5, r2]
 8008d2c:	9a03      	ldr	r2, [sp, #12]
 8008d2e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008d32:	3304      	adds	r3, #4
 8008d34:	f1b9 0f00 	cmp.w	r9, #0
 8008d38:	d020      	beq.n	8008d7c <__multiply+0x140>
 8008d3a:	6829      	ldr	r1, [r5, #0]
 8008d3c:	f104 0c14 	add.w	ip, r4, #20
 8008d40:	46ae      	mov	lr, r5
 8008d42:	f04f 0a00 	mov.w	sl, #0
 8008d46:	f8bc b000 	ldrh.w	fp, [ip]
 8008d4a:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008d4e:	fb09 220b 	mla	r2, r9, fp, r2
 8008d52:	4492      	add	sl, r2
 8008d54:	b289      	uxth	r1, r1
 8008d56:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008d5a:	f84e 1b04 	str.w	r1, [lr], #4
 8008d5e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008d62:	f8be 1000 	ldrh.w	r1, [lr]
 8008d66:	0c12      	lsrs	r2, r2, #16
 8008d68:	fb09 1102 	mla	r1, r9, r2, r1
 8008d6c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008d70:	4567      	cmp	r7, ip
 8008d72:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008d76:	d8e6      	bhi.n	8008d46 <__multiply+0x10a>
 8008d78:	9a01      	ldr	r2, [sp, #4]
 8008d7a:	50a9      	str	r1, [r5, r2]
 8008d7c:	3504      	adds	r5, #4
 8008d7e:	e79b      	b.n	8008cb8 <__multiply+0x7c>
 8008d80:	3e01      	subs	r6, #1
 8008d82:	e79d      	b.n	8008cc0 <__multiply+0x84>
 8008d84:	0800a688 	.word	0x0800a688
 8008d88:	0800a714 	.word	0x0800a714

08008d8c <__pow5mult>:
 8008d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d90:	4615      	mov	r5, r2
 8008d92:	f012 0203 	ands.w	r2, r2, #3
 8008d96:	4606      	mov	r6, r0
 8008d98:	460f      	mov	r7, r1
 8008d9a:	d007      	beq.n	8008dac <__pow5mult+0x20>
 8008d9c:	4c25      	ldr	r4, [pc, #148]	; (8008e34 <__pow5mult+0xa8>)
 8008d9e:	3a01      	subs	r2, #1
 8008da0:	2300      	movs	r3, #0
 8008da2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008da6:	f7ff fe55 	bl	8008a54 <__multadd>
 8008daa:	4607      	mov	r7, r0
 8008dac:	10ad      	asrs	r5, r5, #2
 8008dae:	d03d      	beq.n	8008e2c <__pow5mult+0xa0>
 8008db0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008db2:	b97c      	cbnz	r4, 8008dd4 <__pow5mult+0x48>
 8008db4:	2010      	movs	r0, #16
 8008db6:	f7ff fdc3 	bl	8008940 <malloc>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	6270      	str	r0, [r6, #36]	; 0x24
 8008dbe:	b928      	cbnz	r0, 8008dcc <__pow5mult+0x40>
 8008dc0:	4b1d      	ldr	r3, [pc, #116]	; (8008e38 <__pow5mult+0xac>)
 8008dc2:	481e      	ldr	r0, [pc, #120]	; (8008e3c <__pow5mult+0xb0>)
 8008dc4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008dc8:	f000 fd1c 	bl	8009804 <__assert_func>
 8008dcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008dd0:	6004      	str	r4, [r0, #0]
 8008dd2:	60c4      	str	r4, [r0, #12]
 8008dd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008dd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ddc:	b94c      	cbnz	r4, 8008df2 <__pow5mult+0x66>
 8008dde:	f240 2171 	movw	r1, #625	; 0x271
 8008de2:	4630      	mov	r0, r6
 8008de4:	f7ff ff14 	bl	8008c10 <__i2b>
 8008de8:	2300      	movs	r3, #0
 8008dea:	f8c8 0008 	str.w	r0, [r8, #8]
 8008dee:	4604      	mov	r4, r0
 8008df0:	6003      	str	r3, [r0, #0]
 8008df2:	f04f 0900 	mov.w	r9, #0
 8008df6:	07eb      	lsls	r3, r5, #31
 8008df8:	d50a      	bpl.n	8008e10 <__pow5mult+0x84>
 8008dfa:	4639      	mov	r1, r7
 8008dfc:	4622      	mov	r2, r4
 8008dfe:	4630      	mov	r0, r6
 8008e00:	f7ff ff1c 	bl	8008c3c <__multiply>
 8008e04:	4639      	mov	r1, r7
 8008e06:	4680      	mov	r8, r0
 8008e08:	4630      	mov	r0, r6
 8008e0a:	f7ff fe01 	bl	8008a10 <_Bfree>
 8008e0e:	4647      	mov	r7, r8
 8008e10:	106d      	asrs	r5, r5, #1
 8008e12:	d00b      	beq.n	8008e2c <__pow5mult+0xa0>
 8008e14:	6820      	ldr	r0, [r4, #0]
 8008e16:	b938      	cbnz	r0, 8008e28 <__pow5mult+0x9c>
 8008e18:	4622      	mov	r2, r4
 8008e1a:	4621      	mov	r1, r4
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	f7ff ff0d 	bl	8008c3c <__multiply>
 8008e22:	6020      	str	r0, [r4, #0]
 8008e24:	f8c0 9000 	str.w	r9, [r0]
 8008e28:	4604      	mov	r4, r0
 8008e2a:	e7e4      	b.n	8008df6 <__pow5mult+0x6a>
 8008e2c:	4638      	mov	r0, r7
 8008e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e32:	bf00      	nop
 8008e34:	0800a860 	.word	0x0800a860
 8008e38:	0800a616 	.word	0x0800a616
 8008e3c:	0800a714 	.word	0x0800a714

08008e40 <__lshift>:
 8008e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e44:	460c      	mov	r4, r1
 8008e46:	6849      	ldr	r1, [r1, #4]
 8008e48:	6923      	ldr	r3, [r4, #16]
 8008e4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e4e:	68a3      	ldr	r3, [r4, #8]
 8008e50:	4607      	mov	r7, r0
 8008e52:	4691      	mov	r9, r2
 8008e54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e58:	f108 0601 	add.w	r6, r8, #1
 8008e5c:	42b3      	cmp	r3, r6
 8008e5e:	db0b      	blt.n	8008e78 <__lshift+0x38>
 8008e60:	4638      	mov	r0, r7
 8008e62:	f7ff fd95 	bl	8008990 <_Balloc>
 8008e66:	4605      	mov	r5, r0
 8008e68:	b948      	cbnz	r0, 8008e7e <__lshift+0x3e>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	4b2a      	ldr	r3, [pc, #168]	; (8008f18 <__lshift+0xd8>)
 8008e6e:	482b      	ldr	r0, [pc, #172]	; (8008f1c <__lshift+0xdc>)
 8008e70:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008e74:	f000 fcc6 	bl	8009804 <__assert_func>
 8008e78:	3101      	adds	r1, #1
 8008e7a:	005b      	lsls	r3, r3, #1
 8008e7c:	e7ee      	b.n	8008e5c <__lshift+0x1c>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	f100 0114 	add.w	r1, r0, #20
 8008e84:	f100 0210 	add.w	r2, r0, #16
 8008e88:	4618      	mov	r0, r3
 8008e8a:	4553      	cmp	r3, sl
 8008e8c:	db37      	blt.n	8008efe <__lshift+0xbe>
 8008e8e:	6920      	ldr	r0, [r4, #16]
 8008e90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e94:	f104 0314 	add.w	r3, r4, #20
 8008e98:	f019 091f 	ands.w	r9, r9, #31
 8008e9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ea0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008ea4:	d02f      	beq.n	8008f06 <__lshift+0xc6>
 8008ea6:	f1c9 0e20 	rsb	lr, r9, #32
 8008eaa:	468a      	mov	sl, r1
 8008eac:	f04f 0c00 	mov.w	ip, #0
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	fa02 f209 	lsl.w	r2, r2, r9
 8008eb6:	ea42 020c 	orr.w	r2, r2, ip
 8008eba:	f84a 2b04 	str.w	r2, [sl], #4
 8008ebe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ec2:	4298      	cmp	r0, r3
 8008ec4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008ec8:	d8f2      	bhi.n	8008eb0 <__lshift+0x70>
 8008eca:	1b03      	subs	r3, r0, r4
 8008ecc:	3b15      	subs	r3, #21
 8008ece:	f023 0303 	bic.w	r3, r3, #3
 8008ed2:	3304      	adds	r3, #4
 8008ed4:	f104 0215 	add.w	r2, r4, #21
 8008ed8:	4290      	cmp	r0, r2
 8008eda:	bf38      	it	cc
 8008edc:	2304      	movcc	r3, #4
 8008ede:	f841 c003 	str.w	ip, [r1, r3]
 8008ee2:	f1bc 0f00 	cmp.w	ip, #0
 8008ee6:	d001      	beq.n	8008eec <__lshift+0xac>
 8008ee8:	f108 0602 	add.w	r6, r8, #2
 8008eec:	3e01      	subs	r6, #1
 8008eee:	4638      	mov	r0, r7
 8008ef0:	612e      	str	r6, [r5, #16]
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	f7ff fd8c 	bl	8008a10 <_Bfree>
 8008ef8:	4628      	mov	r0, r5
 8008efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008efe:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f02:	3301      	adds	r3, #1
 8008f04:	e7c1      	b.n	8008e8a <__lshift+0x4a>
 8008f06:	3904      	subs	r1, #4
 8008f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f10:	4298      	cmp	r0, r3
 8008f12:	d8f9      	bhi.n	8008f08 <__lshift+0xc8>
 8008f14:	e7ea      	b.n	8008eec <__lshift+0xac>
 8008f16:	bf00      	nop
 8008f18:	0800a688 	.word	0x0800a688
 8008f1c:	0800a714 	.word	0x0800a714

08008f20 <__mcmp>:
 8008f20:	690a      	ldr	r2, [r1, #16]
 8008f22:	4603      	mov	r3, r0
 8008f24:	6900      	ldr	r0, [r0, #16]
 8008f26:	1a80      	subs	r0, r0, r2
 8008f28:	b530      	push	{r4, r5, lr}
 8008f2a:	d10d      	bne.n	8008f48 <__mcmp+0x28>
 8008f2c:	3314      	adds	r3, #20
 8008f2e:	3114      	adds	r1, #20
 8008f30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008f34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008f38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008f3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008f40:	4295      	cmp	r5, r2
 8008f42:	d002      	beq.n	8008f4a <__mcmp+0x2a>
 8008f44:	d304      	bcc.n	8008f50 <__mcmp+0x30>
 8008f46:	2001      	movs	r0, #1
 8008f48:	bd30      	pop	{r4, r5, pc}
 8008f4a:	42a3      	cmp	r3, r4
 8008f4c:	d3f4      	bcc.n	8008f38 <__mcmp+0x18>
 8008f4e:	e7fb      	b.n	8008f48 <__mcmp+0x28>
 8008f50:	f04f 30ff 	mov.w	r0, #4294967295
 8008f54:	e7f8      	b.n	8008f48 <__mcmp+0x28>
	...

08008f58 <__mdiff>:
 8008f58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f5c:	460d      	mov	r5, r1
 8008f5e:	4607      	mov	r7, r0
 8008f60:	4611      	mov	r1, r2
 8008f62:	4628      	mov	r0, r5
 8008f64:	4614      	mov	r4, r2
 8008f66:	f7ff ffdb 	bl	8008f20 <__mcmp>
 8008f6a:	1e06      	subs	r6, r0, #0
 8008f6c:	d111      	bne.n	8008f92 <__mdiff+0x3a>
 8008f6e:	4631      	mov	r1, r6
 8008f70:	4638      	mov	r0, r7
 8008f72:	f7ff fd0d 	bl	8008990 <_Balloc>
 8008f76:	4602      	mov	r2, r0
 8008f78:	b928      	cbnz	r0, 8008f86 <__mdiff+0x2e>
 8008f7a:	4b39      	ldr	r3, [pc, #228]	; (8009060 <__mdiff+0x108>)
 8008f7c:	f240 2132 	movw	r1, #562	; 0x232
 8008f80:	4838      	ldr	r0, [pc, #224]	; (8009064 <__mdiff+0x10c>)
 8008f82:	f000 fc3f 	bl	8009804 <__assert_func>
 8008f86:	2301      	movs	r3, #1
 8008f88:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008f8c:	4610      	mov	r0, r2
 8008f8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f92:	bfa4      	itt	ge
 8008f94:	4623      	movge	r3, r4
 8008f96:	462c      	movge	r4, r5
 8008f98:	4638      	mov	r0, r7
 8008f9a:	6861      	ldr	r1, [r4, #4]
 8008f9c:	bfa6      	itte	ge
 8008f9e:	461d      	movge	r5, r3
 8008fa0:	2600      	movge	r6, #0
 8008fa2:	2601      	movlt	r6, #1
 8008fa4:	f7ff fcf4 	bl	8008990 <_Balloc>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	b918      	cbnz	r0, 8008fb4 <__mdiff+0x5c>
 8008fac:	4b2c      	ldr	r3, [pc, #176]	; (8009060 <__mdiff+0x108>)
 8008fae:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008fb2:	e7e5      	b.n	8008f80 <__mdiff+0x28>
 8008fb4:	6927      	ldr	r7, [r4, #16]
 8008fb6:	60c6      	str	r6, [r0, #12]
 8008fb8:	692e      	ldr	r6, [r5, #16]
 8008fba:	f104 0014 	add.w	r0, r4, #20
 8008fbe:	f105 0914 	add.w	r9, r5, #20
 8008fc2:	f102 0e14 	add.w	lr, r2, #20
 8008fc6:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8008fca:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008fce:	3410      	adds	r4, #16
 8008fd0:	46f2      	mov	sl, lr
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008fd8:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008fdc:	fa1f f883 	uxth.w	r8, r3
 8008fe0:	fa11 f18b 	uxtah	r1, r1, fp
 8008fe4:	0c1b      	lsrs	r3, r3, #16
 8008fe6:	eba1 0808 	sub.w	r8, r1, r8
 8008fea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008fee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008ff2:	fa1f f888 	uxth.w	r8, r8
 8008ff6:	1419      	asrs	r1, r3, #16
 8008ff8:	454e      	cmp	r6, r9
 8008ffa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ffe:	f84a 3b04 	str.w	r3, [sl], #4
 8009002:	d8e7      	bhi.n	8008fd4 <__mdiff+0x7c>
 8009004:	1b73      	subs	r3, r6, r5
 8009006:	3b15      	subs	r3, #21
 8009008:	f023 0303 	bic.w	r3, r3, #3
 800900c:	3304      	adds	r3, #4
 800900e:	3515      	adds	r5, #21
 8009010:	42ae      	cmp	r6, r5
 8009012:	bf38      	it	cc
 8009014:	2304      	movcc	r3, #4
 8009016:	4418      	add	r0, r3
 8009018:	4473      	add	r3, lr
 800901a:	469e      	mov	lr, r3
 800901c:	4606      	mov	r6, r0
 800901e:	4566      	cmp	r6, ip
 8009020:	d30e      	bcc.n	8009040 <__mdiff+0xe8>
 8009022:	f10c 0103 	add.w	r1, ip, #3
 8009026:	1a09      	subs	r1, r1, r0
 8009028:	f021 0103 	bic.w	r1, r1, #3
 800902c:	3803      	subs	r0, #3
 800902e:	4584      	cmp	ip, r0
 8009030:	bf38      	it	cc
 8009032:	2100      	movcc	r1, #0
 8009034:	4419      	add	r1, r3
 8009036:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800903a:	b17b      	cbz	r3, 800905c <__mdiff+0x104>
 800903c:	6117      	str	r7, [r2, #16]
 800903e:	e7a5      	b.n	8008f8c <__mdiff+0x34>
 8009040:	f856 8b04 	ldr.w	r8, [r6], #4
 8009044:	fa11 f488 	uxtah	r4, r1, r8
 8009048:	1425      	asrs	r5, r4, #16
 800904a:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800904e:	b2a4      	uxth	r4, r4
 8009050:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8009054:	f84e 4b04 	str.w	r4, [lr], #4
 8009058:	1429      	asrs	r1, r5, #16
 800905a:	e7e0      	b.n	800901e <__mdiff+0xc6>
 800905c:	3f01      	subs	r7, #1
 800905e:	e7ea      	b.n	8009036 <__mdiff+0xde>
 8009060:	0800a688 	.word	0x0800a688
 8009064:	0800a714 	.word	0x0800a714

08009068 <__ulp>:
 8009068:	4b11      	ldr	r3, [pc, #68]	; (80090b0 <__ulp+0x48>)
 800906a:	400b      	ands	r3, r1
 800906c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009070:	2b00      	cmp	r3, #0
 8009072:	dd02      	ble.n	800907a <__ulp+0x12>
 8009074:	2000      	movs	r0, #0
 8009076:	4619      	mov	r1, r3
 8009078:	4770      	bx	lr
 800907a:	425b      	negs	r3, r3
 800907c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009080:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009084:	f04f 0000 	mov.w	r0, #0
 8009088:	f04f 0100 	mov.w	r1, #0
 800908c:	da04      	bge.n	8009098 <__ulp+0x30>
 800908e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009092:	fa43 f102 	asr.w	r1, r3, r2
 8009096:	4770      	bx	lr
 8009098:	f1a2 0314 	sub.w	r3, r2, #20
 800909c:	2b1e      	cmp	r3, #30
 800909e:	bfda      	itte	le
 80090a0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80090a4:	fa22 f303 	lsrle.w	r3, r2, r3
 80090a8:	2301      	movgt	r3, #1
 80090aa:	4618      	mov	r0, r3
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	7ff00000 	.word	0x7ff00000

080090b4 <__b2d>:
 80090b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090b8:	6907      	ldr	r7, [r0, #16]
 80090ba:	f100 0914 	add.w	r9, r0, #20
 80090be:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80090c2:	f1a7 0804 	sub.w	r8, r7, #4
 80090c6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80090ca:	4630      	mov	r0, r6
 80090cc:	f7ff fd52 	bl	8008b74 <__hi0bits>
 80090d0:	f1c0 0320 	rsb	r3, r0, #32
 80090d4:	280a      	cmp	r0, #10
 80090d6:	600b      	str	r3, [r1, #0]
 80090d8:	491f      	ldr	r1, [pc, #124]	; (8009158 <__b2d+0xa4>)
 80090da:	dc17      	bgt.n	800910c <__b2d+0x58>
 80090dc:	f1c0 0c0b 	rsb	ip, r0, #11
 80090e0:	45c1      	cmp	r9, r8
 80090e2:	fa26 f30c 	lsr.w	r3, r6, ip
 80090e6:	bf38      	it	cc
 80090e8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80090ec:	ea43 0501 	orr.w	r5, r3, r1
 80090f0:	bf28      	it	cs
 80090f2:	2200      	movcs	r2, #0
 80090f4:	f100 0315 	add.w	r3, r0, #21
 80090f8:	fa06 f303 	lsl.w	r3, r6, r3
 80090fc:	fa22 f20c 	lsr.w	r2, r2, ip
 8009100:	ea43 0402 	orr.w	r4, r3, r2
 8009104:	4620      	mov	r0, r4
 8009106:	4629      	mov	r1, r5
 8009108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800910c:	45c1      	cmp	r9, r8
 800910e:	bf3a      	itte	cc
 8009110:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009114:	f1a7 0808 	subcc.w	r8, r7, #8
 8009118:	2200      	movcs	r2, #0
 800911a:	f1b0 030b 	subs.w	r3, r0, #11
 800911e:	d016      	beq.n	800914e <__b2d+0x9a>
 8009120:	f1c3 0720 	rsb	r7, r3, #32
 8009124:	fa22 f107 	lsr.w	r1, r2, r7
 8009128:	45c8      	cmp	r8, r9
 800912a:	fa06 f603 	lsl.w	r6, r6, r3
 800912e:	ea46 0601 	orr.w	r6, r6, r1
 8009132:	bf8c      	ite	hi
 8009134:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009138:	2100      	movls	r1, #0
 800913a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800913e:	fa02 f003 	lsl.w	r0, r2, r3
 8009142:	40f9      	lsrs	r1, r7
 8009144:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009148:	ea40 0401 	orr.w	r4, r0, r1
 800914c:	e7da      	b.n	8009104 <__b2d+0x50>
 800914e:	ea46 0501 	orr.w	r5, r6, r1
 8009152:	4614      	mov	r4, r2
 8009154:	e7d6      	b.n	8009104 <__b2d+0x50>
 8009156:	bf00      	nop
 8009158:	3ff00000 	.word	0x3ff00000

0800915c <__d2b>:
 800915c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009160:	2101      	movs	r1, #1
 8009162:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009166:	4690      	mov	r8, r2
 8009168:	461d      	mov	r5, r3
 800916a:	f7ff fc11 	bl	8008990 <_Balloc>
 800916e:	4604      	mov	r4, r0
 8009170:	b930      	cbnz	r0, 8009180 <__d2b+0x24>
 8009172:	4602      	mov	r2, r0
 8009174:	4b25      	ldr	r3, [pc, #148]	; (800920c <__d2b+0xb0>)
 8009176:	4826      	ldr	r0, [pc, #152]	; (8009210 <__d2b+0xb4>)
 8009178:	f240 310a 	movw	r1, #778	; 0x30a
 800917c:	f000 fb42 	bl	8009804 <__assert_func>
 8009180:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009184:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009188:	bb2d      	cbnz	r5, 80091d6 <__d2b+0x7a>
 800918a:	9301      	str	r3, [sp, #4]
 800918c:	f1b8 0300 	subs.w	r3, r8, #0
 8009190:	d026      	beq.n	80091e0 <__d2b+0x84>
 8009192:	4668      	mov	r0, sp
 8009194:	9300      	str	r3, [sp, #0]
 8009196:	f7ff fd0d 	bl	8008bb4 <__lo0bits>
 800919a:	9900      	ldr	r1, [sp, #0]
 800919c:	b1f0      	cbz	r0, 80091dc <__d2b+0x80>
 800919e:	9a01      	ldr	r2, [sp, #4]
 80091a0:	f1c0 0320 	rsb	r3, r0, #32
 80091a4:	fa02 f303 	lsl.w	r3, r2, r3
 80091a8:	430b      	orrs	r3, r1
 80091aa:	40c2      	lsrs	r2, r0
 80091ac:	6163      	str	r3, [r4, #20]
 80091ae:	9201      	str	r2, [sp, #4]
 80091b0:	9b01      	ldr	r3, [sp, #4]
 80091b2:	61a3      	str	r3, [r4, #24]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	bf14      	ite	ne
 80091b8:	2102      	movne	r1, #2
 80091ba:	2101      	moveq	r1, #1
 80091bc:	6121      	str	r1, [r4, #16]
 80091be:	b1c5      	cbz	r5, 80091f2 <__d2b+0x96>
 80091c0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80091c4:	4405      	add	r5, r0
 80091c6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80091ca:	603d      	str	r5, [r7, #0]
 80091cc:	6030      	str	r0, [r6, #0]
 80091ce:	4620      	mov	r0, r4
 80091d0:	b002      	add	sp, #8
 80091d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091da:	e7d6      	b.n	800918a <__d2b+0x2e>
 80091dc:	6161      	str	r1, [r4, #20]
 80091de:	e7e7      	b.n	80091b0 <__d2b+0x54>
 80091e0:	a801      	add	r0, sp, #4
 80091e2:	f7ff fce7 	bl	8008bb4 <__lo0bits>
 80091e6:	9b01      	ldr	r3, [sp, #4]
 80091e8:	6163      	str	r3, [r4, #20]
 80091ea:	2101      	movs	r1, #1
 80091ec:	6121      	str	r1, [r4, #16]
 80091ee:	3020      	adds	r0, #32
 80091f0:	e7e5      	b.n	80091be <__d2b+0x62>
 80091f2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80091f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80091fa:	6038      	str	r0, [r7, #0]
 80091fc:	6918      	ldr	r0, [r3, #16]
 80091fe:	f7ff fcb9 	bl	8008b74 <__hi0bits>
 8009202:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009206:	6031      	str	r1, [r6, #0]
 8009208:	e7e1      	b.n	80091ce <__d2b+0x72>
 800920a:	bf00      	nop
 800920c:	0800a688 	.word	0x0800a688
 8009210:	0800a714 	.word	0x0800a714

08009214 <__ratio>:
 8009214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009218:	4688      	mov	r8, r1
 800921a:	4669      	mov	r1, sp
 800921c:	4681      	mov	r9, r0
 800921e:	f7ff ff49 	bl	80090b4 <__b2d>
 8009222:	460f      	mov	r7, r1
 8009224:	4604      	mov	r4, r0
 8009226:	460d      	mov	r5, r1
 8009228:	4640      	mov	r0, r8
 800922a:	a901      	add	r1, sp, #4
 800922c:	f7ff ff42 	bl	80090b4 <__b2d>
 8009230:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009234:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009238:	eba3 0c02 	sub.w	ip, r3, r2
 800923c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009240:	1a9b      	subs	r3, r3, r2
 8009242:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009246:	2b00      	cmp	r3, #0
 8009248:	bfd5      	itete	le
 800924a:	460a      	movle	r2, r1
 800924c:	462a      	movgt	r2, r5
 800924e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009252:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009256:	468b      	mov	fp, r1
 8009258:	bfd8      	it	le
 800925a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800925e:	465b      	mov	r3, fp
 8009260:	4602      	mov	r2, r0
 8009262:	4639      	mov	r1, r7
 8009264:	4620      	mov	r0, r4
 8009266:	f7f7 fac9 	bl	80007fc <__aeabi_ddiv>
 800926a:	b003      	add	sp, #12
 800926c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009270 <__copybits>:
 8009270:	3901      	subs	r1, #1
 8009272:	b570      	push	{r4, r5, r6, lr}
 8009274:	1149      	asrs	r1, r1, #5
 8009276:	6914      	ldr	r4, [r2, #16]
 8009278:	3101      	adds	r1, #1
 800927a:	f102 0314 	add.w	r3, r2, #20
 800927e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009282:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009286:	1f05      	subs	r5, r0, #4
 8009288:	42a3      	cmp	r3, r4
 800928a:	d30c      	bcc.n	80092a6 <__copybits+0x36>
 800928c:	1aa3      	subs	r3, r4, r2
 800928e:	3b11      	subs	r3, #17
 8009290:	f023 0303 	bic.w	r3, r3, #3
 8009294:	3211      	adds	r2, #17
 8009296:	42a2      	cmp	r2, r4
 8009298:	bf88      	it	hi
 800929a:	2300      	movhi	r3, #0
 800929c:	4418      	add	r0, r3
 800929e:	2300      	movs	r3, #0
 80092a0:	4288      	cmp	r0, r1
 80092a2:	d305      	bcc.n	80092b0 <__copybits+0x40>
 80092a4:	bd70      	pop	{r4, r5, r6, pc}
 80092a6:	f853 6b04 	ldr.w	r6, [r3], #4
 80092aa:	f845 6f04 	str.w	r6, [r5, #4]!
 80092ae:	e7eb      	b.n	8009288 <__copybits+0x18>
 80092b0:	f840 3b04 	str.w	r3, [r0], #4
 80092b4:	e7f4      	b.n	80092a0 <__copybits+0x30>

080092b6 <__any_on>:
 80092b6:	f100 0214 	add.w	r2, r0, #20
 80092ba:	6900      	ldr	r0, [r0, #16]
 80092bc:	114b      	asrs	r3, r1, #5
 80092be:	4298      	cmp	r0, r3
 80092c0:	b510      	push	{r4, lr}
 80092c2:	db11      	blt.n	80092e8 <__any_on+0x32>
 80092c4:	dd0a      	ble.n	80092dc <__any_on+0x26>
 80092c6:	f011 011f 	ands.w	r1, r1, #31
 80092ca:	d007      	beq.n	80092dc <__any_on+0x26>
 80092cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80092d0:	fa24 f001 	lsr.w	r0, r4, r1
 80092d4:	fa00 f101 	lsl.w	r1, r0, r1
 80092d8:	428c      	cmp	r4, r1
 80092da:	d10b      	bne.n	80092f4 <__any_on+0x3e>
 80092dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d803      	bhi.n	80092ec <__any_on+0x36>
 80092e4:	2000      	movs	r0, #0
 80092e6:	bd10      	pop	{r4, pc}
 80092e8:	4603      	mov	r3, r0
 80092ea:	e7f7      	b.n	80092dc <__any_on+0x26>
 80092ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80092f0:	2900      	cmp	r1, #0
 80092f2:	d0f5      	beq.n	80092e0 <__any_on+0x2a>
 80092f4:	2001      	movs	r0, #1
 80092f6:	e7f6      	b.n	80092e6 <__any_on+0x30>

080092f8 <_calloc_r>:
 80092f8:	b570      	push	{r4, r5, r6, lr}
 80092fa:	fba1 5402 	umull	r5, r4, r1, r2
 80092fe:	b934      	cbnz	r4, 800930e <_calloc_r+0x16>
 8009300:	4629      	mov	r1, r5
 8009302:	f000 f877 	bl	80093f4 <_malloc_r>
 8009306:	4606      	mov	r6, r0
 8009308:	b928      	cbnz	r0, 8009316 <_calloc_r+0x1e>
 800930a:	4630      	mov	r0, r6
 800930c:	bd70      	pop	{r4, r5, r6, pc}
 800930e:	220c      	movs	r2, #12
 8009310:	6002      	str	r2, [r0, #0]
 8009312:	2600      	movs	r6, #0
 8009314:	e7f9      	b.n	800930a <_calloc_r+0x12>
 8009316:	462a      	mov	r2, r5
 8009318:	4621      	mov	r1, r4
 800931a:	f7fc fc0f 	bl	8005b3c <memset>
 800931e:	e7f4      	b.n	800930a <_calloc_r+0x12>

08009320 <_free_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	4605      	mov	r5, r0
 8009324:	2900      	cmp	r1, #0
 8009326:	d041      	beq.n	80093ac <_free_r+0x8c>
 8009328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800932c:	1f0c      	subs	r4, r1, #4
 800932e:	2b00      	cmp	r3, #0
 8009330:	bfb8      	it	lt
 8009332:	18e4      	addlt	r4, r4, r3
 8009334:	f000 fab0 	bl	8009898 <__malloc_lock>
 8009338:	4a1d      	ldr	r2, [pc, #116]	; (80093b0 <_free_r+0x90>)
 800933a:	6813      	ldr	r3, [r2, #0]
 800933c:	b933      	cbnz	r3, 800934c <_free_r+0x2c>
 800933e:	6063      	str	r3, [r4, #4]
 8009340:	6014      	str	r4, [r2, #0]
 8009342:	4628      	mov	r0, r5
 8009344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009348:	f000 baac 	b.w	80098a4 <__malloc_unlock>
 800934c:	42a3      	cmp	r3, r4
 800934e:	d908      	bls.n	8009362 <_free_r+0x42>
 8009350:	6820      	ldr	r0, [r4, #0]
 8009352:	1821      	adds	r1, r4, r0
 8009354:	428b      	cmp	r3, r1
 8009356:	bf01      	itttt	eq
 8009358:	6819      	ldreq	r1, [r3, #0]
 800935a:	685b      	ldreq	r3, [r3, #4]
 800935c:	1809      	addeq	r1, r1, r0
 800935e:	6021      	streq	r1, [r4, #0]
 8009360:	e7ed      	b.n	800933e <_free_r+0x1e>
 8009362:	461a      	mov	r2, r3
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	b10b      	cbz	r3, 800936c <_free_r+0x4c>
 8009368:	42a3      	cmp	r3, r4
 800936a:	d9fa      	bls.n	8009362 <_free_r+0x42>
 800936c:	6811      	ldr	r1, [r2, #0]
 800936e:	1850      	adds	r0, r2, r1
 8009370:	42a0      	cmp	r0, r4
 8009372:	d10b      	bne.n	800938c <_free_r+0x6c>
 8009374:	6820      	ldr	r0, [r4, #0]
 8009376:	4401      	add	r1, r0
 8009378:	1850      	adds	r0, r2, r1
 800937a:	4283      	cmp	r3, r0
 800937c:	6011      	str	r1, [r2, #0]
 800937e:	d1e0      	bne.n	8009342 <_free_r+0x22>
 8009380:	6818      	ldr	r0, [r3, #0]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	6053      	str	r3, [r2, #4]
 8009386:	4401      	add	r1, r0
 8009388:	6011      	str	r1, [r2, #0]
 800938a:	e7da      	b.n	8009342 <_free_r+0x22>
 800938c:	d902      	bls.n	8009394 <_free_r+0x74>
 800938e:	230c      	movs	r3, #12
 8009390:	602b      	str	r3, [r5, #0]
 8009392:	e7d6      	b.n	8009342 <_free_r+0x22>
 8009394:	6820      	ldr	r0, [r4, #0]
 8009396:	1821      	adds	r1, r4, r0
 8009398:	428b      	cmp	r3, r1
 800939a:	bf04      	itt	eq
 800939c:	6819      	ldreq	r1, [r3, #0]
 800939e:	685b      	ldreq	r3, [r3, #4]
 80093a0:	6063      	str	r3, [r4, #4]
 80093a2:	bf04      	itt	eq
 80093a4:	1809      	addeq	r1, r1, r0
 80093a6:	6021      	streq	r1, [r4, #0]
 80093a8:	6054      	str	r4, [r2, #4]
 80093aa:	e7ca      	b.n	8009342 <_free_r+0x22>
 80093ac:	bd38      	pop	{r3, r4, r5, pc}
 80093ae:	bf00      	nop
 80093b0:	20000448 	.word	0x20000448

080093b4 <sbrk_aligned>:
 80093b4:	b570      	push	{r4, r5, r6, lr}
 80093b6:	4e0e      	ldr	r6, [pc, #56]	; (80093f0 <sbrk_aligned+0x3c>)
 80093b8:	460c      	mov	r4, r1
 80093ba:	6831      	ldr	r1, [r6, #0]
 80093bc:	4605      	mov	r5, r0
 80093be:	b911      	cbnz	r1, 80093c6 <sbrk_aligned+0x12>
 80093c0:	f000 f9ee 	bl	80097a0 <_sbrk_r>
 80093c4:	6030      	str	r0, [r6, #0]
 80093c6:	4621      	mov	r1, r4
 80093c8:	4628      	mov	r0, r5
 80093ca:	f000 f9e9 	bl	80097a0 <_sbrk_r>
 80093ce:	1c43      	adds	r3, r0, #1
 80093d0:	d00a      	beq.n	80093e8 <sbrk_aligned+0x34>
 80093d2:	1cc4      	adds	r4, r0, #3
 80093d4:	f024 0403 	bic.w	r4, r4, #3
 80093d8:	42a0      	cmp	r0, r4
 80093da:	d007      	beq.n	80093ec <sbrk_aligned+0x38>
 80093dc:	1a21      	subs	r1, r4, r0
 80093de:	4628      	mov	r0, r5
 80093e0:	f000 f9de 	bl	80097a0 <_sbrk_r>
 80093e4:	3001      	adds	r0, #1
 80093e6:	d101      	bne.n	80093ec <sbrk_aligned+0x38>
 80093e8:	f04f 34ff 	mov.w	r4, #4294967295
 80093ec:	4620      	mov	r0, r4
 80093ee:	bd70      	pop	{r4, r5, r6, pc}
 80093f0:	2000044c 	.word	0x2000044c

080093f4 <_malloc_r>:
 80093f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093f8:	1ccd      	adds	r5, r1, #3
 80093fa:	f025 0503 	bic.w	r5, r5, #3
 80093fe:	3508      	adds	r5, #8
 8009400:	2d0c      	cmp	r5, #12
 8009402:	bf38      	it	cc
 8009404:	250c      	movcc	r5, #12
 8009406:	2d00      	cmp	r5, #0
 8009408:	4607      	mov	r7, r0
 800940a:	db01      	blt.n	8009410 <_malloc_r+0x1c>
 800940c:	42a9      	cmp	r1, r5
 800940e:	d905      	bls.n	800941c <_malloc_r+0x28>
 8009410:	230c      	movs	r3, #12
 8009412:	603b      	str	r3, [r7, #0]
 8009414:	2600      	movs	r6, #0
 8009416:	4630      	mov	r0, r6
 8009418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800941c:	4e2e      	ldr	r6, [pc, #184]	; (80094d8 <_malloc_r+0xe4>)
 800941e:	f000 fa3b 	bl	8009898 <__malloc_lock>
 8009422:	6833      	ldr	r3, [r6, #0]
 8009424:	461c      	mov	r4, r3
 8009426:	bb34      	cbnz	r4, 8009476 <_malloc_r+0x82>
 8009428:	4629      	mov	r1, r5
 800942a:	4638      	mov	r0, r7
 800942c:	f7ff ffc2 	bl	80093b4 <sbrk_aligned>
 8009430:	1c43      	adds	r3, r0, #1
 8009432:	4604      	mov	r4, r0
 8009434:	d14d      	bne.n	80094d2 <_malloc_r+0xde>
 8009436:	6834      	ldr	r4, [r6, #0]
 8009438:	4626      	mov	r6, r4
 800943a:	2e00      	cmp	r6, #0
 800943c:	d140      	bne.n	80094c0 <_malloc_r+0xcc>
 800943e:	6823      	ldr	r3, [r4, #0]
 8009440:	4631      	mov	r1, r6
 8009442:	4638      	mov	r0, r7
 8009444:	eb04 0803 	add.w	r8, r4, r3
 8009448:	f000 f9aa 	bl	80097a0 <_sbrk_r>
 800944c:	4580      	cmp	r8, r0
 800944e:	d13a      	bne.n	80094c6 <_malloc_r+0xd2>
 8009450:	6821      	ldr	r1, [r4, #0]
 8009452:	3503      	adds	r5, #3
 8009454:	1a6d      	subs	r5, r5, r1
 8009456:	f025 0503 	bic.w	r5, r5, #3
 800945a:	3508      	adds	r5, #8
 800945c:	2d0c      	cmp	r5, #12
 800945e:	bf38      	it	cc
 8009460:	250c      	movcc	r5, #12
 8009462:	4629      	mov	r1, r5
 8009464:	4638      	mov	r0, r7
 8009466:	f7ff ffa5 	bl	80093b4 <sbrk_aligned>
 800946a:	3001      	adds	r0, #1
 800946c:	d02b      	beq.n	80094c6 <_malloc_r+0xd2>
 800946e:	6823      	ldr	r3, [r4, #0]
 8009470:	442b      	add	r3, r5
 8009472:	6023      	str	r3, [r4, #0]
 8009474:	e00e      	b.n	8009494 <_malloc_r+0xa0>
 8009476:	6822      	ldr	r2, [r4, #0]
 8009478:	1b52      	subs	r2, r2, r5
 800947a:	d41e      	bmi.n	80094ba <_malloc_r+0xc6>
 800947c:	2a0b      	cmp	r2, #11
 800947e:	d916      	bls.n	80094ae <_malloc_r+0xba>
 8009480:	1961      	adds	r1, r4, r5
 8009482:	42a3      	cmp	r3, r4
 8009484:	6025      	str	r5, [r4, #0]
 8009486:	bf18      	it	ne
 8009488:	6059      	strne	r1, [r3, #4]
 800948a:	6863      	ldr	r3, [r4, #4]
 800948c:	bf08      	it	eq
 800948e:	6031      	streq	r1, [r6, #0]
 8009490:	5162      	str	r2, [r4, r5]
 8009492:	604b      	str	r3, [r1, #4]
 8009494:	4638      	mov	r0, r7
 8009496:	f104 060b 	add.w	r6, r4, #11
 800949a:	f000 fa03 	bl	80098a4 <__malloc_unlock>
 800949e:	f026 0607 	bic.w	r6, r6, #7
 80094a2:	1d23      	adds	r3, r4, #4
 80094a4:	1af2      	subs	r2, r6, r3
 80094a6:	d0b6      	beq.n	8009416 <_malloc_r+0x22>
 80094a8:	1b9b      	subs	r3, r3, r6
 80094aa:	50a3      	str	r3, [r4, r2]
 80094ac:	e7b3      	b.n	8009416 <_malloc_r+0x22>
 80094ae:	6862      	ldr	r2, [r4, #4]
 80094b0:	42a3      	cmp	r3, r4
 80094b2:	bf0c      	ite	eq
 80094b4:	6032      	streq	r2, [r6, #0]
 80094b6:	605a      	strne	r2, [r3, #4]
 80094b8:	e7ec      	b.n	8009494 <_malloc_r+0xa0>
 80094ba:	4623      	mov	r3, r4
 80094bc:	6864      	ldr	r4, [r4, #4]
 80094be:	e7b2      	b.n	8009426 <_malloc_r+0x32>
 80094c0:	4634      	mov	r4, r6
 80094c2:	6876      	ldr	r6, [r6, #4]
 80094c4:	e7b9      	b.n	800943a <_malloc_r+0x46>
 80094c6:	230c      	movs	r3, #12
 80094c8:	603b      	str	r3, [r7, #0]
 80094ca:	4638      	mov	r0, r7
 80094cc:	f000 f9ea 	bl	80098a4 <__malloc_unlock>
 80094d0:	e7a1      	b.n	8009416 <_malloc_r+0x22>
 80094d2:	6025      	str	r5, [r4, #0]
 80094d4:	e7de      	b.n	8009494 <_malloc_r+0xa0>
 80094d6:	bf00      	nop
 80094d8:	20000448 	.word	0x20000448

080094dc <__ssputs_r>:
 80094dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094e0:	688e      	ldr	r6, [r1, #8]
 80094e2:	429e      	cmp	r6, r3
 80094e4:	4682      	mov	sl, r0
 80094e6:	460c      	mov	r4, r1
 80094e8:	4690      	mov	r8, r2
 80094ea:	461f      	mov	r7, r3
 80094ec:	d838      	bhi.n	8009560 <__ssputs_r+0x84>
 80094ee:	898a      	ldrh	r2, [r1, #12]
 80094f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094f4:	d032      	beq.n	800955c <__ssputs_r+0x80>
 80094f6:	6825      	ldr	r5, [r4, #0]
 80094f8:	6909      	ldr	r1, [r1, #16]
 80094fa:	eba5 0901 	sub.w	r9, r5, r1
 80094fe:	6965      	ldr	r5, [r4, #20]
 8009500:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009504:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009508:	3301      	adds	r3, #1
 800950a:	444b      	add	r3, r9
 800950c:	106d      	asrs	r5, r5, #1
 800950e:	429d      	cmp	r5, r3
 8009510:	bf38      	it	cc
 8009512:	461d      	movcc	r5, r3
 8009514:	0553      	lsls	r3, r2, #21
 8009516:	d531      	bpl.n	800957c <__ssputs_r+0xa0>
 8009518:	4629      	mov	r1, r5
 800951a:	f7ff ff6b 	bl	80093f4 <_malloc_r>
 800951e:	4606      	mov	r6, r0
 8009520:	b950      	cbnz	r0, 8009538 <__ssputs_r+0x5c>
 8009522:	230c      	movs	r3, #12
 8009524:	f8ca 3000 	str.w	r3, [sl]
 8009528:	89a3      	ldrh	r3, [r4, #12]
 800952a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800952e:	81a3      	strh	r3, [r4, #12]
 8009530:	f04f 30ff 	mov.w	r0, #4294967295
 8009534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009538:	6921      	ldr	r1, [r4, #16]
 800953a:	464a      	mov	r2, r9
 800953c:	f7ff fa1a 	bl	8008974 <memcpy>
 8009540:	89a3      	ldrh	r3, [r4, #12]
 8009542:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800954a:	81a3      	strh	r3, [r4, #12]
 800954c:	6126      	str	r6, [r4, #16]
 800954e:	6165      	str	r5, [r4, #20]
 8009550:	444e      	add	r6, r9
 8009552:	eba5 0509 	sub.w	r5, r5, r9
 8009556:	6026      	str	r6, [r4, #0]
 8009558:	60a5      	str	r5, [r4, #8]
 800955a:	463e      	mov	r6, r7
 800955c:	42be      	cmp	r6, r7
 800955e:	d900      	bls.n	8009562 <__ssputs_r+0x86>
 8009560:	463e      	mov	r6, r7
 8009562:	6820      	ldr	r0, [r4, #0]
 8009564:	4632      	mov	r2, r6
 8009566:	4641      	mov	r1, r8
 8009568:	f000 f97c 	bl	8009864 <memmove>
 800956c:	68a3      	ldr	r3, [r4, #8]
 800956e:	1b9b      	subs	r3, r3, r6
 8009570:	60a3      	str	r3, [r4, #8]
 8009572:	6823      	ldr	r3, [r4, #0]
 8009574:	4433      	add	r3, r6
 8009576:	6023      	str	r3, [r4, #0]
 8009578:	2000      	movs	r0, #0
 800957a:	e7db      	b.n	8009534 <__ssputs_r+0x58>
 800957c:	462a      	mov	r2, r5
 800957e:	f000 f997 	bl	80098b0 <_realloc_r>
 8009582:	4606      	mov	r6, r0
 8009584:	2800      	cmp	r0, #0
 8009586:	d1e1      	bne.n	800954c <__ssputs_r+0x70>
 8009588:	6921      	ldr	r1, [r4, #16]
 800958a:	4650      	mov	r0, sl
 800958c:	f7ff fec8 	bl	8009320 <_free_r>
 8009590:	e7c7      	b.n	8009522 <__ssputs_r+0x46>
	...

08009594 <_svfiprintf_r>:
 8009594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009598:	4698      	mov	r8, r3
 800959a:	898b      	ldrh	r3, [r1, #12]
 800959c:	061b      	lsls	r3, r3, #24
 800959e:	b09d      	sub	sp, #116	; 0x74
 80095a0:	4607      	mov	r7, r0
 80095a2:	460d      	mov	r5, r1
 80095a4:	4614      	mov	r4, r2
 80095a6:	d50e      	bpl.n	80095c6 <_svfiprintf_r+0x32>
 80095a8:	690b      	ldr	r3, [r1, #16]
 80095aa:	b963      	cbnz	r3, 80095c6 <_svfiprintf_r+0x32>
 80095ac:	2140      	movs	r1, #64	; 0x40
 80095ae:	f7ff ff21 	bl	80093f4 <_malloc_r>
 80095b2:	6028      	str	r0, [r5, #0]
 80095b4:	6128      	str	r0, [r5, #16]
 80095b6:	b920      	cbnz	r0, 80095c2 <_svfiprintf_r+0x2e>
 80095b8:	230c      	movs	r3, #12
 80095ba:	603b      	str	r3, [r7, #0]
 80095bc:	f04f 30ff 	mov.w	r0, #4294967295
 80095c0:	e0d1      	b.n	8009766 <_svfiprintf_r+0x1d2>
 80095c2:	2340      	movs	r3, #64	; 0x40
 80095c4:	616b      	str	r3, [r5, #20]
 80095c6:	2300      	movs	r3, #0
 80095c8:	9309      	str	r3, [sp, #36]	; 0x24
 80095ca:	2320      	movs	r3, #32
 80095cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80095d4:	2330      	movs	r3, #48	; 0x30
 80095d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009780 <_svfiprintf_r+0x1ec>
 80095da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095de:	f04f 0901 	mov.w	r9, #1
 80095e2:	4623      	mov	r3, r4
 80095e4:	469a      	mov	sl, r3
 80095e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095ea:	b10a      	cbz	r2, 80095f0 <_svfiprintf_r+0x5c>
 80095ec:	2a25      	cmp	r2, #37	; 0x25
 80095ee:	d1f9      	bne.n	80095e4 <_svfiprintf_r+0x50>
 80095f0:	ebba 0b04 	subs.w	fp, sl, r4
 80095f4:	d00b      	beq.n	800960e <_svfiprintf_r+0x7a>
 80095f6:	465b      	mov	r3, fp
 80095f8:	4622      	mov	r2, r4
 80095fa:	4629      	mov	r1, r5
 80095fc:	4638      	mov	r0, r7
 80095fe:	f7ff ff6d 	bl	80094dc <__ssputs_r>
 8009602:	3001      	adds	r0, #1
 8009604:	f000 80aa 	beq.w	800975c <_svfiprintf_r+0x1c8>
 8009608:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800960a:	445a      	add	r2, fp
 800960c:	9209      	str	r2, [sp, #36]	; 0x24
 800960e:	f89a 3000 	ldrb.w	r3, [sl]
 8009612:	2b00      	cmp	r3, #0
 8009614:	f000 80a2 	beq.w	800975c <_svfiprintf_r+0x1c8>
 8009618:	2300      	movs	r3, #0
 800961a:	f04f 32ff 	mov.w	r2, #4294967295
 800961e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009622:	f10a 0a01 	add.w	sl, sl, #1
 8009626:	9304      	str	r3, [sp, #16]
 8009628:	9307      	str	r3, [sp, #28]
 800962a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800962e:	931a      	str	r3, [sp, #104]	; 0x68
 8009630:	4654      	mov	r4, sl
 8009632:	2205      	movs	r2, #5
 8009634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009638:	4851      	ldr	r0, [pc, #324]	; (8009780 <_svfiprintf_r+0x1ec>)
 800963a:	f7f6 fda9 	bl	8000190 <memchr>
 800963e:	9a04      	ldr	r2, [sp, #16]
 8009640:	b9d8      	cbnz	r0, 800967a <_svfiprintf_r+0xe6>
 8009642:	06d0      	lsls	r0, r2, #27
 8009644:	bf44      	itt	mi
 8009646:	2320      	movmi	r3, #32
 8009648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800964c:	0711      	lsls	r1, r2, #28
 800964e:	bf44      	itt	mi
 8009650:	232b      	movmi	r3, #43	; 0x2b
 8009652:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009656:	f89a 3000 	ldrb.w	r3, [sl]
 800965a:	2b2a      	cmp	r3, #42	; 0x2a
 800965c:	d015      	beq.n	800968a <_svfiprintf_r+0xf6>
 800965e:	9a07      	ldr	r2, [sp, #28]
 8009660:	4654      	mov	r4, sl
 8009662:	2000      	movs	r0, #0
 8009664:	f04f 0c0a 	mov.w	ip, #10
 8009668:	4621      	mov	r1, r4
 800966a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800966e:	3b30      	subs	r3, #48	; 0x30
 8009670:	2b09      	cmp	r3, #9
 8009672:	d94e      	bls.n	8009712 <_svfiprintf_r+0x17e>
 8009674:	b1b0      	cbz	r0, 80096a4 <_svfiprintf_r+0x110>
 8009676:	9207      	str	r2, [sp, #28]
 8009678:	e014      	b.n	80096a4 <_svfiprintf_r+0x110>
 800967a:	eba0 0308 	sub.w	r3, r0, r8
 800967e:	fa09 f303 	lsl.w	r3, r9, r3
 8009682:	4313      	orrs	r3, r2
 8009684:	9304      	str	r3, [sp, #16]
 8009686:	46a2      	mov	sl, r4
 8009688:	e7d2      	b.n	8009630 <_svfiprintf_r+0x9c>
 800968a:	9b03      	ldr	r3, [sp, #12]
 800968c:	1d19      	adds	r1, r3, #4
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	9103      	str	r1, [sp, #12]
 8009692:	2b00      	cmp	r3, #0
 8009694:	bfbb      	ittet	lt
 8009696:	425b      	neglt	r3, r3
 8009698:	f042 0202 	orrlt.w	r2, r2, #2
 800969c:	9307      	strge	r3, [sp, #28]
 800969e:	9307      	strlt	r3, [sp, #28]
 80096a0:	bfb8      	it	lt
 80096a2:	9204      	strlt	r2, [sp, #16]
 80096a4:	7823      	ldrb	r3, [r4, #0]
 80096a6:	2b2e      	cmp	r3, #46	; 0x2e
 80096a8:	d10c      	bne.n	80096c4 <_svfiprintf_r+0x130>
 80096aa:	7863      	ldrb	r3, [r4, #1]
 80096ac:	2b2a      	cmp	r3, #42	; 0x2a
 80096ae:	d135      	bne.n	800971c <_svfiprintf_r+0x188>
 80096b0:	9b03      	ldr	r3, [sp, #12]
 80096b2:	1d1a      	adds	r2, r3, #4
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	9203      	str	r2, [sp, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	bfb8      	it	lt
 80096bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80096c0:	3402      	adds	r4, #2
 80096c2:	9305      	str	r3, [sp, #20]
 80096c4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009784 <_svfiprintf_r+0x1f0>
 80096c8:	7821      	ldrb	r1, [r4, #0]
 80096ca:	2203      	movs	r2, #3
 80096cc:	4650      	mov	r0, sl
 80096ce:	f7f6 fd5f 	bl	8000190 <memchr>
 80096d2:	b140      	cbz	r0, 80096e6 <_svfiprintf_r+0x152>
 80096d4:	2340      	movs	r3, #64	; 0x40
 80096d6:	eba0 000a 	sub.w	r0, r0, sl
 80096da:	fa03 f000 	lsl.w	r0, r3, r0
 80096de:	9b04      	ldr	r3, [sp, #16]
 80096e0:	4303      	orrs	r3, r0
 80096e2:	3401      	adds	r4, #1
 80096e4:	9304      	str	r3, [sp, #16]
 80096e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ea:	4827      	ldr	r0, [pc, #156]	; (8009788 <_svfiprintf_r+0x1f4>)
 80096ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096f0:	2206      	movs	r2, #6
 80096f2:	f7f6 fd4d 	bl	8000190 <memchr>
 80096f6:	2800      	cmp	r0, #0
 80096f8:	d038      	beq.n	800976c <_svfiprintf_r+0x1d8>
 80096fa:	4b24      	ldr	r3, [pc, #144]	; (800978c <_svfiprintf_r+0x1f8>)
 80096fc:	bb1b      	cbnz	r3, 8009746 <_svfiprintf_r+0x1b2>
 80096fe:	9b03      	ldr	r3, [sp, #12]
 8009700:	3307      	adds	r3, #7
 8009702:	f023 0307 	bic.w	r3, r3, #7
 8009706:	3308      	adds	r3, #8
 8009708:	9303      	str	r3, [sp, #12]
 800970a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800970c:	4433      	add	r3, r6
 800970e:	9309      	str	r3, [sp, #36]	; 0x24
 8009710:	e767      	b.n	80095e2 <_svfiprintf_r+0x4e>
 8009712:	fb0c 3202 	mla	r2, ip, r2, r3
 8009716:	460c      	mov	r4, r1
 8009718:	2001      	movs	r0, #1
 800971a:	e7a5      	b.n	8009668 <_svfiprintf_r+0xd4>
 800971c:	2300      	movs	r3, #0
 800971e:	3401      	adds	r4, #1
 8009720:	9305      	str	r3, [sp, #20]
 8009722:	4619      	mov	r1, r3
 8009724:	f04f 0c0a 	mov.w	ip, #10
 8009728:	4620      	mov	r0, r4
 800972a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800972e:	3a30      	subs	r2, #48	; 0x30
 8009730:	2a09      	cmp	r2, #9
 8009732:	d903      	bls.n	800973c <_svfiprintf_r+0x1a8>
 8009734:	2b00      	cmp	r3, #0
 8009736:	d0c5      	beq.n	80096c4 <_svfiprintf_r+0x130>
 8009738:	9105      	str	r1, [sp, #20]
 800973a:	e7c3      	b.n	80096c4 <_svfiprintf_r+0x130>
 800973c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009740:	4604      	mov	r4, r0
 8009742:	2301      	movs	r3, #1
 8009744:	e7f0      	b.n	8009728 <_svfiprintf_r+0x194>
 8009746:	ab03      	add	r3, sp, #12
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	462a      	mov	r2, r5
 800974c:	4b10      	ldr	r3, [pc, #64]	; (8009790 <_svfiprintf_r+0x1fc>)
 800974e:	a904      	add	r1, sp, #16
 8009750:	4638      	mov	r0, r7
 8009752:	f7fc fa99 	bl	8005c88 <_printf_float>
 8009756:	1c42      	adds	r2, r0, #1
 8009758:	4606      	mov	r6, r0
 800975a:	d1d6      	bne.n	800970a <_svfiprintf_r+0x176>
 800975c:	89ab      	ldrh	r3, [r5, #12]
 800975e:	065b      	lsls	r3, r3, #25
 8009760:	f53f af2c 	bmi.w	80095bc <_svfiprintf_r+0x28>
 8009764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009766:	b01d      	add	sp, #116	; 0x74
 8009768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800976c:	ab03      	add	r3, sp, #12
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	462a      	mov	r2, r5
 8009772:	4b07      	ldr	r3, [pc, #28]	; (8009790 <_svfiprintf_r+0x1fc>)
 8009774:	a904      	add	r1, sp, #16
 8009776:	4638      	mov	r0, r7
 8009778:	f7fc fd1e 	bl	80061b8 <_printf_i>
 800977c:	e7eb      	b.n	8009756 <_svfiprintf_r+0x1c2>
 800977e:	bf00      	nop
 8009780:	0800a86c 	.word	0x0800a86c
 8009784:	0800a872 	.word	0x0800a872
 8009788:	0800a876 	.word	0x0800a876
 800978c:	08005c89 	.word	0x08005c89
 8009790:	080094dd 	.word	0x080094dd

08009794 <nan>:
 8009794:	4901      	ldr	r1, [pc, #4]	; (800979c <nan+0x8>)
 8009796:	2000      	movs	r0, #0
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	7ff80000 	.word	0x7ff80000

080097a0 <_sbrk_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	4d06      	ldr	r5, [pc, #24]	; (80097bc <_sbrk_r+0x1c>)
 80097a4:	2300      	movs	r3, #0
 80097a6:	4604      	mov	r4, r0
 80097a8:	4608      	mov	r0, r1
 80097aa:	602b      	str	r3, [r5, #0]
 80097ac:	f7f8 fefe 	bl	80025ac <_sbrk>
 80097b0:	1c43      	adds	r3, r0, #1
 80097b2:	d102      	bne.n	80097ba <_sbrk_r+0x1a>
 80097b4:	682b      	ldr	r3, [r5, #0]
 80097b6:	b103      	cbz	r3, 80097ba <_sbrk_r+0x1a>
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	bd38      	pop	{r3, r4, r5, pc}
 80097bc:	20000450 	.word	0x20000450

080097c0 <strncmp>:
 80097c0:	b510      	push	{r4, lr}
 80097c2:	4603      	mov	r3, r0
 80097c4:	b172      	cbz	r2, 80097e4 <strncmp+0x24>
 80097c6:	3901      	subs	r1, #1
 80097c8:	1884      	adds	r4, r0, r2
 80097ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 80097ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80097d2:	4290      	cmp	r0, r2
 80097d4:	d101      	bne.n	80097da <strncmp+0x1a>
 80097d6:	42a3      	cmp	r3, r4
 80097d8:	d101      	bne.n	80097de <strncmp+0x1e>
 80097da:	1a80      	subs	r0, r0, r2
 80097dc:	bd10      	pop	{r4, pc}
 80097de:	2800      	cmp	r0, #0
 80097e0:	d1f3      	bne.n	80097ca <strncmp+0xa>
 80097e2:	e7fa      	b.n	80097da <strncmp+0x1a>
 80097e4:	4610      	mov	r0, r2
 80097e6:	e7f9      	b.n	80097dc <strncmp+0x1c>

080097e8 <__ascii_wctomb>:
 80097e8:	4603      	mov	r3, r0
 80097ea:	4608      	mov	r0, r1
 80097ec:	b141      	cbz	r1, 8009800 <__ascii_wctomb+0x18>
 80097ee:	2aff      	cmp	r2, #255	; 0xff
 80097f0:	d904      	bls.n	80097fc <__ascii_wctomb+0x14>
 80097f2:	228a      	movs	r2, #138	; 0x8a
 80097f4:	601a      	str	r2, [r3, #0]
 80097f6:	f04f 30ff 	mov.w	r0, #4294967295
 80097fa:	4770      	bx	lr
 80097fc:	700a      	strb	r2, [r1, #0]
 80097fe:	2001      	movs	r0, #1
 8009800:	4770      	bx	lr
	...

08009804 <__assert_func>:
 8009804:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009806:	4614      	mov	r4, r2
 8009808:	461a      	mov	r2, r3
 800980a:	4b09      	ldr	r3, [pc, #36]	; (8009830 <__assert_func+0x2c>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4605      	mov	r5, r0
 8009810:	68d8      	ldr	r0, [r3, #12]
 8009812:	b14c      	cbz	r4, 8009828 <__assert_func+0x24>
 8009814:	4b07      	ldr	r3, [pc, #28]	; (8009834 <__assert_func+0x30>)
 8009816:	9100      	str	r1, [sp, #0]
 8009818:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800981c:	4906      	ldr	r1, [pc, #24]	; (8009838 <__assert_func+0x34>)
 800981e:	462b      	mov	r3, r5
 8009820:	f000 f80e 	bl	8009840 <fiprintf>
 8009824:	f000 fa8a 	bl	8009d3c <abort>
 8009828:	4b04      	ldr	r3, [pc, #16]	; (800983c <__assert_func+0x38>)
 800982a:	461c      	mov	r4, r3
 800982c:	e7f3      	b.n	8009816 <__assert_func+0x12>
 800982e:	bf00      	nop
 8009830:	2000000c 	.word	0x2000000c
 8009834:	0800a87d 	.word	0x0800a87d
 8009838:	0800a88a 	.word	0x0800a88a
 800983c:	0800a8b8 	.word	0x0800a8b8

08009840 <fiprintf>:
 8009840:	b40e      	push	{r1, r2, r3}
 8009842:	b503      	push	{r0, r1, lr}
 8009844:	4601      	mov	r1, r0
 8009846:	ab03      	add	r3, sp, #12
 8009848:	4805      	ldr	r0, [pc, #20]	; (8009860 <fiprintf+0x20>)
 800984a:	f853 2b04 	ldr.w	r2, [r3], #4
 800984e:	6800      	ldr	r0, [r0, #0]
 8009850:	9301      	str	r3, [sp, #4]
 8009852:	f000 f883 	bl	800995c <_vfiprintf_r>
 8009856:	b002      	add	sp, #8
 8009858:	f85d eb04 	ldr.w	lr, [sp], #4
 800985c:	b003      	add	sp, #12
 800985e:	4770      	bx	lr
 8009860:	2000000c 	.word	0x2000000c

08009864 <memmove>:
 8009864:	4288      	cmp	r0, r1
 8009866:	b510      	push	{r4, lr}
 8009868:	eb01 0402 	add.w	r4, r1, r2
 800986c:	d902      	bls.n	8009874 <memmove+0x10>
 800986e:	4284      	cmp	r4, r0
 8009870:	4623      	mov	r3, r4
 8009872:	d807      	bhi.n	8009884 <memmove+0x20>
 8009874:	1e43      	subs	r3, r0, #1
 8009876:	42a1      	cmp	r1, r4
 8009878:	d008      	beq.n	800988c <memmove+0x28>
 800987a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800987e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009882:	e7f8      	b.n	8009876 <memmove+0x12>
 8009884:	4402      	add	r2, r0
 8009886:	4601      	mov	r1, r0
 8009888:	428a      	cmp	r2, r1
 800988a:	d100      	bne.n	800988e <memmove+0x2a>
 800988c:	bd10      	pop	{r4, pc}
 800988e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009892:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009896:	e7f7      	b.n	8009888 <memmove+0x24>

08009898 <__malloc_lock>:
 8009898:	4801      	ldr	r0, [pc, #4]	; (80098a0 <__malloc_lock+0x8>)
 800989a:	f000 bc0b 	b.w	800a0b4 <__retarget_lock_acquire_recursive>
 800989e:	bf00      	nop
 80098a0:	20000454 	.word	0x20000454

080098a4 <__malloc_unlock>:
 80098a4:	4801      	ldr	r0, [pc, #4]	; (80098ac <__malloc_unlock+0x8>)
 80098a6:	f000 bc06 	b.w	800a0b6 <__retarget_lock_release_recursive>
 80098aa:	bf00      	nop
 80098ac:	20000454 	.word	0x20000454

080098b0 <_realloc_r>:
 80098b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098b4:	4680      	mov	r8, r0
 80098b6:	4614      	mov	r4, r2
 80098b8:	460e      	mov	r6, r1
 80098ba:	b921      	cbnz	r1, 80098c6 <_realloc_r+0x16>
 80098bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098c0:	4611      	mov	r1, r2
 80098c2:	f7ff bd97 	b.w	80093f4 <_malloc_r>
 80098c6:	b92a      	cbnz	r2, 80098d4 <_realloc_r+0x24>
 80098c8:	f7ff fd2a 	bl	8009320 <_free_r>
 80098cc:	4625      	mov	r5, r4
 80098ce:	4628      	mov	r0, r5
 80098d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098d4:	f000 fc56 	bl	800a184 <_malloc_usable_size_r>
 80098d8:	4284      	cmp	r4, r0
 80098da:	4607      	mov	r7, r0
 80098dc:	d802      	bhi.n	80098e4 <_realloc_r+0x34>
 80098de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098e2:	d812      	bhi.n	800990a <_realloc_r+0x5a>
 80098e4:	4621      	mov	r1, r4
 80098e6:	4640      	mov	r0, r8
 80098e8:	f7ff fd84 	bl	80093f4 <_malloc_r>
 80098ec:	4605      	mov	r5, r0
 80098ee:	2800      	cmp	r0, #0
 80098f0:	d0ed      	beq.n	80098ce <_realloc_r+0x1e>
 80098f2:	42bc      	cmp	r4, r7
 80098f4:	4622      	mov	r2, r4
 80098f6:	4631      	mov	r1, r6
 80098f8:	bf28      	it	cs
 80098fa:	463a      	movcs	r2, r7
 80098fc:	f7ff f83a 	bl	8008974 <memcpy>
 8009900:	4631      	mov	r1, r6
 8009902:	4640      	mov	r0, r8
 8009904:	f7ff fd0c 	bl	8009320 <_free_r>
 8009908:	e7e1      	b.n	80098ce <_realloc_r+0x1e>
 800990a:	4635      	mov	r5, r6
 800990c:	e7df      	b.n	80098ce <_realloc_r+0x1e>

0800990e <__sfputc_r>:
 800990e:	6893      	ldr	r3, [r2, #8]
 8009910:	3b01      	subs	r3, #1
 8009912:	2b00      	cmp	r3, #0
 8009914:	b410      	push	{r4}
 8009916:	6093      	str	r3, [r2, #8]
 8009918:	da07      	bge.n	800992a <__sfputc_r+0x1c>
 800991a:	6994      	ldr	r4, [r2, #24]
 800991c:	42a3      	cmp	r3, r4
 800991e:	db01      	blt.n	8009924 <__sfputc_r+0x16>
 8009920:	290a      	cmp	r1, #10
 8009922:	d102      	bne.n	800992a <__sfputc_r+0x1c>
 8009924:	bc10      	pop	{r4}
 8009926:	f000 b949 	b.w	8009bbc <__swbuf_r>
 800992a:	6813      	ldr	r3, [r2, #0]
 800992c:	1c58      	adds	r0, r3, #1
 800992e:	6010      	str	r0, [r2, #0]
 8009930:	7019      	strb	r1, [r3, #0]
 8009932:	4608      	mov	r0, r1
 8009934:	bc10      	pop	{r4}
 8009936:	4770      	bx	lr

08009938 <__sfputs_r>:
 8009938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993a:	4606      	mov	r6, r0
 800993c:	460f      	mov	r7, r1
 800993e:	4614      	mov	r4, r2
 8009940:	18d5      	adds	r5, r2, r3
 8009942:	42ac      	cmp	r4, r5
 8009944:	d101      	bne.n	800994a <__sfputs_r+0x12>
 8009946:	2000      	movs	r0, #0
 8009948:	e007      	b.n	800995a <__sfputs_r+0x22>
 800994a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800994e:	463a      	mov	r2, r7
 8009950:	4630      	mov	r0, r6
 8009952:	f7ff ffdc 	bl	800990e <__sfputc_r>
 8009956:	1c43      	adds	r3, r0, #1
 8009958:	d1f3      	bne.n	8009942 <__sfputs_r+0xa>
 800995a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800995c <_vfiprintf_r>:
 800995c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009960:	460d      	mov	r5, r1
 8009962:	b09d      	sub	sp, #116	; 0x74
 8009964:	4614      	mov	r4, r2
 8009966:	4698      	mov	r8, r3
 8009968:	4606      	mov	r6, r0
 800996a:	b118      	cbz	r0, 8009974 <_vfiprintf_r+0x18>
 800996c:	6983      	ldr	r3, [r0, #24]
 800996e:	b90b      	cbnz	r3, 8009974 <_vfiprintf_r+0x18>
 8009970:	f000 fb02 	bl	8009f78 <__sinit>
 8009974:	4b89      	ldr	r3, [pc, #548]	; (8009b9c <_vfiprintf_r+0x240>)
 8009976:	429d      	cmp	r5, r3
 8009978:	d11b      	bne.n	80099b2 <_vfiprintf_r+0x56>
 800997a:	6875      	ldr	r5, [r6, #4]
 800997c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800997e:	07d9      	lsls	r1, r3, #31
 8009980:	d405      	bmi.n	800998e <_vfiprintf_r+0x32>
 8009982:	89ab      	ldrh	r3, [r5, #12]
 8009984:	059a      	lsls	r2, r3, #22
 8009986:	d402      	bmi.n	800998e <_vfiprintf_r+0x32>
 8009988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800998a:	f000 fb93 	bl	800a0b4 <__retarget_lock_acquire_recursive>
 800998e:	89ab      	ldrh	r3, [r5, #12]
 8009990:	071b      	lsls	r3, r3, #28
 8009992:	d501      	bpl.n	8009998 <_vfiprintf_r+0x3c>
 8009994:	692b      	ldr	r3, [r5, #16]
 8009996:	b9eb      	cbnz	r3, 80099d4 <_vfiprintf_r+0x78>
 8009998:	4629      	mov	r1, r5
 800999a:	4630      	mov	r0, r6
 800999c:	f000 f960 	bl	8009c60 <__swsetup_r>
 80099a0:	b1c0      	cbz	r0, 80099d4 <_vfiprintf_r+0x78>
 80099a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099a4:	07dc      	lsls	r4, r3, #31
 80099a6:	d50e      	bpl.n	80099c6 <_vfiprintf_r+0x6a>
 80099a8:	f04f 30ff 	mov.w	r0, #4294967295
 80099ac:	b01d      	add	sp, #116	; 0x74
 80099ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b2:	4b7b      	ldr	r3, [pc, #492]	; (8009ba0 <_vfiprintf_r+0x244>)
 80099b4:	429d      	cmp	r5, r3
 80099b6:	d101      	bne.n	80099bc <_vfiprintf_r+0x60>
 80099b8:	68b5      	ldr	r5, [r6, #8]
 80099ba:	e7df      	b.n	800997c <_vfiprintf_r+0x20>
 80099bc:	4b79      	ldr	r3, [pc, #484]	; (8009ba4 <_vfiprintf_r+0x248>)
 80099be:	429d      	cmp	r5, r3
 80099c0:	bf08      	it	eq
 80099c2:	68f5      	ldreq	r5, [r6, #12]
 80099c4:	e7da      	b.n	800997c <_vfiprintf_r+0x20>
 80099c6:	89ab      	ldrh	r3, [r5, #12]
 80099c8:	0598      	lsls	r0, r3, #22
 80099ca:	d4ed      	bmi.n	80099a8 <_vfiprintf_r+0x4c>
 80099cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099ce:	f000 fb72 	bl	800a0b6 <__retarget_lock_release_recursive>
 80099d2:	e7e9      	b.n	80099a8 <_vfiprintf_r+0x4c>
 80099d4:	2300      	movs	r3, #0
 80099d6:	9309      	str	r3, [sp, #36]	; 0x24
 80099d8:	2320      	movs	r3, #32
 80099da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099de:	f8cd 800c 	str.w	r8, [sp, #12]
 80099e2:	2330      	movs	r3, #48	; 0x30
 80099e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ba8 <_vfiprintf_r+0x24c>
 80099e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099ec:	f04f 0901 	mov.w	r9, #1
 80099f0:	4623      	mov	r3, r4
 80099f2:	469a      	mov	sl, r3
 80099f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099f8:	b10a      	cbz	r2, 80099fe <_vfiprintf_r+0xa2>
 80099fa:	2a25      	cmp	r2, #37	; 0x25
 80099fc:	d1f9      	bne.n	80099f2 <_vfiprintf_r+0x96>
 80099fe:	ebba 0b04 	subs.w	fp, sl, r4
 8009a02:	d00b      	beq.n	8009a1c <_vfiprintf_r+0xc0>
 8009a04:	465b      	mov	r3, fp
 8009a06:	4622      	mov	r2, r4
 8009a08:	4629      	mov	r1, r5
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	f7ff ff94 	bl	8009938 <__sfputs_r>
 8009a10:	3001      	adds	r0, #1
 8009a12:	f000 80aa 	beq.w	8009b6a <_vfiprintf_r+0x20e>
 8009a16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a18:	445a      	add	r2, fp
 8009a1a:	9209      	str	r2, [sp, #36]	; 0x24
 8009a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	f000 80a2 	beq.w	8009b6a <_vfiprintf_r+0x20e>
 8009a26:	2300      	movs	r3, #0
 8009a28:	f04f 32ff 	mov.w	r2, #4294967295
 8009a2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a30:	f10a 0a01 	add.w	sl, sl, #1
 8009a34:	9304      	str	r3, [sp, #16]
 8009a36:	9307      	str	r3, [sp, #28]
 8009a38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a3c:	931a      	str	r3, [sp, #104]	; 0x68
 8009a3e:	4654      	mov	r4, sl
 8009a40:	2205      	movs	r2, #5
 8009a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a46:	4858      	ldr	r0, [pc, #352]	; (8009ba8 <_vfiprintf_r+0x24c>)
 8009a48:	f7f6 fba2 	bl	8000190 <memchr>
 8009a4c:	9a04      	ldr	r2, [sp, #16]
 8009a4e:	b9d8      	cbnz	r0, 8009a88 <_vfiprintf_r+0x12c>
 8009a50:	06d1      	lsls	r1, r2, #27
 8009a52:	bf44      	itt	mi
 8009a54:	2320      	movmi	r3, #32
 8009a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a5a:	0713      	lsls	r3, r2, #28
 8009a5c:	bf44      	itt	mi
 8009a5e:	232b      	movmi	r3, #43	; 0x2b
 8009a60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a64:	f89a 3000 	ldrb.w	r3, [sl]
 8009a68:	2b2a      	cmp	r3, #42	; 0x2a
 8009a6a:	d015      	beq.n	8009a98 <_vfiprintf_r+0x13c>
 8009a6c:	9a07      	ldr	r2, [sp, #28]
 8009a6e:	4654      	mov	r4, sl
 8009a70:	2000      	movs	r0, #0
 8009a72:	f04f 0c0a 	mov.w	ip, #10
 8009a76:	4621      	mov	r1, r4
 8009a78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a7c:	3b30      	subs	r3, #48	; 0x30
 8009a7e:	2b09      	cmp	r3, #9
 8009a80:	d94e      	bls.n	8009b20 <_vfiprintf_r+0x1c4>
 8009a82:	b1b0      	cbz	r0, 8009ab2 <_vfiprintf_r+0x156>
 8009a84:	9207      	str	r2, [sp, #28]
 8009a86:	e014      	b.n	8009ab2 <_vfiprintf_r+0x156>
 8009a88:	eba0 0308 	sub.w	r3, r0, r8
 8009a8c:	fa09 f303 	lsl.w	r3, r9, r3
 8009a90:	4313      	orrs	r3, r2
 8009a92:	9304      	str	r3, [sp, #16]
 8009a94:	46a2      	mov	sl, r4
 8009a96:	e7d2      	b.n	8009a3e <_vfiprintf_r+0xe2>
 8009a98:	9b03      	ldr	r3, [sp, #12]
 8009a9a:	1d19      	adds	r1, r3, #4
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	9103      	str	r1, [sp, #12]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	bfbb      	ittet	lt
 8009aa4:	425b      	neglt	r3, r3
 8009aa6:	f042 0202 	orrlt.w	r2, r2, #2
 8009aaa:	9307      	strge	r3, [sp, #28]
 8009aac:	9307      	strlt	r3, [sp, #28]
 8009aae:	bfb8      	it	lt
 8009ab0:	9204      	strlt	r2, [sp, #16]
 8009ab2:	7823      	ldrb	r3, [r4, #0]
 8009ab4:	2b2e      	cmp	r3, #46	; 0x2e
 8009ab6:	d10c      	bne.n	8009ad2 <_vfiprintf_r+0x176>
 8009ab8:	7863      	ldrb	r3, [r4, #1]
 8009aba:	2b2a      	cmp	r3, #42	; 0x2a
 8009abc:	d135      	bne.n	8009b2a <_vfiprintf_r+0x1ce>
 8009abe:	9b03      	ldr	r3, [sp, #12]
 8009ac0:	1d1a      	adds	r2, r3, #4
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	9203      	str	r2, [sp, #12]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	bfb8      	it	lt
 8009aca:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ace:	3402      	adds	r4, #2
 8009ad0:	9305      	str	r3, [sp, #20]
 8009ad2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009bac <_vfiprintf_r+0x250>
 8009ad6:	7821      	ldrb	r1, [r4, #0]
 8009ad8:	2203      	movs	r2, #3
 8009ada:	4650      	mov	r0, sl
 8009adc:	f7f6 fb58 	bl	8000190 <memchr>
 8009ae0:	b140      	cbz	r0, 8009af4 <_vfiprintf_r+0x198>
 8009ae2:	2340      	movs	r3, #64	; 0x40
 8009ae4:	eba0 000a 	sub.w	r0, r0, sl
 8009ae8:	fa03 f000 	lsl.w	r0, r3, r0
 8009aec:	9b04      	ldr	r3, [sp, #16]
 8009aee:	4303      	orrs	r3, r0
 8009af0:	3401      	adds	r4, #1
 8009af2:	9304      	str	r3, [sp, #16]
 8009af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009af8:	482d      	ldr	r0, [pc, #180]	; (8009bb0 <_vfiprintf_r+0x254>)
 8009afa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009afe:	2206      	movs	r2, #6
 8009b00:	f7f6 fb46 	bl	8000190 <memchr>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d03f      	beq.n	8009b88 <_vfiprintf_r+0x22c>
 8009b08:	4b2a      	ldr	r3, [pc, #168]	; (8009bb4 <_vfiprintf_r+0x258>)
 8009b0a:	bb1b      	cbnz	r3, 8009b54 <_vfiprintf_r+0x1f8>
 8009b0c:	9b03      	ldr	r3, [sp, #12]
 8009b0e:	3307      	adds	r3, #7
 8009b10:	f023 0307 	bic.w	r3, r3, #7
 8009b14:	3308      	adds	r3, #8
 8009b16:	9303      	str	r3, [sp, #12]
 8009b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b1a:	443b      	add	r3, r7
 8009b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b1e:	e767      	b.n	80099f0 <_vfiprintf_r+0x94>
 8009b20:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b24:	460c      	mov	r4, r1
 8009b26:	2001      	movs	r0, #1
 8009b28:	e7a5      	b.n	8009a76 <_vfiprintf_r+0x11a>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	3401      	adds	r4, #1
 8009b2e:	9305      	str	r3, [sp, #20]
 8009b30:	4619      	mov	r1, r3
 8009b32:	f04f 0c0a 	mov.w	ip, #10
 8009b36:	4620      	mov	r0, r4
 8009b38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b3c:	3a30      	subs	r2, #48	; 0x30
 8009b3e:	2a09      	cmp	r2, #9
 8009b40:	d903      	bls.n	8009b4a <_vfiprintf_r+0x1ee>
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d0c5      	beq.n	8009ad2 <_vfiprintf_r+0x176>
 8009b46:	9105      	str	r1, [sp, #20]
 8009b48:	e7c3      	b.n	8009ad2 <_vfiprintf_r+0x176>
 8009b4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b4e:	4604      	mov	r4, r0
 8009b50:	2301      	movs	r3, #1
 8009b52:	e7f0      	b.n	8009b36 <_vfiprintf_r+0x1da>
 8009b54:	ab03      	add	r3, sp, #12
 8009b56:	9300      	str	r3, [sp, #0]
 8009b58:	462a      	mov	r2, r5
 8009b5a:	4b17      	ldr	r3, [pc, #92]	; (8009bb8 <_vfiprintf_r+0x25c>)
 8009b5c:	a904      	add	r1, sp, #16
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f7fc f892 	bl	8005c88 <_printf_float>
 8009b64:	4607      	mov	r7, r0
 8009b66:	1c78      	adds	r0, r7, #1
 8009b68:	d1d6      	bne.n	8009b18 <_vfiprintf_r+0x1bc>
 8009b6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b6c:	07d9      	lsls	r1, r3, #31
 8009b6e:	d405      	bmi.n	8009b7c <_vfiprintf_r+0x220>
 8009b70:	89ab      	ldrh	r3, [r5, #12]
 8009b72:	059a      	lsls	r2, r3, #22
 8009b74:	d402      	bmi.n	8009b7c <_vfiprintf_r+0x220>
 8009b76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b78:	f000 fa9d 	bl	800a0b6 <__retarget_lock_release_recursive>
 8009b7c:	89ab      	ldrh	r3, [r5, #12]
 8009b7e:	065b      	lsls	r3, r3, #25
 8009b80:	f53f af12 	bmi.w	80099a8 <_vfiprintf_r+0x4c>
 8009b84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b86:	e711      	b.n	80099ac <_vfiprintf_r+0x50>
 8009b88:	ab03      	add	r3, sp, #12
 8009b8a:	9300      	str	r3, [sp, #0]
 8009b8c:	462a      	mov	r2, r5
 8009b8e:	4b0a      	ldr	r3, [pc, #40]	; (8009bb8 <_vfiprintf_r+0x25c>)
 8009b90:	a904      	add	r1, sp, #16
 8009b92:	4630      	mov	r0, r6
 8009b94:	f7fc fb10 	bl	80061b8 <_printf_i>
 8009b98:	e7e4      	b.n	8009b64 <_vfiprintf_r+0x208>
 8009b9a:	bf00      	nop
 8009b9c:	0800a8dc 	.word	0x0800a8dc
 8009ba0:	0800a8fc 	.word	0x0800a8fc
 8009ba4:	0800a8bc 	.word	0x0800a8bc
 8009ba8:	0800a86c 	.word	0x0800a86c
 8009bac:	0800a872 	.word	0x0800a872
 8009bb0:	0800a876 	.word	0x0800a876
 8009bb4:	08005c89 	.word	0x08005c89
 8009bb8:	08009939 	.word	0x08009939

08009bbc <__swbuf_r>:
 8009bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bbe:	460e      	mov	r6, r1
 8009bc0:	4614      	mov	r4, r2
 8009bc2:	4605      	mov	r5, r0
 8009bc4:	b118      	cbz	r0, 8009bce <__swbuf_r+0x12>
 8009bc6:	6983      	ldr	r3, [r0, #24]
 8009bc8:	b90b      	cbnz	r3, 8009bce <__swbuf_r+0x12>
 8009bca:	f000 f9d5 	bl	8009f78 <__sinit>
 8009bce:	4b21      	ldr	r3, [pc, #132]	; (8009c54 <__swbuf_r+0x98>)
 8009bd0:	429c      	cmp	r4, r3
 8009bd2:	d12b      	bne.n	8009c2c <__swbuf_r+0x70>
 8009bd4:	686c      	ldr	r4, [r5, #4]
 8009bd6:	69a3      	ldr	r3, [r4, #24]
 8009bd8:	60a3      	str	r3, [r4, #8]
 8009bda:	89a3      	ldrh	r3, [r4, #12]
 8009bdc:	071a      	lsls	r2, r3, #28
 8009bde:	d52f      	bpl.n	8009c40 <__swbuf_r+0x84>
 8009be0:	6923      	ldr	r3, [r4, #16]
 8009be2:	b36b      	cbz	r3, 8009c40 <__swbuf_r+0x84>
 8009be4:	6923      	ldr	r3, [r4, #16]
 8009be6:	6820      	ldr	r0, [r4, #0]
 8009be8:	1ac0      	subs	r0, r0, r3
 8009bea:	6963      	ldr	r3, [r4, #20]
 8009bec:	b2f6      	uxtb	r6, r6
 8009bee:	4283      	cmp	r3, r0
 8009bf0:	4637      	mov	r7, r6
 8009bf2:	dc04      	bgt.n	8009bfe <__swbuf_r+0x42>
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	f000 f92a 	bl	8009e50 <_fflush_r>
 8009bfc:	bb30      	cbnz	r0, 8009c4c <__swbuf_r+0x90>
 8009bfe:	68a3      	ldr	r3, [r4, #8]
 8009c00:	3b01      	subs	r3, #1
 8009c02:	60a3      	str	r3, [r4, #8]
 8009c04:	6823      	ldr	r3, [r4, #0]
 8009c06:	1c5a      	adds	r2, r3, #1
 8009c08:	6022      	str	r2, [r4, #0]
 8009c0a:	701e      	strb	r6, [r3, #0]
 8009c0c:	6963      	ldr	r3, [r4, #20]
 8009c0e:	3001      	adds	r0, #1
 8009c10:	4283      	cmp	r3, r0
 8009c12:	d004      	beq.n	8009c1e <__swbuf_r+0x62>
 8009c14:	89a3      	ldrh	r3, [r4, #12]
 8009c16:	07db      	lsls	r3, r3, #31
 8009c18:	d506      	bpl.n	8009c28 <__swbuf_r+0x6c>
 8009c1a:	2e0a      	cmp	r6, #10
 8009c1c:	d104      	bne.n	8009c28 <__swbuf_r+0x6c>
 8009c1e:	4621      	mov	r1, r4
 8009c20:	4628      	mov	r0, r5
 8009c22:	f000 f915 	bl	8009e50 <_fflush_r>
 8009c26:	b988      	cbnz	r0, 8009c4c <__swbuf_r+0x90>
 8009c28:	4638      	mov	r0, r7
 8009c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c2c:	4b0a      	ldr	r3, [pc, #40]	; (8009c58 <__swbuf_r+0x9c>)
 8009c2e:	429c      	cmp	r4, r3
 8009c30:	d101      	bne.n	8009c36 <__swbuf_r+0x7a>
 8009c32:	68ac      	ldr	r4, [r5, #8]
 8009c34:	e7cf      	b.n	8009bd6 <__swbuf_r+0x1a>
 8009c36:	4b09      	ldr	r3, [pc, #36]	; (8009c5c <__swbuf_r+0xa0>)
 8009c38:	429c      	cmp	r4, r3
 8009c3a:	bf08      	it	eq
 8009c3c:	68ec      	ldreq	r4, [r5, #12]
 8009c3e:	e7ca      	b.n	8009bd6 <__swbuf_r+0x1a>
 8009c40:	4621      	mov	r1, r4
 8009c42:	4628      	mov	r0, r5
 8009c44:	f000 f80c 	bl	8009c60 <__swsetup_r>
 8009c48:	2800      	cmp	r0, #0
 8009c4a:	d0cb      	beq.n	8009be4 <__swbuf_r+0x28>
 8009c4c:	f04f 37ff 	mov.w	r7, #4294967295
 8009c50:	e7ea      	b.n	8009c28 <__swbuf_r+0x6c>
 8009c52:	bf00      	nop
 8009c54:	0800a8dc 	.word	0x0800a8dc
 8009c58:	0800a8fc 	.word	0x0800a8fc
 8009c5c:	0800a8bc 	.word	0x0800a8bc

08009c60 <__swsetup_r>:
 8009c60:	4b32      	ldr	r3, [pc, #200]	; (8009d2c <__swsetup_r+0xcc>)
 8009c62:	b570      	push	{r4, r5, r6, lr}
 8009c64:	681d      	ldr	r5, [r3, #0]
 8009c66:	4606      	mov	r6, r0
 8009c68:	460c      	mov	r4, r1
 8009c6a:	b125      	cbz	r5, 8009c76 <__swsetup_r+0x16>
 8009c6c:	69ab      	ldr	r3, [r5, #24]
 8009c6e:	b913      	cbnz	r3, 8009c76 <__swsetup_r+0x16>
 8009c70:	4628      	mov	r0, r5
 8009c72:	f000 f981 	bl	8009f78 <__sinit>
 8009c76:	4b2e      	ldr	r3, [pc, #184]	; (8009d30 <__swsetup_r+0xd0>)
 8009c78:	429c      	cmp	r4, r3
 8009c7a:	d10f      	bne.n	8009c9c <__swsetup_r+0x3c>
 8009c7c:	686c      	ldr	r4, [r5, #4]
 8009c7e:	89a3      	ldrh	r3, [r4, #12]
 8009c80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c84:	0719      	lsls	r1, r3, #28
 8009c86:	d42c      	bmi.n	8009ce2 <__swsetup_r+0x82>
 8009c88:	06dd      	lsls	r5, r3, #27
 8009c8a:	d411      	bmi.n	8009cb0 <__swsetup_r+0x50>
 8009c8c:	2309      	movs	r3, #9
 8009c8e:	6033      	str	r3, [r6, #0]
 8009c90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c94:	81a3      	strh	r3, [r4, #12]
 8009c96:	f04f 30ff 	mov.w	r0, #4294967295
 8009c9a:	e03e      	b.n	8009d1a <__swsetup_r+0xba>
 8009c9c:	4b25      	ldr	r3, [pc, #148]	; (8009d34 <__swsetup_r+0xd4>)
 8009c9e:	429c      	cmp	r4, r3
 8009ca0:	d101      	bne.n	8009ca6 <__swsetup_r+0x46>
 8009ca2:	68ac      	ldr	r4, [r5, #8]
 8009ca4:	e7eb      	b.n	8009c7e <__swsetup_r+0x1e>
 8009ca6:	4b24      	ldr	r3, [pc, #144]	; (8009d38 <__swsetup_r+0xd8>)
 8009ca8:	429c      	cmp	r4, r3
 8009caa:	bf08      	it	eq
 8009cac:	68ec      	ldreq	r4, [r5, #12]
 8009cae:	e7e6      	b.n	8009c7e <__swsetup_r+0x1e>
 8009cb0:	0758      	lsls	r0, r3, #29
 8009cb2:	d512      	bpl.n	8009cda <__swsetup_r+0x7a>
 8009cb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cb6:	b141      	cbz	r1, 8009cca <__swsetup_r+0x6a>
 8009cb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cbc:	4299      	cmp	r1, r3
 8009cbe:	d002      	beq.n	8009cc6 <__swsetup_r+0x66>
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	f7ff fb2d 	bl	8009320 <_free_r>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	6363      	str	r3, [r4, #52]	; 0x34
 8009cca:	89a3      	ldrh	r3, [r4, #12]
 8009ccc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009cd0:	81a3      	strh	r3, [r4, #12]
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	6063      	str	r3, [r4, #4]
 8009cd6:	6923      	ldr	r3, [r4, #16]
 8009cd8:	6023      	str	r3, [r4, #0]
 8009cda:	89a3      	ldrh	r3, [r4, #12]
 8009cdc:	f043 0308 	orr.w	r3, r3, #8
 8009ce0:	81a3      	strh	r3, [r4, #12]
 8009ce2:	6923      	ldr	r3, [r4, #16]
 8009ce4:	b94b      	cbnz	r3, 8009cfa <__swsetup_r+0x9a>
 8009ce6:	89a3      	ldrh	r3, [r4, #12]
 8009ce8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cf0:	d003      	beq.n	8009cfa <__swsetup_r+0x9a>
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	f000 fa05 	bl	800a104 <__smakebuf_r>
 8009cfa:	89a0      	ldrh	r0, [r4, #12]
 8009cfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d00:	f010 0301 	ands.w	r3, r0, #1
 8009d04:	d00a      	beq.n	8009d1c <__swsetup_r+0xbc>
 8009d06:	2300      	movs	r3, #0
 8009d08:	60a3      	str	r3, [r4, #8]
 8009d0a:	6963      	ldr	r3, [r4, #20]
 8009d0c:	425b      	negs	r3, r3
 8009d0e:	61a3      	str	r3, [r4, #24]
 8009d10:	6923      	ldr	r3, [r4, #16]
 8009d12:	b943      	cbnz	r3, 8009d26 <__swsetup_r+0xc6>
 8009d14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d18:	d1ba      	bne.n	8009c90 <__swsetup_r+0x30>
 8009d1a:	bd70      	pop	{r4, r5, r6, pc}
 8009d1c:	0781      	lsls	r1, r0, #30
 8009d1e:	bf58      	it	pl
 8009d20:	6963      	ldrpl	r3, [r4, #20]
 8009d22:	60a3      	str	r3, [r4, #8]
 8009d24:	e7f4      	b.n	8009d10 <__swsetup_r+0xb0>
 8009d26:	2000      	movs	r0, #0
 8009d28:	e7f7      	b.n	8009d1a <__swsetup_r+0xba>
 8009d2a:	bf00      	nop
 8009d2c:	2000000c 	.word	0x2000000c
 8009d30:	0800a8dc 	.word	0x0800a8dc
 8009d34:	0800a8fc 	.word	0x0800a8fc
 8009d38:	0800a8bc 	.word	0x0800a8bc

08009d3c <abort>:
 8009d3c:	b508      	push	{r3, lr}
 8009d3e:	2006      	movs	r0, #6
 8009d40:	f000 fa50 	bl	800a1e4 <raise>
 8009d44:	2001      	movs	r0, #1
 8009d46:	f7f8 fbbd 	bl	80024c4 <_exit>
	...

08009d4c <__sflush_r>:
 8009d4c:	898a      	ldrh	r2, [r1, #12]
 8009d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d50:	4605      	mov	r5, r0
 8009d52:	0710      	lsls	r0, r2, #28
 8009d54:	460c      	mov	r4, r1
 8009d56:	d457      	bmi.n	8009e08 <__sflush_r+0xbc>
 8009d58:	684b      	ldr	r3, [r1, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	dc04      	bgt.n	8009d68 <__sflush_r+0x1c>
 8009d5e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	dc01      	bgt.n	8009d68 <__sflush_r+0x1c>
 8009d64:	2000      	movs	r0, #0
 8009d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d6a:	2e00      	cmp	r6, #0
 8009d6c:	d0fa      	beq.n	8009d64 <__sflush_r+0x18>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d74:	682f      	ldr	r7, [r5, #0]
 8009d76:	602b      	str	r3, [r5, #0]
 8009d78:	d032      	beq.n	8009de0 <__sflush_r+0x94>
 8009d7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d7c:	89a3      	ldrh	r3, [r4, #12]
 8009d7e:	075a      	lsls	r2, r3, #29
 8009d80:	d505      	bpl.n	8009d8e <__sflush_r+0x42>
 8009d82:	6863      	ldr	r3, [r4, #4]
 8009d84:	1ac0      	subs	r0, r0, r3
 8009d86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d88:	b10b      	cbz	r3, 8009d8e <__sflush_r+0x42>
 8009d8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d8c:	1ac0      	subs	r0, r0, r3
 8009d8e:	2300      	movs	r3, #0
 8009d90:	4602      	mov	r2, r0
 8009d92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d94:	6a21      	ldr	r1, [r4, #32]
 8009d96:	4628      	mov	r0, r5
 8009d98:	47b0      	blx	r6
 8009d9a:	1c43      	adds	r3, r0, #1
 8009d9c:	89a3      	ldrh	r3, [r4, #12]
 8009d9e:	d106      	bne.n	8009dae <__sflush_r+0x62>
 8009da0:	6829      	ldr	r1, [r5, #0]
 8009da2:	291d      	cmp	r1, #29
 8009da4:	d82c      	bhi.n	8009e00 <__sflush_r+0xb4>
 8009da6:	4a29      	ldr	r2, [pc, #164]	; (8009e4c <__sflush_r+0x100>)
 8009da8:	40ca      	lsrs	r2, r1
 8009daa:	07d6      	lsls	r6, r2, #31
 8009dac:	d528      	bpl.n	8009e00 <__sflush_r+0xb4>
 8009dae:	2200      	movs	r2, #0
 8009db0:	6062      	str	r2, [r4, #4]
 8009db2:	04d9      	lsls	r1, r3, #19
 8009db4:	6922      	ldr	r2, [r4, #16]
 8009db6:	6022      	str	r2, [r4, #0]
 8009db8:	d504      	bpl.n	8009dc4 <__sflush_r+0x78>
 8009dba:	1c42      	adds	r2, r0, #1
 8009dbc:	d101      	bne.n	8009dc2 <__sflush_r+0x76>
 8009dbe:	682b      	ldr	r3, [r5, #0]
 8009dc0:	b903      	cbnz	r3, 8009dc4 <__sflush_r+0x78>
 8009dc2:	6560      	str	r0, [r4, #84]	; 0x54
 8009dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dc6:	602f      	str	r7, [r5, #0]
 8009dc8:	2900      	cmp	r1, #0
 8009dca:	d0cb      	beq.n	8009d64 <__sflush_r+0x18>
 8009dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dd0:	4299      	cmp	r1, r3
 8009dd2:	d002      	beq.n	8009dda <__sflush_r+0x8e>
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	f7ff faa3 	bl	8009320 <_free_r>
 8009dda:	2000      	movs	r0, #0
 8009ddc:	6360      	str	r0, [r4, #52]	; 0x34
 8009dde:	e7c2      	b.n	8009d66 <__sflush_r+0x1a>
 8009de0:	6a21      	ldr	r1, [r4, #32]
 8009de2:	2301      	movs	r3, #1
 8009de4:	4628      	mov	r0, r5
 8009de6:	47b0      	blx	r6
 8009de8:	1c41      	adds	r1, r0, #1
 8009dea:	d1c7      	bne.n	8009d7c <__sflush_r+0x30>
 8009dec:	682b      	ldr	r3, [r5, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d0c4      	beq.n	8009d7c <__sflush_r+0x30>
 8009df2:	2b1d      	cmp	r3, #29
 8009df4:	d001      	beq.n	8009dfa <__sflush_r+0xae>
 8009df6:	2b16      	cmp	r3, #22
 8009df8:	d101      	bne.n	8009dfe <__sflush_r+0xb2>
 8009dfa:	602f      	str	r7, [r5, #0]
 8009dfc:	e7b2      	b.n	8009d64 <__sflush_r+0x18>
 8009dfe:	89a3      	ldrh	r3, [r4, #12]
 8009e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e04:	81a3      	strh	r3, [r4, #12]
 8009e06:	e7ae      	b.n	8009d66 <__sflush_r+0x1a>
 8009e08:	690f      	ldr	r7, [r1, #16]
 8009e0a:	2f00      	cmp	r7, #0
 8009e0c:	d0aa      	beq.n	8009d64 <__sflush_r+0x18>
 8009e0e:	0793      	lsls	r3, r2, #30
 8009e10:	680e      	ldr	r6, [r1, #0]
 8009e12:	bf08      	it	eq
 8009e14:	694b      	ldreq	r3, [r1, #20]
 8009e16:	600f      	str	r7, [r1, #0]
 8009e18:	bf18      	it	ne
 8009e1a:	2300      	movne	r3, #0
 8009e1c:	1bf6      	subs	r6, r6, r7
 8009e1e:	608b      	str	r3, [r1, #8]
 8009e20:	2e00      	cmp	r6, #0
 8009e22:	dd9f      	ble.n	8009d64 <__sflush_r+0x18>
 8009e24:	6a21      	ldr	r1, [r4, #32]
 8009e26:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009e2a:	4633      	mov	r3, r6
 8009e2c:	463a      	mov	r2, r7
 8009e2e:	4628      	mov	r0, r5
 8009e30:	47e0      	blx	ip
 8009e32:	2800      	cmp	r0, #0
 8009e34:	dc06      	bgt.n	8009e44 <__sflush_r+0xf8>
 8009e36:	89a3      	ldrh	r3, [r4, #12]
 8009e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e3c:	81a3      	strh	r3, [r4, #12]
 8009e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e42:	e790      	b.n	8009d66 <__sflush_r+0x1a>
 8009e44:	4407      	add	r7, r0
 8009e46:	1a36      	subs	r6, r6, r0
 8009e48:	e7ea      	b.n	8009e20 <__sflush_r+0xd4>
 8009e4a:	bf00      	nop
 8009e4c:	20400001 	.word	0x20400001

08009e50 <_fflush_r>:
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	690b      	ldr	r3, [r1, #16]
 8009e54:	4605      	mov	r5, r0
 8009e56:	460c      	mov	r4, r1
 8009e58:	b913      	cbnz	r3, 8009e60 <_fflush_r+0x10>
 8009e5a:	2500      	movs	r5, #0
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	bd38      	pop	{r3, r4, r5, pc}
 8009e60:	b118      	cbz	r0, 8009e6a <_fflush_r+0x1a>
 8009e62:	6983      	ldr	r3, [r0, #24]
 8009e64:	b90b      	cbnz	r3, 8009e6a <_fflush_r+0x1a>
 8009e66:	f000 f887 	bl	8009f78 <__sinit>
 8009e6a:	4b14      	ldr	r3, [pc, #80]	; (8009ebc <_fflush_r+0x6c>)
 8009e6c:	429c      	cmp	r4, r3
 8009e6e:	d11b      	bne.n	8009ea8 <_fflush_r+0x58>
 8009e70:	686c      	ldr	r4, [r5, #4]
 8009e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d0ef      	beq.n	8009e5a <_fflush_r+0xa>
 8009e7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e7c:	07d0      	lsls	r0, r2, #31
 8009e7e:	d404      	bmi.n	8009e8a <_fflush_r+0x3a>
 8009e80:	0599      	lsls	r1, r3, #22
 8009e82:	d402      	bmi.n	8009e8a <_fflush_r+0x3a>
 8009e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e86:	f000 f915 	bl	800a0b4 <__retarget_lock_acquire_recursive>
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	f7ff ff5d 	bl	8009d4c <__sflush_r>
 8009e92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e94:	07da      	lsls	r2, r3, #31
 8009e96:	4605      	mov	r5, r0
 8009e98:	d4e0      	bmi.n	8009e5c <_fflush_r+0xc>
 8009e9a:	89a3      	ldrh	r3, [r4, #12]
 8009e9c:	059b      	lsls	r3, r3, #22
 8009e9e:	d4dd      	bmi.n	8009e5c <_fflush_r+0xc>
 8009ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ea2:	f000 f908 	bl	800a0b6 <__retarget_lock_release_recursive>
 8009ea6:	e7d9      	b.n	8009e5c <_fflush_r+0xc>
 8009ea8:	4b05      	ldr	r3, [pc, #20]	; (8009ec0 <_fflush_r+0x70>)
 8009eaa:	429c      	cmp	r4, r3
 8009eac:	d101      	bne.n	8009eb2 <_fflush_r+0x62>
 8009eae:	68ac      	ldr	r4, [r5, #8]
 8009eb0:	e7df      	b.n	8009e72 <_fflush_r+0x22>
 8009eb2:	4b04      	ldr	r3, [pc, #16]	; (8009ec4 <_fflush_r+0x74>)
 8009eb4:	429c      	cmp	r4, r3
 8009eb6:	bf08      	it	eq
 8009eb8:	68ec      	ldreq	r4, [r5, #12]
 8009eba:	e7da      	b.n	8009e72 <_fflush_r+0x22>
 8009ebc:	0800a8dc 	.word	0x0800a8dc
 8009ec0:	0800a8fc 	.word	0x0800a8fc
 8009ec4:	0800a8bc 	.word	0x0800a8bc

08009ec8 <std>:
 8009ec8:	2300      	movs	r3, #0
 8009eca:	b510      	push	{r4, lr}
 8009ecc:	4604      	mov	r4, r0
 8009ece:	e9c0 3300 	strd	r3, r3, [r0]
 8009ed2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ed6:	6083      	str	r3, [r0, #8]
 8009ed8:	8181      	strh	r1, [r0, #12]
 8009eda:	6643      	str	r3, [r0, #100]	; 0x64
 8009edc:	81c2      	strh	r2, [r0, #14]
 8009ede:	6183      	str	r3, [r0, #24]
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	2208      	movs	r2, #8
 8009ee4:	305c      	adds	r0, #92	; 0x5c
 8009ee6:	f7fb fe29 	bl	8005b3c <memset>
 8009eea:	4b05      	ldr	r3, [pc, #20]	; (8009f00 <std+0x38>)
 8009eec:	6263      	str	r3, [r4, #36]	; 0x24
 8009eee:	4b05      	ldr	r3, [pc, #20]	; (8009f04 <std+0x3c>)
 8009ef0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ef2:	4b05      	ldr	r3, [pc, #20]	; (8009f08 <std+0x40>)
 8009ef4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ef6:	4b05      	ldr	r3, [pc, #20]	; (8009f0c <std+0x44>)
 8009ef8:	6224      	str	r4, [r4, #32]
 8009efa:	6323      	str	r3, [r4, #48]	; 0x30
 8009efc:	bd10      	pop	{r4, pc}
 8009efe:	bf00      	nop
 8009f00:	0800a21d 	.word	0x0800a21d
 8009f04:	0800a23f 	.word	0x0800a23f
 8009f08:	0800a277 	.word	0x0800a277
 8009f0c:	0800a29b 	.word	0x0800a29b

08009f10 <_cleanup_r>:
 8009f10:	4901      	ldr	r1, [pc, #4]	; (8009f18 <_cleanup_r+0x8>)
 8009f12:	f000 b8af 	b.w	800a074 <_fwalk_reent>
 8009f16:	bf00      	nop
 8009f18:	08009e51 	.word	0x08009e51

08009f1c <__sfmoreglue>:
 8009f1c:	b570      	push	{r4, r5, r6, lr}
 8009f1e:	2268      	movs	r2, #104	; 0x68
 8009f20:	1e4d      	subs	r5, r1, #1
 8009f22:	4355      	muls	r5, r2
 8009f24:	460e      	mov	r6, r1
 8009f26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f2a:	f7ff fa63 	bl	80093f4 <_malloc_r>
 8009f2e:	4604      	mov	r4, r0
 8009f30:	b140      	cbz	r0, 8009f44 <__sfmoreglue+0x28>
 8009f32:	2100      	movs	r1, #0
 8009f34:	e9c0 1600 	strd	r1, r6, [r0]
 8009f38:	300c      	adds	r0, #12
 8009f3a:	60a0      	str	r0, [r4, #8]
 8009f3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f40:	f7fb fdfc 	bl	8005b3c <memset>
 8009f44:	4620      	mov	r0, r4
 8009f46:	bd70      	pop	{r4, r5, r6, pc}

08009f48 <__sfp_lock_acquire>:
 8009f48:	4801      	ldr	r0, [pc, #4]	; (8009f50 <__sfp_lock_acquire+0x8>)
 8009f4a:	f000 b8b3 	b.w	800a0b4 <__retarget_lock_acquire_recursive>
 8009f4e:	bf00      	nop
 8009f50:	20000455 	.word	0x20000455

08009f54 <__sfp_lock_release>:
 8009f54:	4801      	ldr	r0, [pc, #4]	; (8009f5c <__sfp_lock_release+0x8>)
 8009f56:	f000 b8ae 	b.w	800a0b6 <__retarget_lock_release_recursive>
 8009f5a:	bf00      	nop
 8009f5c:	20000455 	.word	0x20000455

08009f60 <__sinit_lock_acquire>:
 8009f60:	4801      	ldr	r0, [pc, #4]	; (8009f68 <__sinit_lock_acquire+0x8>)
 8009f62:	f000 b8a7 	b.w	800a0b4 <__retarget_lock_acquire_recursive>
 8009f66:	bf00      	nop
 8009f68:	20000456 	.word	0x20000456

08009f6c <__sinit_lock_release>:
 8009f6c:	4801      	ldr	r0, [pc, #4]	; (8009f74 <__sinit_lock_release+0x8>)
 8009f6e:	f000 b8a2 	b.w	800a0b6 <__retarget_lock_release_recursive>
 8009f72:	bf00      	nop
 8009f74:	20000456 	.word	0x20000456

08009f78 <__sinit>:
 8009f78:	b510      	push	{r4, lr}
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	f7ff fff0 	bl	8009f60 <__sinit_lock_acquire>
 8009f80:	69a3      	ldr	r3, [r4, #24]
 8009f82:	b11b      	cbz	r3, 8009f8c <__sinit+0x14>
 8009f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f88:	f7ff bff0 	b.w	8009f6c <__sinit_lock_release>
 8009f8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f90:	6523      	str	r3, [r4, #80]	; 0x50
 8009f92:	4b13      	ldr	r3, [pc, #76]	; (8009fe0 <__sinit+0x68>)
 8009f94:	4a13      	ldr	r2, [pc, #76]	; (8009fe4 <__sinit+0x6c>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f9a:	42a3      	cmp	r3, r4
 8009f9c:	bf04      	itt	eq
 8009f9e:	2301      	moveq	r3, #1
 8009fa0:	61a3      	streq	r3, [r4, #24]
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f000 f820 	bl	8009fe8 <__sfp>
 8009fa8:	6060      	str	r0, [r4, #4]
 8009faa:	4620      	mov	r0, r4
 8009fac:	f000 f81c 	bl	8009fe8 <__sfp>
 8009fb0:	60a0      	str	r0, [r4, #8]
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f000 f818 	bl	8009fe8 <__sfp>
 8009fb8:	2200      	movs	r2, #0
 8009fba:	60e0      	str	r0, [r4, #12]
 8009fbc:	2104      	movs	r1, #4
 8009fbe:	6860      	ldr	r0, [r4, #4]
 8009fc0:	f7ff ff82 	bl	8009ec8 <std>
 8009fc4:	68a0      	ldr	r0, [r4, #8]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	2109      	movs	r1, #9
 8009fca:	f7ff ff7d 	bl	8009ec8 <std>
 8009fce:	68e0      	ldr	r0, [r4, #12]
 8009fd0:	2202      	movs	r2, #2
 8009fd2:	2112      	movs	r1, #18
 8009fd4:	f7ff ff78 	bl	8009ec8 <std>
 8009fd8:	2301      	movs	r3, #1
 8009fda:	61a3      	str	r3, [r4, #24]
 8009fdc:	e7d2      	b.n	8009f84 <__sinit+0xc>
 8009fde:	bf00      	nop
 8009fe0:	0800a474 	.word	0x0800a474
 8009fe4:	08009f11 	.word	0x08009f11

08009fe8 <__sfp>:
 8009fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fea:	4607      	mov	r7, r0
 8009fec:	f7ff ffac 	bl	8009f48 <__sfp_lock_acquire>
 8009ff0:	4b1e      	ldr	r3, [pc, #120]	; (800a06c <__sfp+0x84>)
 8009ff2:	681e      	ldr	r6, [r3, #0]
 8009ff4:	69b3      	ldr	r3, [r6, #24]
 8009ff6:	b913      	cbnz	r3, 8009ffe <__sfp+0x16>
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	f7ff ffbd 	bl	8009f78 <__sinit>
 8009ffe:	3648      	adds	r6, #72	; 0x48
 800a000:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a004:	3b01      	subs	r3, #1
 800a006:	d503      	bpl.n	800a010 <__sfp+0x28>
 800a008:	6833      	ldr	r3, [r6, #0]
 800a00a:	b30b      	cbz	r3, 800a050 <__sfp+0x68>
 800a00c:	6836      	ldr	r6, [r6, #0]
 800a00e:	e7f7      	b.n	800a000 <__sfp+0x18>
 800a010:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a014:	b9d5      	cbnz	r5, 800a04c <__sfp+0x64>
 800a016:	4b16      	ldr	r3, [pc, #88]	; (800a070 <__sfp+0x88>)
 800a018:	60e3      	str	r3, [r4, #12]
 800a01a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a01e:	6665      	str	r5, [r4, #100]	; 0x64
 800a020:	f000 f847 	bl	800a0b2 <__retarget_lock_init_recursive>
 800a024:	f7ff ff96 	bl	8009f54 <__sfp_lock_release>
 800a028:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a02c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a030:	6025      	str	r5, [r4, #0]
 800a032:	61a5      	str	r5, [r4, #24]
 800a034:	2208      	movs	r2, #8
 800a036:	4629      	mov	r1, r5
 800a038:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a03c:	f7fb fd7e 	bl	8005b3c <memset>
 800a040:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a044:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a048:	4620      	mov	r0, r4
 800a04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a04c:	3468      	adds	r4, #104	; 0x68
 800a04e:	e7d9      	b.n	800a004 <__sfp+0x1c>
 800a050:	2104      	movs	r1, #4
 800a052:	4638      	mov	r0, r7
 800a054:	f7ff ff62 	bl	8009f1c <__sfmoreglue>
 800a058:	4604      	mov	r4, r0
 800a05a:	6030      	str	r0, [r6, #0]
 800a05c:	2800      	cmp	r0, #0
 800a05e:	d1d5      	bne.n	800a00c <__sfp+0x24>
 800a060:	f7ff ff78 	bl	8009f54 <__sfp_lock_release>
 800a064:	230c      	movs	r3, #12
 800a066:	603b      	str	r3, [r7, #0]
 800a068:	e7ee      	b.n	800a048 <__sfp+0x60>
 800a06a:	bf00      	nop
 800a06c:	0800a474 	.word	0x0800a474
 800a070:	ffff0001 	.word	0xffff0001

0800a074 <_fwalk_reent>:
 800a074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a078:	4606      	mov	r6, r0
 800a07a:	4688      	mov	r8, r1
 800a07c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a080:	2700      	movs	r7, #0
 800a082:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a086:	f1b9 0901 	subs.w	r9, r9, #1
 800a08a:	d505      	bpl.n	800a098 <_fwalk_reent+0x24>
 800a08c:	6824      	ldr	r4, [r4, #0]
 800a08e:	2c00      	cmp	r4, #0
 800a090:	d1f7      	bne.n	800a082 <_fwalk_reent+0xe>
 800a092:	4638      	mov	r0, r7
 800a094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a098:	89ab      	ldrh	r3, [r5, #12]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d907      	bls.n	800a0ae <_fwalk_reent+0x3a>
 800a09e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	d003      	beq.n	800a0ae <_fwalk_reent+0x3a>
 800a0a6:	4629      	mov	r1, r5
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	47c0      	blx	r8
 800a0ac:	4307      	orrs	r7, r0
 800a0ae:	3568      	adds	r5, #104	; 0x68
 800a0b0:	e7e9      	b.n	800a086 <_fwalk_reent+0x12>

0800a0b2 <__retarget_lock_init_recursive>:
 800a0b2:	4770      	bx	lr

0800a0b4 <__retarget_lock_acquire_recursive>:
 800a0b4:	4770      	bx	lr

0800a0b6 <__retarget_lock_release_recursive>:
 800a0b6:	4770      	bx	lr

0800a0b8 <__swhatbuf_r>:
 800a0b8:	b570      	push	{r4, r5, r6, lr}
 800a0ba:	460e      	mov	r6, r1
 800a0bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0c0:	2900      	cmp	r1, #0
 800a0c2:	b096      	sub	sp, #88	; 0x58
 800a0c4:	4614      	mov	r4, r2
 800a0c6:	461d      	mov	r5, r3
 800a0c8:	da08      	bge.n	800a0dc <__swhatbuf_r+0x24>
 800a0ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	602a      	str	r2, [r5, #0]
 800a0d2:	061a      	lsls	r2, r3, #24
 800a0d4:	d410      	bmi.n	800a0f8 <__swhatbuf_r+0x40>
 800a0d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0da:	e00e      	b.n	800a0fa <__swhatbuf_r+0x42>
 800a0dc:	466a      	mov	r2, sp
 800a0de:	f000 f903 	bl	800a2e8 <_fstat_r>
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	dbf1      	blt.n	800a0ca <__swhatbuf_r+0x12>
 800a0e6:	9a01      	ldr	r2, [sp, #4]
 800a0e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a0ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a0f0:	425a      	negs	r2, r3
 800a0f2:	415a      	adcs	r2, r3
 800a0f4:	602a      	str	r2, [r5, #0]
 800a0f6:	e7ee      	b.n	800a0d6 <__swhatbuf_r+0x1e>
 800a0f8:	2340      	movs	r3, #64	; 0x40
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	6023      	str	r3, [r4, #0]
 800a0fe:	b016      	add	sp, #88	; 0x58
 800a100:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a104 <__smakebuf_r>:
 800a104:	898b      	ldrh	r3, [r1, #12]
 800a106:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a108:	079d      	lsls	r5, r3, #30
 800a10a:	4606      	mov	r6, r0
 800a10c:	460c      	mov	r4, r1
 800a10e:	d507      	bpl.n	800a120 <__smakebuf_r+0x1c>
 800a110:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a114:	6023      	str	r3, [r4, #0]
 800a116:	6123      	str	r3, [r4, #16]
 800a118:	2301      	movs	r3, #1
 800a11a:	6163      	str	r3, [r4, #20]
 800a11c:	b002      	add	sp, #8
 800a11e:	bd70      	pop	{r4, r5, r6, pc}
 800a120:	ab01      	add	r3, sp, #4
 800a122:	466a      	mov	r2, sp
 800a124:	f7ff ffc8 	bl	800a0b8 <__swhatbuf_r>
 800a128:	9900      	ldr	r1, [sp, #0]
 800a12a:	4605      	mov	r5, r0
 800a12c:	4630      	mov	r0, r6
 800a12e:	f7ff f961 	bl	80093f4 <_malloc_r>
 800a132:	b948      	cbnz	r0, 800a148 <__smakebuf_r+0x44>
 800a134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a138:	059a      	lsls	r2, r3, #22
 800a13a:	d4ef      	bmi.n	800a11c <__smakebuf_r+0x18>
 800a13c:	f023 0303 	bic.w	r3, r3, #3
 800a140:	f043 0302 	orr.w	r3, r3, #2
 800a144:	81a3      	strh	r3, [r4, #12]
 800a146:	e7e3      	b.n	800a110 <__smakebuf_r+0xc>
 800a148:	4b0d      	ldr	r3, [pc, #52]	; (800a180 <__smakebuf_r+0x7c>)
 800a14a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a14c:	89a3      	ldrh	r3, [r4, #12]
 800a14e:	6020      	str	r0, [r4, #0]
 800a150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a154:	81a3      	strh	r3, [r4, #12]
 800a156:	9b00      	ldr	r3, [sp, #0]
 800a158:	6163      	str	r3, [r4, #20]
 800a15a:	9b01      	ldr	r3, [sp, #4]
 800a15c:	6120      	str	r0, [r4, #16]
 800a15e:	b15b      	cbz	r3, 800a178 <__smakebuf_r+0x74>
 800a160:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a164:	4630      	mov	r0, r6
 800a166:	f000 f8d1 	bl	800a30c <_isatty_r>
 800a16a:	b128      	cbz	r0, 800a178 <__smakebuf_r+0x74>
 800a16c:	89a3      	ldrh	r3, [r4, #12]
 800a16e:	f023 0303 	bic.w	r3, r3, #3
 800a172:	f043 0301 	orr.w	r3, r3, #1
 800a176:	81a3      	strh	r3, [r4, #12]
 800a178:	89a0      	ldrh	r0, [r4, #12]
 800a17a:	4305      	orrs	r5, r0
 800a17c:	81a5      	strh	r5, [r4, #12]
 800a17e:	e7cd      	b.n	800a11c <__smakebuf_r+0x18>
 800a180:	08009f11 	.word	0x08009f11

0800a184 <_malloc_usable_size_r>:
 800a184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a188:	1f18      	subs	r0, r3, #4
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	bfbc      	itt	lt
 800a18e:	580b      	ldrlt	r3, [r1, r0]
 800a190:	18c0      	addlt	r0, r0, r3
 800a192:	4770      	bx	lr

0800a194 <_raise_r>:
 800a194:	291f      	cmp	r1, #31
 800a196:	b538      	push	{r3, r4, r5, lr}
 800a198:	4604      	mov	r4, r0
 800a19a:	460d      	mov	r5, r1
 800a19c:	d904      	bls.n	800a1a8 <_raise_r+0x14>
 800a19e:	2316      	movs	r3, #22
 800a1a0:	6003      	str	r3, [r0, #0]
 800a1a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a6:	bd38      	pop	{r3, r4, r5, pc}
 800a1a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a1aa:	b112      	cbz	r2, 800a1b2 <_raise_r+0x1e>
 800a1ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1b0:	b94b      	cbnz	r3, 800a1c6 <_raise_r+0x32>
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f000 f830 	bl	800a218 <_getpid_r>
 800a1b8:	462a      	mov	r2, r5
 800a1ba:	4601      	mov	r1, r0
 800a1bc:	4620      	mov	r0, r4
 800a1be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1c2:	f000 b817 	b.w	800a1f4 <_kill_r>
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d00a      	beq.n	800a1e0 <_raise_r+0x4c>
 800a1ca:	1c59      	adds	r1, r3, #1
 800a1cc:	d103      	bne.n	800a1d6 <_raise_r+0x42>
 800a1ce:	2316      	movs	r3, #22
 800a1d0:	6003      	str	r3, [r0, #0]
 800a1d2:	2001      	movs	r0, #1
 800a1d4:	e7e7      	b.n	800a1a6 <_raise_r+0x12>
 800a1d6:	2400      	movs	r4, #0
 800a1d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a1dc:	4628      	mov	r0, r5
 800a1de:	4798      	blx	r3
 800a1e0:	2000      	movs	r0, #0
 800a1e2:	e7e0      	b.n	800a1a6 <_raise_r+0x12>

0800a1e4 <raise>:
 800a1e4:	4b02      	ldr	r3, [pc, #8]	; (800a1f0 <raise+0xc>)
 800a1e6:	4601      	mov	r1, r0
 800a1e8:	6818      	ldr	r0, [r3, #0]
 800a1ea:	f7ff bfd3 	b.w	800a194 <_raise_r>
 800a1ee:	bf00      	nop
 800a1f0:	2000000c 	.word	0x2000000c

0800a1f4 <_kill_r>:
 800a1f4:	b538      	push	{r3, r4, r5, lr}
 800a1f6:	4d07      	ldr	r5, [pc, #28]	; (800a214 <_kill_r+0x20>)
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	4608      	mov	r0, r1
 800a1fe:	4611      	mov	r1, r2
 800a200:	602b      	str	r3, [r5, #0]
 800a202:	f7f8 f94f 	bl	80024a4 <_kill>
 800a206:	1c43      	adds	r3, r0, #1
 800a208:	d102      	bne.n	800a210 <_kill_r+0x1c>
 800a20a:	682b      	ldr	r3, [r5, #0]
 800a20c:	b103      	cbz	r3, 800a210 <_kill_r+0x1c>
 800a20e:	6023      	str	r3, [r4, #0]
 800a210:	bd38      	pop	{r3, r4, r5, pc}
 800a212:	bf00      	nop
 800a214:	20000450 	.word	0x20000450

0800a218 <_getpid_r>:
 800a218:	f7f8 b93d 	b.w	8002496 <_getpid>

0800a21c <__sread>:
 800a21c:	b510      	push	{r4, lr}
 800a21e:	460c      	mov	r4, r1
 800a220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a224:	f000 f894 	bl	800a350 <_read_r>
 800a228:	2800      	cmp	r0, #0
 800a22a:	bfab      	itete	ge
 800a22c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a22e:	89a3      	ldrhlt	r3, [r4, #12]
 800a230:	181b      	addge	r3, r3, r0
 800a232:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a236:	bfac      	ite	ge
 800a238:	6563      	strge	r3, [r4, #84]	; 0x54
 800a23a:	81a3      	strhlt	r3, [r4, #12]
 800a23c:	bd10      	pop	{r4, pc}

0800a23e <__swrite>:
 800a23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a242:	461f      	mov	r7, r3
 800a244:	898b      	ldrh	r3, [r1, #12]
 800a246:	05db      	lsls	r3, r3, #23
 800a248:	4605      	mov	r5, r0
 800a24a:	460c      	mov	r4, r1
 800a24c:	4616      	mov	r6, r2
 800a24e:	d505      	bpl.n	800a25c <__swrite+0x1e>
 800a250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a254:	2302      	movs	r3, #2
 800a256:	2200      	movs	r2, #0
 800a258:	f000 f868 	bl	800a32c <_lseek_r>
 800a25c:	89a3      	ldrh	r3, [r4, #12]
 800a25e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a262:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a266:	81a3      	strh	r3, [r4, #12]
 800a268:	4632      	mov	r2, r6
 800a26a:	463b      	mov	r3, r7
 800a26c:	4628      	mov	r0, r5
 800a26e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a272:	f000 b817 	b.w	800a2a4 <_write_r>

0800a276 <__sseek>:
 800a276:	b510      	push	{r4, lr}
 800a278:	460c      	mov	r4, r1
 800a27a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a27e:	f000 f855 	bl	800a32c <_lseek_r>
 800a282:	1c43      	adds	r3, r0, #1
 800a284:	89a3      	ldrh	r3, [r4, #12]
 800a286:	bf15      	itete	ne
 800a288:	6560      	strne	r0, [r4, #84]	; 0x54
 800a28a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a28e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a292:	81a3      	strheq	r3, [r4, #12]
 800a294:	bf18      	it	ne
 800a296:	81a3      	strhne	r3, [r4, #12]
 800a298:	bd10      	pop	{r4, pc}

0800a29a <__sclose>:
 800a29a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a29e:	f000 b813 	b.w	800a2c8 <_close_r>
	...

0800a2a4 <_write_r>:
 800a2a4:	b538      	push	{r3, r4, r5, lr}
 800a2a6:	4d07      	ldr	r5, [pc, #28]	; (800a2c4 <_write_r+0x20>)
 800a2a8:	4604      	mov	r4, r0
 800a2aa:	4608      	mov	r0, r1
 800a2ac:	4611      	mov	r1, r2
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	602a      	str	r2, [r5, #0]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	f7f8 f92d 	bl	8002512 <_write>
 800a2b8:	1c43      	adds	r3, r0, #1
 800a2ba:	d102      	bne.n	800a2c2 <_write_r+0x1e>
 800a2bc:	682b      	ldr	r3, [r5, #0]
 800a2be:	b103      	cbz	r3, 800a2c2 <_write_r+0x1e>
 800a2c0:	6023      	str	r3, [r4, #0]
 800a2c2:	bd38      	pop	{r3, r4, r5, pc}
 800a2c4:	20000450 	.word	0x20000450

0800a2c8 <_close_r>:
 800a2c8:	b538      	push	{r3, r4, r5, lr}
 800a2ca:	4d06      	ldr	r5, [pc, #24]	; (800a2e4 <_close_r+0x1c>)
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	4608      	mov	r0, r1
 800a2d2:	602b      	str	r3, [r5, #0]
 800a2d4:	f7f8 f939 	bl	800254a <_close>
 800a2d8:	1c43      	adds	r3, r0, #1
 800a2da:	d102      	bne.n	800a2e2 <_close_r+0x1a>
 800a2dc:	682b      	ldr	r3, [r5, #0]
 800a2de:	b103      	cbz	r3, 800a2e2 <_close_r+0x1a>
 800a2e0:	6023      	str	r3, [r4, #0]
 800a2e2:	bd38      	pop	{r3, r4, r5, pc}
 800a2e4:	20000450 	.word	0x20000450

0800a2e8 <_fstat_r>:
 800a2e8:	b538      	push	{r3, r4, r5, lr}
 800a2ea:	4d07      	ldr	r5, [pc, #28]	; (800a308 <_fstat_r+0x20>)
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	4604      	mov	r4, r0
 800a2f0:	4608      	mov	r0, r1
 800a2f2:	4611      	mov	r1, r2
 800a2f4:	602b      	str	r3, [r5, #0]
 800a2f6:	f7f8 f933 	bl	8002560 <_fstat>
 800a2fa:	1c43      	adds	r3, r0, #1
 800a2fc:	d102      	bne.n	800a304 <_fstat_r+0x1c>
 800a2fe:	682b      	ldr	r3, [r5, #0]
 800a300:	b103      	cbz	r3, 800a304 <_fstat_r+0x1c>
 800a302:	6023      	str	r3, [r4, #0]
 800a304:	bd38      	pop	{r3, r4, r5, pc}
 800a306:	bf00      	nop
 800a308:	20000450 	.word	0x20000450

0800a30c <_isatty_r>:
 800a30c:	b538      	push	{r3, r4, r5, lr}
 800a30e:	4d06      	ldr	r5, [pc, #24]	; (800a328 <_isatty_r+0x1c>)
 800a310:	2300      	movs	r3, #0
 800a312:	4604      	mov	r4, r0
 800a314:	4608      	mov	r0, r1
 800a316:	602b      	str	r3, [r5, #0]
 800a318:	f7f8 f931 	bl	800257e <_isatty>
 800a31c:	1c43      	adds	r3, r0, #1
 800a31e:	d102      	bne.n	800a326 <_isatty_r+0x1a>
 800a320:	682b      	ldr	r3, [r5, #0]
 800a322:	b103      	cbz	r3, 800a326 <_isatty_r+0x1a>
 800a324:	6023      	str	r3, [r4, #0]
 800a326:	bd38      	pop	{r3, r4, r5, pc}
 800a328:	20000450 	.word	0x20000450

0800a32c <_lseek_r>:
 800a32c:	b538      	push	{r3, r4, r5, lr}
 800a32e:	4d07      	ldr	r5, [pc, #28]	; (800a34c <_lseek_r+0x20>)
 800a330:	4604      	mov	r4, r0
 800a332:	4608      	mov	r0, r1
 800a334:	4611      	mov	r1, r2
 800a336:	2200      	movs	r2, #0
 800a338:	602a      	str	r2, [r5, #0]
 800a33a:	461a      	mov	r2, r3
 800a33c:	f7f8 f929 	bl	8002592 <_lseek>
 800a340:	1c43      	adds	r3, r0, #1
 800a342:	d102      	bne.n	800a34a <_lseek_r+0x1e>
 800a344:	682b      	ldr	r3, [r5, #0]
 800a346:	b103      	cbz	r3, 800a34a <_lseek_r+0x1e>
 800a348:	6023      	str	r3, [r4, #0]
 800a34a:	bd38      	pop	{r3, r4, r5, pc}
 800a34c:	20000450 	.word	0x20000450

0800a350 <_read_r>:
 800a350:	b538      	push	{r3, r4, r5, lr}
 800a352:	4d07      	ldr	r5, [pc, #28]	; (800a370 <_read_r+0x20>)
 800a354:	4604      	mov	r4, r0
 800a356:	4608      	mov	r0, r1
 800a358:	4611      	mov	r1, r2
 800a35a:	2200      	movs	r2, #0
 800a35c:	602a      	str	r2, [r5, #0]
 800a35e:	461a      	mov	r2, r3
 800a360:	f7f8 f8ba 	bl	80024d8 <_read>
 800a364:	1c43      	adds	r3, r0, #1
 800a366:	d102      	bne.n	800a36e <_read_r+0x1e>
 800a368:	682b      	ldr	r3, [r5, #0]
 800a36a:	b103      	cbz	r3, 800a36e <_read_r+0x1e>
 800a36c:	6023      	str	r3, [r4, #0]
 800a36e:	bd38      	pop	{r3, r4, r5, pc}
 800a370:	20000450 	.word	0x20000450

0800a374 <_init>:
 800a374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a376:	bf00      	nop
 800a378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a37a:	bc08      	pop	{r3}
 800a37c:	469e      	mov	lr, r3
 800a37e:	4770      	bx	lr

0800a380 <_fini>:
 800a380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a382:	bf00      	nop
 800a384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a386:	bc08      	pop	{r3}
 800a388:	469e      	mov	lr, r3
 800a38a:	4770      	bx	lr
